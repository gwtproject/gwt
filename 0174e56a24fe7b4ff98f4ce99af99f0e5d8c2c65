{
  "comments": [
    {
      "key": {
        "uuid": "5cd96e3d_85264651",
        "filename": "user/super/com/google/gwt/emul/java/util/stream/Collector.java",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 5542
      },
      "writtenOn": "2016-03-22T14:04:53Z",
      "side": 1,
      "message": "maybe move it inside of CollectorImpl constructor? or add a second constructor with varargs characteristics.\nOr you could create static helper method to convert array to set.",
      "revId": "0174e56a24fe7b4ff98f4ce99af99f0e5d8c2c65",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cdb763a_20b1e42a",
        "filename": "user/super/com/google/gwt/emul/java/util/stream/Collector.java",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-03-22T15:48:08Z",
      "side": 1,
      "message": "BTW, Collection.Characteristics is an enum, so maybe use an EnumSet?\n\n+1 to looping over the array instead of creating an intermediate List object; or possibly:\n\n characteristics \u003d\u003d null || characteristics.length \u003d\u003d 0\n   ? Collections.emptySet()\n   : Collections.unmodifiableSet(EnumSet.of(characteristics[0], characteristics))\n\n(not optimal as characteristics[0] is added twice to the set, but probably still better)",
      "parentUuid": "5cd96e3d_85264651",
      "revId": "0174e56a24fe7b4ff98f4ce99af99f0e5d8c2c65",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ccf6672_4a6e0795",
        "filename": "user/super/com/google/gwt/emul/java/util/stream/Collector.java",
        "patchSetId": 5
      },
      "lineNbr": 54,
      "author": {
        "id": 5542
      },
      "writtenOn": "2016-03-22T14:04:53Z",
      "side": 1,
      "message": "is this method used? cant find the usage",
      "revId": "0174e56a24fe7b4ff98f4ce99af99f0e5d8c2c65",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cdb763a_00e3081f",
        "filename": "user/super/com/google/gwt/emul/java/util/stream/Collector.java",
        "patchSetId": 5
      },
      "lineNbr": 54,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-03-22T15:48:08Z",
      "side": 1,
      "message": "https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collector.html#of-java.util.function.Supplier-java.util.function.BiConsumer-java.util.function.BinaryOperator-java.util.stream.Collector.Characteristics...-",
      "parentUuid": "9ccf6672_4a6e0795",
      "revId": "0174e56a24fe7b4ff98f4ce99af99f0e5d8c2c65",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cdb763a_c0c1206d",
        "filename": "user/super/com/google/gwt/emul/java/util/stream/Collector.java",
        "patchSetId": 5
      },
      "lineNbr": 58,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-03-22T15:48:08Z",
      "side": 1,
      "message": "IDENTITY_FINISH should be added here, which means this could use:\n\n EnumSet.of(Characteristics.IDENTITY_FINISH, characteristics)\n\nto create the set.",
      "revId": "0174e56a24fe7b4ff98f4ce99af99f0e5d8c2c65",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cdb763a_80b0f824",
        "filename": "user/super/com/google/gwt/emul/java/util/stream/Collector.java",
        "patchSetId": 5
      },
      "lineNbr": 114,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-03-22T15:48:08Z",
      "side": 1,
      "message": "The returned Set is expected to be immutable.",
      "revId": "0174e56a24fe7b4ff98f4ce99af99f0e5d8c2c65",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cdb763a_409fd089",
        "filename": "user/super/com/google/gwt/emul/java/util/stream/Collectors.java",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-03-22T15:48:08Z",
      "side": 1,
      "message": "This should probably make sure characteristics of the returned Collector doesn\u0027t contain IDENTITY_FINISH",
      "revId": "0174e56a24fe7b4ff98f4ce99af99f0e5d8c2c65",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cdb763a_0095c863",
        "filename": "user/super/com/google/gwt/emul/java/util/stream/Collectors.java",
        "patchSetId": 5
      },
      "lineNbr": 107,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-03-22T15:48:08Z",
      "side": 1,
      "message": "That looks awfully complicated. From the javadoc, it looks like it could be:\n\n return Collector.\u003cT, Map\u003cK, List\u003cT\u003e\u003e, M\u003eof(\n   HashMap::new,\n   (m, o) -\u003e {\n     K key \u003d classifier.apply(o);\n     List\u003cT\u003e l \u003d m.get(k);\n     if (k \u003d\u003d null) {\n       l \u003d new ArrayList\u003c\u003e();\n       m.put(k, l;\n     }\n     l.add(o);\n   },\n   (m1, m2) -\u003e {\n     for (Map.Entry\u003cK, List\u003cT\u003e\u003e entry : m2.entrySet()) {\n       List\u003cT\u003e l \u003d m1.get(entry.getKey());\n       if (l !\u003d null) {\n         l.addAll(entry.getValue());\n       } else {\n         m.put(entry.getKey(), entry.getValue());\n       }\n     }\n   },\n   m -\u003e {\n     M result \u003d mapFactory.get();\n     for (Map.Entry\u003cK, List\u003cT\u003e\u003e entry : m.entrySet()) {\n       result.put(result.getKey(), result.getValue().stream().collect(downstream));\n     }\n   });",
      "revId": "0174e56a24fe7b4ff98f4ce99af99f0e5d8c2c65",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bccc2a7e_48dc53e5",
        "filename": "user/super/com/google/gwt/emul/java/util/stream/Collectors.java",
        "patchSetId": 5
      },
      "lineNbr": 120,
      "author": {
        "id": 5542
      },
      "writtenOn": "2016-03-22T14:04:53Z",
      "side": 1,
      "message": "new HashMap\u003c\u003e(m1)",
      "revId": "0174e56a24fe7b4ff98f4ce99af99f0e5d8c2c65",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cdb763a_2083a432",
        "filename": "user/super/com/google/gwt/emul/java/util/stream/Collectors.java",
        "patchSetId": 5
      },
      "lineNbr": 120,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-03-22T15:48:08Z",
      "side": 1,
      "message": "Actually, this could just modify m1 rather than creating a new map.",
      "parentUuid": "bccc2a7e_48dc53e5",
      "revId": "0174e56a24fe7b4ff98f4ce99af99f0e5d8c2c65",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cdb763a_8082b828",
        "filename": "user/super/com/google/gwt/emul/java/util/stream/Collectors.java",
        "patchSetId": 5
      },
      "lineNbr": 151,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-03-22T15:48:08Z",
      "side": 1,
      "message": "I\u0027m not really used to method references yet, but couldn\u0027t this be written:\n\n return Collector.\u003cCharSequence, StringBuilder, String\u003eof(\n     StringBuilder::new,\n     StringBuilder::append,\n     StringBuilder::append,\n     StringBuilder::toString);",
      "revId": "0174e56a24fe7b4ff98f4ce99af99f0e5d8c2c65",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ce03ae0_6121303a",
        "filename": "user/super/com/google/gwt/emul/java/util/stream/Collectors.java",
        "patchSetId": 5
      },
      "lineNbr": 161,
      "author": {
        "id": 5542
      },
      "writtenOn": "2016-03-22T14:04:53Z",
      "side": 1,
      "message": "Can we use String.join or StringJoiner instead?",
      "revId": "0174e56a24fe7b4ff98f4ce99af99f0e5d8c2c65",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cdb763a_c073e024",
        "filename": "user/super/com/google/gwt/emul/java/util/stream/Collectors.java",
        "patchSetId": 5
      },
      "lineNbr": 201,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-03-22T15:48:08Z",
      "side": 1,
      "message": "How about calling CollectorImpl ctor directly (passing the set as-is) instead of copying an immutable set into an array to build a new immutable set?",
      "revId": "0174e56a24fe7b4ff98f4ce99af99f0e5d8c2c65",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cd96e3d_45cd1eaa",
        "filename": "user/super/com/google/gwt/emul/java/util/stream/Collectors.java",
        "patchSetId": 5
      },
      "lineNbr": 240,
      "author": {
        "id": 5542
      },
      "writtenOn": "2016-03-22T14:04:53Z",
      "side": 1,
      "message": "Why do you want to use array with one element here?\nCan we use Function.identity or something like that instead?",
      "revId": "0174e56a24fe7b4ff98f4ce99af99f0e5d8c2c65",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cdb763a_e3caa665",
        "filename": "user/super/com/google/gwt/emul/java/util/stream/Collectors.java",
        "patchSetId": 5
      },
      "lineNbr": 240,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-03-22T15:48:08Z",
      "side": 1,
      "message": "This is the \"value holder\" pattern. We could use \u0027identity\u0027 directly, except that the accumulator needs to \"mutate\" the value. Maybe an explicit ValueHolder class would be better?\n\n class ValueHolder\u003cU\u003e {\n   U value;\n }\n return Collector.\u003cT, ValueHolder\u003cU\u003e, U\u003eof(\n   () -\u003e {\n     ValueHolder\u003cU\u003e h \u003d new ValueHolder\u003c\u003e();\n     h.value \u003d identity;\n     return h;\n   },\n   (h, t) -\u003e {\n     h.value \u003d op.apply(h.value, mapper.apply(t));\n   },\n   (h1, h2) -\u003e {\n     h1.value \u003d op.apply(h1.value, h2.value);\n   },\n   h -\u003e h.value);\n\n(note: no unsafe cast; also reuses h1 instead of creating new value holder in combiner)",
      "parentUuid": "5cd96e3d_45cd1eaa",
      "revId": "0174e56a24fe7b4ff98f4ce99af99f0e5d8c2c65",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cd96e3d_65d2224b",
        "filename": "user/super/com/google/gwt/emul/java/util/stream/Collectors.java",
        "patchSetId": 5
      },
      "lineNbr": 285,
      "author": {
        "id": 5542
      },
      "writtenOn": "2016-03-22T14:04:53Z",
      "side": 1,
      "message": "maybe you could use combineAndThen with summarizingDouble to reuse the code here?",
      "revId": "0174e56a24fe7b4ff98f4ce99af99f0e5d8c2c65",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cdb763a_83f562a6",
        "filename": "user/super/com/google/gwt/emul/java/util/stream/Collectors.java",
        "patchSetId": 5
      },
      "lineNbr": 326,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-03-22T15:48:08Z",
      "side": 1,
      "message": "Directly modify c1 instead of creating new collection",
      "revId": "0174e56a24fe7b4ff98f4ce99af99f0e5d8c2c65",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cdb763a_43eb5acb",
        "filename": "user/super/com/google/gwt/emul/java/util/stream/Collectors.java",
        "patchSetId": 5
      },
      "lineNbr": 365,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-03-22T15:48:08Z",
      "side": 1,
      "message": "Directly modify m1 instead of copying the map",
      "revId": "0174e56a24fe7b4ff98f4ce99af99f0e5d8c2c65",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bccc2a7e_28d70fc5",
        "filename": "user/test/com/google/gwt/emultest/java8/util/stream/CollectorsTest.java",
        "patchSetId": 5
      },
      "lineNbr": 461,
      "author": {
        "id": 5542
      },
      "writtenOn": "2016-03-22T14:04:53Z",
      "side": 1,
      "message": "please add comments before described line",
      "revId": "0174e56a24fe7b4ff98f4ce99af99f0e5d8c2c65",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ccf6672_2a69c38b",
        "filename": "user/test/com/google/gwt/emultest/java8/util/stream/CollectorsTest.java",
        "patchSetId": 5
      },
      "lineNbr": 475,
      "author": {
        "id": 5542
      },
      "writtenOn": "2016-03-22T14:04:53Z",
      "side": 1,
      "message": "please add line breaks between methods",
      "revId": "0174e56a24fe7b4ff98f4ce99af99f0e5d8c2c65",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}