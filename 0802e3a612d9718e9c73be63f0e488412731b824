{
  "comments": [
    {
      "key": {
        "uuid": "68a8fe90_0f0a651e",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/GenerateJavaScriptAST.java",
        "patchSetId": 2
      },
      "lineNbr": 1437,
      "author": {
        "id": 5110
      },
      "writtenOn": "2015-02-20T02:43:01Z",
      "side": 1,
      "message": "To double check, this should never happen because JsoRestrictionChecker should have already failed, right?",
      "revId": "0802e3a612d9718e9c73be63f0e488412731b824",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68a8fe90_6f285127",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/GenerateJavaScriptAST.java",
        "patchSetId": 2
      },
      "lineNbr": 1438,
      "author": {
        "id": 5110
      },
      "writtenOn": "2015-02-20T02:43:01Z",
      "side": 1,
      "message": "Currently implementation requires a lot of duplication in rules. I think we can identify setter/getter based on method signature instead, method name should only be significant for choosing between has vs getter:\n\n \n if (parameter.length \u003d\u003d 0) {\n   if (startsWithCamelCase(\"has\")) {\n     result \u003d createHasDispatch(...)\n   } else {\n     result \u003d createGetterDispatch(...)\n   }\n } else if (parameter.length \u003d\u003d 1) {\n   result \u003d createSetterDispatch(...)\n } else {\n   throw new ICE....\n }\n\nThen the createXXXDispatch method can extract the property name by first trying to extract it from the \u0027name\u0027 attribute in JsProperty, if not available extract from the method name.\n\nWDYT?",
      "range": {
        "startLine": 1423,
        "startChar": 0,
        "endLine": 1438,
        "endChar": 11
      },
      "revId": "0802e3a612d9718e9c73be63f0e488412731b824",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68a8fe90_ef2441aa",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/GenerateJavaScriptAST.java",
        "patchSetId": 2
      },
      "lineNbr": 1600,
      "author": {
        "id": 5110
      },
      "writtenOn": "2015-02-20T02:43:01Z",
      "side": 1,
      "message": "nit: unnecessary wrap?",
      "range": {
        "startLine": 1600,
        "startChar": 9,
        "endLine": 1600,
        "endChar": 15
      },
      "revId": "0802e3a612d9718e9c73be63f0e488412731b824",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68a8fe90_4f870dae",
        "filename": "user/src/com/google/gwt/core/client/js/JsProperty.java",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 5110
      },
      "writtenOn": "2015-02-20T02:43:01Z",
      "side": 1,
      "message": "What about:\n\n\".. as method calls in JS, they will be replaced with dotted property lookups.\n\u003cp\u003e In case of JsType with JsProperties implemented by Java classes, the property access still trigger the execution of the matching getter or setter methods as they will be translated into custom property setter and getter in JavaScript.\"",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 29,
        "endChar": 49
      },
      "revId": "0802e3a612d9718e9c73be63f0e488412731b824",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}