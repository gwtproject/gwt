{
  "comments": [
    {
      "key": {
        "uuid": "0e1fbc56_d41bfc55",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 5031
      },
      "writtenOn": "2016-03-31T10:48:59Z",
      "side": 1,
      "message": "Wouldn\u0027t it be beneficial to write \"Fixes #9308\" so Github closes the issue automatically once the commit has been mirrored? Then one could search for closed issues that are still ReviewPending and remove that label in batches more comfortably.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 10
      },
      "revId": "128a23fa2cd60284ab564d9862ef7e160552bc29",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e25349f_56d6d4cd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-03-31T11:19:41Z",
      "side": 1,
      "message": "Well, the question is whether we lean towards GitHub\u0027s or Gerrit\u0027s style.\n\nThe \"Bug:\" footer has the advantage that it allows searching for reviews using the \"tr:\" operator (well, except that it doesn\u0027t work when the issue number is prefixed with a #, at least as currently configured on this Gerrit instance); this should surface only reviews fixing that bug (contrary to a grep on \"#9308\" which would also give commits with messages referencing the issue, without necessarily being about the issue; e.g. \"as discussed in comments of #9308\").\n\nI, for one, don\u0027t quite like the GitHub style because it\u0027s easy to have false positives (\"partially fixes #xxx\", or \"note that, while similar, it does not fix #xxx\") and false negatives. There\u0027s also the more general handling of issues: ReviewPending label is not removed, Milestone might have not been set, or would need to be updated, etc. Those things can be automated, but not by GitHub directly (needs a bot/webhook), so the GitHub \"formalism\" doesn\u0027t really help (the stricted Gerrit one is easier to handle).",
      "parentUuid": "0e1fbc56_d41bfc55",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 10
      },
      "revId": "128a23fa2cd60284ab564d9862ef7e160552bc29",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e1fbc56_340230a6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 5031
      },
      "writtenOn": "2016-03-31T11:55:38Z",
      "side": 1,
      "message": "I don\u0027t know who configures this Gerrit instance but the tr: search could be fixed by adding additional trackingid sections in Gerrit config so you could search for google code and Github bugs correctly when using \u003cgithub keyword\u003e #xxxx in the future.\n\nNext Leeroy could be updated to reduce the probability of accidentally closing a Github issue. Basically it would only allow \u003cgithub keyword\u003e #xxxx on its own line in the commit footer and would disallow it anywhere else. So if you want to use \u003cgithub keyword\u003e #xxxx in the rest of the commit message to reference something you would need to leave out the \"#\" or don\u0027t use a github keyword to not trigger Github.\n\nLastly we should definitely create a Github webhook/bot once the issue workflow has been set in stone because what can be automated should be automated. Especially as managing the issue tracker happens in our spare time less work in the long term is always better.\n\nTo me it sounds like all mentioned issues can be solved if we just want to (unless we can not easily update Gerrit config and deploy updated Leeroy)",
      "parentUuid": "4e25349f_56d6d4cd",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 10
      },
      "revId": "128a23fa2cd60284ab564d9862ef7e160552bc29",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}