{
  "comments": [
    {
      "key": {
        "uuid": "9f5d6134_c7fe9e3d",
        "filename": "user/test-super/com/google/gwt/dev/jjs/super/com/google/gwt/dev/jjs/test/Java8Test.java",
        "patchSetId": 5
      },
      "lineNbr": 107,
      "author": {
        "id": 5445
      },
      "writtenOn": "2014-11-21T10:08:38Z",
      "side": 1,
      "message": "[warning] \u0027{\u0027 should have line break after.",
      "revId": "15c9bce85d01bfe1dd89038b62daad6c793937f5",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f97cd02_be839961",
        "filename": "user/test-super/com/google/gwt/dev/jjs/super/com/google/gwt/dev/jjs/test/Java8Test.java",
        "patchSetId": 5
      },
      "lineNbr": 193,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-11-21T19:43:23Z",
      "side": 1,
      "message": "This is an earlier missing test scenario but can you demonstrate method reference works on String \u0027instance\u0027 methods (e.g. \"abcd\"::contains, \"abcd\"::equals)",
      "revId": "15c9bce85d01bfe1dd89038b62daad6c793937f5",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf0a2512_d238a411",
        "filename": "user/test-super/com/google/gwt/dev/jjs/super/com/google/gwt/dev/jjs/test/Java8Test.java",
        "patchSetId": 5
      },
      "lineNbr": 193,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-11-22T09:04:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7f97cd02_be839961",
      "revId": "15c9bce85d01bfe1dd89038b62daad6c793937f5",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f97cd02_1efe4d11",
        "filename": "user/test-super/com/google/gwt/dev/jjs/super/com/google/gwt/dev/jjs/test/Java8Test.java",
        "patchSetId": 5
      },
      "lineNbr": 349,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-11-21T19:43:23Z",
      "side": 1,
      "message": "Can you add two more tests:\n\nFirst one shows if the same method is inherited from both a concrete class and interface with default, the one from the concrete is used?\n\nSecond one shows if the same method is inherited from both a concrete class and two interfaces with defaults, the concrete one is used.",
      "revId": "15c9bce85d01bfe1dd89038b62daad6c793937f5",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf0a2512_b235301a",
        "filename": "user/test-super/com/google/gwt/dev/jjs/super/com/google/gwt/dev/jjs/test/Java8Test.java",
        "patchSetId": 5
      },
      "lineNbr": 349,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-11-22T09:04:14Z",
      "side": 1,
      "message": "The former is handeld by the existing DefaultInterfaceImplVirtualUpRef which inherits a concrete method from VirtualUpRef as well as a default method.\n\nI added the second, which I take to mean one default interface X subtyping another default interface Y overriding the same method and having C implement X,, because there\u0027s already test of C implementing X,Y. You\u0027re not allowed multiple inheritance of defenders that conflict without writing a concrete override anyway, and there\u0027s already a test for that.",
      "parentUuid": "7f97cd02_1efe4d11",
      "revId": "15c9bce85d01bfe1dd89038b62daad6c793937f5",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff6c9df2_ae804f87",
        "filename": "user/test-super/com/google/gwt/dev/jjs/super/com/google/gwt/dev/jjs/test/Java8Test.java",
        "patchSetId": 5
      },
      "lineNbr": 349,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-11-22T10:01:42Z",
      "side": 1,
      "message": "Actually you can in this scenario, that is why I wanted a test.\n\n  interface A1 {\n    default int methodA() { return 10; }\n  }\n\n  interface A2 {\n    default int methodA() { return 10; }\n  }\n\n  static class B {\n    public int methodA() { return 42; }\n  }\n  \n  // Test Scenario 1\n  static class C1 extends B implements A1 {}\n\n\n  // Test Scenario 2\n  static class C2 extends B implements A1, A2 {}",
      "parentUuid": "bf0a2512_b235301a",
      "revId": "15c9bce85d01bfe1dd89038b62daad6c793937f5",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf0a2512_cd1b698f",
        "filename": "user/test-super/com/google/gwt/dev/jjs/super/com/google/gwt/dev/jjs/test/Java8Test.java",
        "patchSetId": 5
      },
      "lineNbr": 349,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-11-22T10:36:19Z",
      "side": 1,
      "message": "Done. Although Scenario 2 is really just Scenario 1, because B provides the method implementation as far as JDT/UnifyAst are concerned.",
      "parentUuid": "ff6c9df2_ae804f87",
      "revId": "15c9bce85d01bfe1dd89038b62daad6c793937f5",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf0a2512_2d50a51e",
        "filename": "user/test-super/com/google/gwt/dev/jjs/super/com/google/gwt/dev/jjs/test/Java8Test.java",
        "patchSetId": 5
      },
      "lineNbr": 349,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-11-22T18:33:42Z",
      "side": 1,
      "message": "I might be wrong but in your tests I can\u0027t see a case where B doesn\u0027t implement A1. That\u0027s the point of this test.",
      "parentUuid": "bf0a2512_cd1b698f",
      "revId": "15c9bce85d01bfe1dd89038b62daad6c793937f5",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf0a2512_cd900957",
        "filename": "user/test-super/com/google/gwt/dev/jjs/super/com/google/gwt/dev/jjs/test/Java8Test.java",
        "patchSetId": 5
      },
      "lineNbr": 349,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-11-22T19:35:50Z",
      "side": 1,
      "message": "Testcase Scenario 1 is the testVirtualUpRef case.\n\nI added Case 2, but it covers the same pathway as Case 1. UnifyAst is just going to visit B, mark \u0027methodA\u0027 as implemented, and when it visits A1/A2 it won\u0027t do anything.\n\nThe underlying algorithm doesn\u0027t care about the Javaisms here, it only sees a graph C2 -\u003e {B,A1,A2}, it does a depth first search looking for nodes that don\u0027t have a concrete version earlier in the graph.",
      "parentUuid": "bf0a2512_2d50a51e",
      "revId": "15c9bce85d01bfe1dd89038b62daad6c793937f5",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f97cd02_fe836192",
        "filename": "user/test-super/com/google/gwt/dev/jjs/super/com/google/gwt/dev/jjs/test/Java8Test.java",
        "patchSetId": 5
      },
      "lineNbr": 368,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-11-21T19:43:23Z",
      "side": 1,
      "message": "Can you also test method references to default methods? Also demonstrate it works as expected in the different situations like dual impl with two interfaces or interface/concrete mix.",
      "revId": "15c9bce85d01bfe1dd89038b62daad6c793937f5",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}