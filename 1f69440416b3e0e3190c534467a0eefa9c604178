{
  "comments": [
    {
      "key": {
        "uuid": "Sk4QKVJg",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 5000
      },
      "writtenOn": "2013-03-28T22:38:56Z",
      "side": 1,
      "message": "Can you elaborate on what this issue is?  E.g., what\u0027s an example generated class and its type hierarchy that causes the error?\n\nAlso, is this something we could split into a separate commit, or does it need to happen simultaneously with the JDT bump?",
      "revId": "1f69440416b3e0e3190c534467a0eefa9c604178",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "SlwDEFDY",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 5030
      },
      "writtenOn": "2013-03-28T22:57:10Z",
      "side": 1,
      "message": "\u003e Can you elaborate on what this issue is? E.g., what\u0027s an example generated class and its type hierarchy that causes the error?\n\nThe RequestFactoryGenerator can generate a class that\n\n  extends AbstractRequest\u003cFooProxy\u003e implements InstanceRequest\u003cBarProxy, FooProxy\u003e\n\nbut AbstractRequest\u003cX\u003e already `implements InstanceRequest\u003cBaseProxy, X\u003e` ; the type arguments of InstanceRequest are conflicting.\n\nThe change here is to add a type argument to AbstractRequest:\n\n   AbstractRequest\u003cP extends BaseProxy, X\u003e … implements InstanceRequest\u003cP, X\u003e\n\n\u003e Also, is this something we could split into a separate commit, or does it need to happen simultaneously with the JDT bump?\n\nIt can be split in its own change (and should, IMO)",
      "parentUuid": "Sk4QKVJg",
      "revId": "1f69440416b3e0e3190c534467a0eefa9c604178",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "Sk4TYFBg",
        "filename": "dev/build.xml",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 5000
      },
      "writtenOn": "2013-03-28T22:38:56Z",
      "side": 1,
      "message": "I don\u0027t think these \"extracted from\" comments add any value, so I\u0027d just omit it.  It would be more useful to mention them in the tools/eclipse/README file.",
      "revId": "1f69440416b3e0e3190c534467a0eefa9c604178",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "Sl.DI6E0",
        "filename": "dev/build.xml",
        "patchSetId": 1
      },
      "lineNbr": 110,
      "author": {
        "id": 5030
      },
      "writtenOn": "2013-03-28T22:57:10Z",
      "side": 1,
      "message": "Is this needed if the org.eclipse.jdt.core that jdtCompilerAdapter is extracted from is already in there? (the line above)",
      "revId": "1f69440416b3e0e3190c534467a0eefa9c604178",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "SkwTvhLI",
        "filename": "dev/core/src/com/google/gwt/dev/javac/JavaSourceParser.java",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 5000
      },
      "writtenOn": "2013-03-28T22:38:56Z",
      "side": 1,
      "message": "What\u0027s the purpose of this change?  Doesn\u0027t BinaryName.getClassName() already skip over all dots anyway, so the only separator characters left will be $?",
      "revId": "1f69440416b3e0e3190c534467a0eefa9c604178",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "Sk8T4XHc",
        "filename": "dev/core/src/com/google/gwt/dev/javac/JavaSourceParser.java",
        "patchSetId": 1
      },
      "lineNbr": 196,
      "author": {
        "id": 5000
      },
      "writtenOn": "2013-03-28T22:38:56Z",
      "side": 1,
      "message": "I\u0027d break this into two assignments.",
      "revId": "1f69440416b3e0e3190c534467a0eefa9c604178",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "Sk8S9-KU",
        "filename": "dev/core/src/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 5105
      },
      "writtenOn": "2013-03-28T22:28:47Z",
      "side": 1,
      "message": "Is it worth to have a version of this file only to change the HashMap class used?",
      "revId": "1f69440416b3e0e3190c534467a0eefa9c604178",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "Sl0C7PLY",
        "filename": "dev/core/src/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 5030
      },
      "writtenOn": "2013-03-28T22:38:10Z",
      "side": 1,
      "message": "AFAICT, it used to be; c.g.g.dev.util.collect.HashMap being more memory-efficient thatn java.util.HashMap. But maybe this is no longer the case with newer JDKs…\n\nI suppose you can track memory utilization of the various Google builds and check whether it makes a significant difference?\n\n(it would be great if we could get rid of \"customizations\" on our dependencies)",
      "parentUuid": "Sk8S9-KU",
      "revId": "1f69440416b3e0e3190c534467a0eefa9c604178",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "Sk2QHcJA",
        "filename": "dev/core/src/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 5000
      },
      "writtenOn": "2013-03-28T22:38:56Z",
      "side": 1,
      "message": "In my opinion, no. :)",
      "parentUuid": "Sk8S9-KU",
      "revId": "1f69440416b3e0e3190c534467a0eefa9c604178",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "SkyQBaHk",
        "filename": "dev/core/src/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 5000
      },
      "writtenOn": "2013-03-28T22:41:17Z",
      "side": 1,
      "message": "I agree with Thomas.  We should benchmark if it doesn\u0027t make a measurable difference, we should get rid of the customization if that\u0027s the only reason for us to have this file.\n\nI expect by now more time has been spent optimizing the JDK\u0027s HashMap than has been spent on com.google.gwt.dev.util.collect.HashMap. :)",
      "parentUuid": "Sk2QHcJA",
      "revId": "1f69440416b3e0e3190c534467a0eefa9c604178",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}