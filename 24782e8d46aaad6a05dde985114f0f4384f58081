{
  "comments": [
    {
      "key": {
        "uuid": "M1NwHxM4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T04:10:35Z",
      "side": 1,
      "message": "Perhaps add some justification here. Any performance numbers we can share?",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M7sixvwA",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 5025
      },
      "writtenOn": "2012-12-13T04:52:05Z",
      "side": 1,
      "message": "Yes, I\u0027d be curious about perf number. :-) This looks like a lot of annoyance, so hopefully it would be worth it.\n\nFWIW, per my email to gwt-contrib, on the scala-gwt project Lex Spoon used protobufs to serialize a Java-ish/jribble AST to disk (written by the Scala compiler plugin, read in by the GWT compiler) and it was very fast.\n\nAs in \"just delete all of the UnitCache/etc. code and load them from disk all the time\" fast.\n\nI\u0027m not saying it\u0027s a panacea, and perhaps it wouldn\u0027t work for everything, but if we\u0027re trying out options for speeding up serialization, perhaps kicking around the jribble/protobuf approach would be something we could talk about.\n\nIf anything, if GWT started using on-disk .jribble files to replace/be faster than the UnitCache, scala-gwt would get GWT integration for free.",
      "parentUuid": "M1NwHxM4",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1O0r6Ow",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T20:26:48Z",
      "side": 1,
      "message": "In general, Externalizable seems to be dramatically faster than Serializable, by avoiding reflection:\nhttp://code.google.com/p/thrift-protobuf-compare/wiki/Benchmarking\n\nThe main advantage of doing it this way is that it\u0027s an incremental and backward-compatible way to improve performance.",
      "parentUuid": "M7sixvwA",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1BwJTOs",
        "filename": "dev/core/src/com/google/gwt/core/ext/CachedPropertyInformation.java",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T04:10:35Z",
      "side": 1,
      "message": "add javadoc",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1FwT1Bo",
        "filename": "dev/core/src/com/google/gwt/core/ext/linker/Artifact.java",
        "patchSetId": 1
      },
      "lineNbr": 127,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T04:10:35Z",
      "side": 1,
      "message": "This class is abstract, so can it be protected?",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1PwNYPY",
        "filename": "dev/core/src/com/google/gwt/core/ext/linker/BinaryEmittedArtifact.java",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T04:10:35Z",
      "side": 1,
      "message": "This class is abstract, so can it be protected?",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}