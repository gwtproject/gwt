{
  "comments": [
    {
      "key": {
        "uuid": "M1NwHxM4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T04:10:35Z",
      "side": 1,
      "message": "Perhaps add some justification here. Any performance numbers we can share?",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M7sixvwA",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 5025
      },
      "writtenOn": "2012-12-13T04:52:05Z",
      "side": 1,
      "message": "Yes, I\u0027d be curious about perf number. :-) This looks like a lot of annoyance, so hopefully it would be worth it.\n\nFWIW, per my email to gwt-contrib, on the scala-gwt project Lex Spoon used protobufs to serialize a Java-ish/jribble AST to disk (written by the Scala compiler plugin, read in by the GWT compiler) and it was very fast.\n\nAs in \"just delete all of the UnitCache/etc. code and load them from disk all the time\" fast.\n\nI\u0027m not saying it\u0027s a panacea, and perhaps it wouldn\u0027t work for everything, but if we\u0027re trying out options for speeding up serialization, perhaps kicking around the jribble/protobuf approach would be something we could talk about.\n\nIf anything, if GWT started using on-disk .jribble files to replace/be faster than the UnitCache, scala-gwt would get GWT integration for free.",
      "parentUuid": "M1NwHxM4",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1O0r6Ow",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T20:26:48Z",
      "side": 1,
      "message": "In general, Externalizable seems to be dramatically faster than Serializable, by avoiding reflection:\nhttp://code.google.com/p/thrift-protobuf-compare/wiki/Benchmarking\n\nThe main advantage of doing it this way is that it\u0027s an incremental and backward-compatible way to improve performance.",
      "parentUuid": "M7sixvwA",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M10-AMd4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 5105
      },
      "writtenOn": "2012-12-13T20:56:52Z",
      "side": 1,
      "message": "In my preliminary tests it reduces serialization/deserialization of CompiledUnits to 1/3 of the original time. We probably need to do a redesign of the whole AST and I am curious if we could reuse jribble AST and simplify the whole handling and caching.",
      "parentUuid": "M7sixvwA",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1BwJTOs",
        "filename": "dev/core/src/com/google/gwt/core/ext/CachedPropertyInformation.java",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T04:10:35Z",
      "side": 1,
      "message": "add javadoc",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M16.x1ZQ",
        "filename": "dev/core/src/com/google/gwt/core/ext/CachedPropertyInformation.java",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 5105
      },
      "writtenOn": "2012-12-13T20:56:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "M1BwJTOs",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1FwT1Bo",
        "filename": "dev/core/src/com/google/gwt/core/ext/linker/Artifact.java",
        "patchSetId": 1
      },
      "lineNbr": 127,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T04:10:35Z",
      "side": 1,
      "message": "This class is abstract, so can it be protected?",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M16.AtZk",
        "filename": "dev/core/src/com/google/gwt/core/ext/linker/Artifact.java",
        "patchSetId": 1
      },
      "lineNbr": 127,
      "author": {
        "id": 5105
      },
      "writtenOn": "2012-12-13T20:56:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "M1FwT1Bo",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1PwNYPY",
        "filename": "dev/core/src/com/google/gwt/core/ext/linker/BinaryEmittedArtifact.java",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T04:10:35Z",
      "side": 1,
      "message": "This class is abstract, so can it be protected?",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1xXL3Rw",
        "filename": "dev/core/src/com/google/gwt/core/ext/linker/BinaryEmittedArtifact.java",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 5105
      },
      "writtenOn": "2012-12-13T20:56:52Z",
      "side": 1,
      "message": "Will do.",
      "parentUuid": "M1PwNYPY",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1E0IPI0",
        "filename": "dev/core/src/com/google/gwt/core/linker/SingleScriptLinker.java",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "I\u0027m not sure this is worth doing for the Linker class hierarchy, since we\u0027re unlikely to serialize many instances. Externalizable has a cost (more code maintenance) and perhaps we should just use it in classes where the instance count is likely to grow at O(n) compared to overall code size.",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1G0f.MQ",
        "filename": "dev/core/src/com/google/gwt/dev/javac/CachedCompilationUnit.java",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "javadoc",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1K0Z4N8",
        "filename": "dev/core/src/com/google/gwt/dev/javac/CompilationUnitImpl.java",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "javadoc",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1K1wwP0",
        "filename": "dev/core/src/com/google/gwt/dev/javac/SourceFileCompilationUnit.java",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "javadoc",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1I1QZF0",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/Correlation.java",
        "patchSetId": 1
      },
      "lineNbr": 217,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "javadoc",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1E3V3LQ",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/PermutationResult.java",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "revert javadoc",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1O2dqBg",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/ast/JConstructor.java",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "Why is this commented out. Delete?",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1A3A9Nw",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/ast/JField.java",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "Can we use an import statement? I\u0027m not seeing a conflict.",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1G2xuJI",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/ast/JLiteral.java",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "protected?",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1K2roB8",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/ast/JMethod.java",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "import Util?",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1A1vVPQ",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/ast/JMethod.java",
        "patchSetId": 1
      },
      "lineNbr": 498,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "delete?",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1A1WNCw",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/ast/JNode.java",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "change Serializable to Externalizable?",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1M2NTNI",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/ast/JNode.java",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "Why is this commented out?",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1O1ayE8",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/ast/JReboundEntryPoint.java",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "add newline",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1C1V8Bw",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/ast/JSeedIdOf.java",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "add newline",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1I1qJNY",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/ast/JSwitchStatement.java",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "newline",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1G1n.A0",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/ast/JThrowStatement.java",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "newline",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1M1kLAo",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/ast/JTryStatement.java",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "newline",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1K1h4Pg",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/ast/JType.java",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "import Util?",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1C1M0I4",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/ast/JUnaryOperation.java",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "extra newline",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1G0u2Ks",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/ast/JVariable.java",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "protected?",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1M07jOo",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/ast/JVariable.java",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "extra newlines",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1K04wO4",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/ast/JWhileStatement.java",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "newline",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1A0kdMQ",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/ast/js/JsonArray.java",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "extra newline",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1I0YZI4",
        "filename": "dev/core/src/com/google/gwt/dev/util/DiskCache.java",
        "patchSetId": 1
      },
      "lineNbr": 219,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "readExternal and writeExternal are allowed to throw IOException. So instead of wrapping them in a RuntimeException, can we declare these two methods to throw IOException and let it bubble up?",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1ChMvo4",
        "filename": "dev/core/src/com/google/gwt/dev/util/Util.java",
        "patchSetId": 1
      },
      "lineNbr": 322,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "Organization: it seems like we should put object serialization utilities in their own class, since there are many of them. How about:\n\n  Streams.serializeArray(...)\n  Streams.deserializeArray(...)\n\n  Streams.serializeArray(...)\n  Streams.deserializeArray(...)\n\n.. and so on.",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1KhtTo0",
        "filename": "dev/core/src/com/google/gwt/dev/util/Util.java",
        "patchSetId": 1
      },
      "lineNbr": 332,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "if negative, throw IOException (indicates data corruption).",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1GgrZoM",
        "filename": "dev/core/src/com/google/gwt/dev/util/Util.java",
        "patchSetId": 1
      },
      "lineNbr": 336,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "in.read() returns -1 for an end of file. We need to detect this and throw java.io.EOFException.",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1Ig18tk",
        "filename": "dev/core/src/com/google/gwt/dev/util/Util.java",
        "patchSetId": 1
      },
      "lineNbr": 361,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "This isn\u0027t type-safe; to guarantee a List\u003cT\u003e, we have to check at runtime that all the items are the correct type. The caller should pass in a Class\u003cT\u003e so we can use its cast() method. Similarly below.",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1OhFlkU",
        "filename": "dev/core/src/com/google/gwt/dev/util/Util.java",
        "patchSetId": 1
      },
      "lineNbr": 363,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "delete",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1Oib1tI",
        "filename": "dev/core/src/com/google/gwt/dev/util/Util.java",
        "patchSetId": 1
      },
      "lineNbr": 407,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "It seems cleaner to have a separate method for reading a TreeSet versus a HashSet (or whatever sets you want to support; there shouldn\u0027t be many). Then we can create a set of the right size based on sz.",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1Gioht4",
        "filename": "dev/core/src/com/google/gwt/dev/util/Util.java",
        "patchSetId": 1
      },
      "lineNbr": 412,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "use elementClass.cast()",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1Mi1Ojc",
        "filename": "dev/core/src/com/google/gwt/dev/util/Util.java",
        "patchSetId": 1
      },
      "lineNbr": 415,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "debugging code; delete",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1EijClU",
        "filename": "dev/core/src/com/google/gwt/dev/util/Util.java",
        "patchSetId": 1
      },
      "lineNbr": 421,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "Clarify that this deserializes a string or null.",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1OjpFg8",
        "filename": "dev/core/src/com/google/gwt/dev/util/Util.java",
        "patchSetId": 1
      },
      "lineNbr": 423,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "Better to read a boolean followed by readUTF() if non-null.",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1AhioqI",
        "filename": "dev/core/src/com/google/gwt/dev/util/Util.java",
        "patchSetId": 1
      },
      "lineNbr": 447,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "Lists.add() is not a good idea in a loop. It will create a garbage list for every element.\n\nBest to use an if statement after sz is read and allocate exactly the size needed:\n\nif (sz \u003d\u003d 0) {\n  return Collections.emptyList();\n} \nList\u003cString\u003e list \u003d new ArrayList(sz);\n...",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1AjA4tw",
        "filename": "dev/core/src/com/google/gwt/dev/util/Util.java",
        "patchSetId": 1
      },
      "lineNbr": 455,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "Seems better to have a method for each Map subclass and allocate the correct size.",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1Ei66nQ",
        "filename": "dev/core/src/com/google/gwt/dev/util/Util.java",
        "patchSetId": 1
      },
      "lineNbr": 468,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "use elementClass.cast()",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1MgSWmo",
        "filename": "dev/core/src/com/google/gwt/dev/util/Util.java",
        "patchSetId": 1
      },
      "lineNbr": 483,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "allocate correct size instead of Sets.add()",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1Ii00oQ",
        "filename": "dev/core/src/com/google/gwt/dev/util/Util.java",
        "patchSetId": 1
      },
      "lineNbr": 796,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "If you want to leave this in, perhaps hide this behind a DEBUG constant so it does nothing if not enabled.\n\nAnd maybe move to its own class too.\n\n Perf.stat(..)\n Perf.log(...)",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1FIamHo",
        "filename": "dev/core/src/com/google/gwt/dev/util/Util.java",
        "patchSetId": 1
      },
      "lineNbr": 1138,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "I\u0027m not sure where deserializeArray is?",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1JJLYFk",
        "filename": "dev/core/src/com/google/gwt/dev/util/Util.java",
        "patchSetId": 1
      },
      "lineNbr": 1156,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "It looks like you\u0027re not handing nulls when deserializing, Maybe we need unit tests to make sure they work?",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "M1DJtTMI",
        "filename": "dev/core/src/com/google/gwt/dev/util/Util.java",
        "patchSetId": 1
      },
      "lineNbr": 1470,
      "author": {
        "id": 5010
      },
      "writtenOn": "2012-12-13T23:03:23Z",
      "side": 1,
      "message": "Utility.close() seems like a bad method to use on an output stream, because we could return success even though the write failed. It should be deleted. For now, we should just call stream.close() inside the catch for the IOException, and then the flush() is unnecessary.",
      "revId": "24782e8d46aaad6a05dde985114f0f4384f58081",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}