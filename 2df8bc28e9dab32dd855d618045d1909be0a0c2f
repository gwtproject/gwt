{
  "comments": [
    {
      "key": {
        "uuid": "54aa2254_ae411b3e",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/ast/JReferenceType.java",
        "patchSetId": 4
      },
      "lineNbr": 362,
      "author": {
        "id": 5110
      },
      "writtenOn": "2016-01-23T01:13:15Z",
      "side": 1,
      "message": "nit: comment basically says exactly what the line below is; you can remove the comment if you don\u0027t have anything new to say :)",
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_0ee94f36",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/ast/JReferenceType.java",
        "patchSetId": 4
      },
      "lineNbr": 362,
      "author": {
        "id": 5105
      },
      "writtenOn": "2016-01-23T01:55:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "54aa2254_ae411b3e",
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_ee1e334e",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/GwtAstBuilder.java",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5110
      },
      "writtenOn": "2016-01-23T01:13:15Z",
      "side": 1,
      "message": "I don\u0027t understand how the changes in this file relates to the patch?",
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_0ec06fa4",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/GwtAstBuilder.java",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5105
      },
      "writtenOn": "2016-01-23T01:55:55Z",
      "side": 1,
      "message": "Part of this change involved not having getClass() in native JsType. There is an assumption that getClass() is always in slot 2 and in the case of enums values and value_of are slots 3 and 4.\n\nIf you have a native JsType enum (which will be rejected by the restriction checker), it will be missing the getClass() and fails because values and value_of are in the incorrect slots during construction. \n\n(it is possible to leave the getClass for enums even if native because in the end they are rejected, but it is kind of hacky and if we decide to have native enums will need this fix anyway).",
      "parentUuid": "54aa2254_ee1e334e",
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_cefc9725",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/GwtAstBuilder.java",
        "patchSetId": 4
      },
      "lineNbr": 2908,
      "author": {
        "id": 5110
      },
      "writtenOn": "2016-01-23T01:13:15Z",
      "side": 1,
      "message": "Why did we change the design here? Are these changes really needed?",
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_2ec52bb5",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/GwtAstBuilder.java",
        "patchSetId": 4
      },
      "lineNbr": 2908,
      "author": {
        "id": 5105
      },
      "writtenOn": "2016-01-23T01:55:55Z",
      "side": 1,
      "message": "Yes native JsTypes do not have a getClass implementation, they will default to object and that will be devirtualized. This is an important part of the patch.",
      "parentUuid": "54aa2254_cefc9725",
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_8e38dfa5",
        "filename": "user/test/com/google/gwt/core/interop/NativeJsTypeTest.java",
        "patchSetId": 4
      },
      "lineNbr": 71,
      "author": {
        "id": 5110
      },
      "writtenOn": "2016-01-23T01:13:15Z",
      "side": 1,
      "message": "move down testGetClass test method?",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 71,
        "endChar": 69
      },
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_ee0ab3ab",
        "filename": "user/test/com/google/gwt/core/interop/NativeJsTypeTest.java",
        "patchSetId": 4
      },
      "lineNbr": 71,
      "author": {
        "id": 5105
      },
      "writtenOn": "2016-01-23T01:55:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "54aa2254_8e38dfa5",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 71,
        "endChar": 69
      },
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_4e3bc7a7",
        "filename": "user/test/com/google/gwt/core/interop/NativeJsTypeTest.java",
        "patchSetId": 4
      },
      "lineNbr": 82,
      "author": {
        "id": 5110
      },
      "writtenOn": "2016-01-23T01:13:15Z",
      "side": 1,
      "message": "testGetClass?",
      "range": {
        "startLine": 82,
        "startChar": 18,
        "endLine": 82,
        "endChar": 27
      },
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_eeb63341",
        "filename": "user/test/com/google/gwt/core/interop/NativeJsTypeTest.java",
        "patchSetId": 4
      },
      "lineNbr": 82,
      "author": {
        "id": 5105
      },
      "writtenOn": "2016-01-23T01:55:55Z",
      "side": 1,
      "message": "I had it that way initially if you prefer I\u0027ll merge them again. done.",
      "parentUuid": "54aa2254_4e3bc7a7",
      "range": {
        "startLine": 82,
        "startChar": 18,
        "endLine": 82,
        "endChar": 27
      },
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_79176f96",
        "filename": "user/test/com/google/gwt/core/interop/NativeJsTypeTest.java",
        "patchSetId": 4
      },
      "lineNbr": 82,
      "author": {
        "id": 5110
      },
      "writtenOn": "2016-01-23T02:25:51Z",
      "side": 1,
      "message": "I am not recommending merging. I\u0027m recommending a new method. See my new comment.",
      "parentUuid": "54aa2254_eeb63341",
      "range": {
        "startLine": 82,
        "startChar": 18,
        "endLine": 82,
        "endChar": 27
      },
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_995a6b78",
        "filename": "user/test/com/google/gwt/core/interop/NativeJsTypeTest.java",
        "patchSetId": 4
      },
      "lineNbr": 82,
      "author": {
        "id": 5105
      },
      "writtenOn": "2016-01-23T02:49:45Z",
      "side": 1,
      "message": "Sorry. I misread testGetClass /testClassLiterals :)",
      "parentUuid": "54aa2254_79176f96",
      "range": {
        "startLine": 82,
        "startChar": 18,
        "endLine": 82,
        "endChar": 27
      },
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_ce2ed765",
        "filename": "user/test/com/google/gwt/core/interop/NativeJsTypeTest.java",
        "patchSetId": 4
      },
      "lineNbr": 86,
      "author": {
        "id": 5110
      },
      "writtenOn": "2016-01-23T01:13:15Z",
      "side": 1,
      "message": "// Assert that nativeObject1 is not marked as EXACT so don\u0027t mess getClass dispatch. \n\nAnd please update other comments similarly.",
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_8ee21f1d",
        "filename": "user/test/com/google/gwt/core/interop/NativeJsTypeTest.java",
        "patchSetId": 4
      },
      "lineNbr": 86,
      "author": {
        "id": 5105
      },
      "writtenOn": "2016-01-23T01:55:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "54aa2254_ce2ed765",
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_ce233783",
        "filename": "user/test/com/google/gwt/core/interop/NativeJsTypeTest.java",
        "patchSetId": 4
      },
      "lineNbr": 107,
      "author": {
        "id": 5110
      },
      "writtenOn": "2016-01-23T01:13:15Z",
      "side": 1,
      "message": "be *incorrectly* marked?",
      "range": {
        "startLine": 107,
        "startChar": 33,
        "endLine": 107,
        "endChar": 34
      },
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_2eabebaf",
        "filename": "user/test/com/google/gwt/core/interop/NativeJsTypeTest.java",
        "patchSetId": 4
      },
      "lineNbr": 107,
      "author": {
        "id": 5105
      },
      "writtenOn": "2016-01-23T01:55:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "54aa2254_ce233783",
      "range": {
        "startLine": 107,
        "startChar": 33,
        "endLine": 107,
        "endChar": 34
      },
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_eef95332",
        "filename": "user/test/com/google/gwt/core/interop/NativeJsTypeTest.java",
        "patchSetId": 4
      },
      "lineNbr": 113,
      "author": {
        "id": 5110
      },
      "writtenOn": "2016-01-23T01:13:15Z",
      "side": 1,
      "message": "So if I understand the comment correctly, you don\u0027t use assertSame to ensure optimzation kicks in. I would get rid of the method \"same\" and make the comment more explicit (assertSame is not used because we want test \u003cblah\u003e).",
      "range": {
        "startLine": 113,
        "startChar": 4,
        "endLine": 113,
        "endChar": 14
      },
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_ce8a5745",
        "filename": "user/test/com/google/gwt/core/interop/NativeJsTypeTest.java",
        "patchSetId": 4
      },
      "lineNbr": 113,
      "author": {
        "id": 5105
      },
      "writtenOn": "2016-01-23T01:55:55Z",
      "side": 1,
      "message": "The reason to have function is to avoid writing casts (the javac compiler is too smart and rejects directly the comparison",
      "parentUuid": "54aa2254_eef95332",
      "range": {
        "startLine": 113,
        "startChar": 4,
        "endLine": 113,
        "endChar": 14
      },
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_5912b3a7",
        "filename": "user/test/com/google/gwt/core/interop/NativeJsTypeTest.java",
        "patchSetId": 4
      },
      "lineNbr": 113,
      "author": {
        "id": 5110
      },
      "writtenOn": "2016-01-23T02:25:51Z",
      "side": 1,
      "message": "But you could still have used assertSame, but can\u0027t because that wouldn\u0027t result in static evaluation. I also wanted to make it more explicit but not a big deal.",
      "parentUuid": "54aa2254_ce8a5745",
      "range": {
        "startLine": 113,
        "startChar": 4,
        "endLine": 113,
        "endChar": 14
      },
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_5924f3ef",
        "filename": "user/test/com/google/gwt/core/interop/NativeJsTypeTest.java",
        "patchSetId": 4
      },
      "lineNbr": 113,
      "author": {
        "id": 5105
      },
      "writtenOn": "2016-01-23T02:49:45Z",
      "side": 1,
      "message": "ok.",
      "parentUuid": "54aa2254_5912b3a7",
      "range": {
        "startLine": 113,
        "startChar": 4,
        "endLine": 113,
        "endChar": 14
      },
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_6e67a3cc",
        "filename": "user/test/com/google/gwt/dev/jjs/optimized/JsOverlayMethodOptimizationTest.java",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 5110
      },
      "writtenOn": "2016-01-23T01:13:15Z",
      "side": 1,
      "message": "// NativeType.contains should get inlined by Java passes so the code below should be statically evaluated to return \"this.",
      "range": {
        "startLine": 42,
        "startChar": 12,
        "endLine": 42,
        "endChar": 36
      },
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_f94d9fc4",
        "filename": "user/test/com/google/gwt/dev/jjs/optimized/JsOverlayMethodOptimizationTest.java",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 5105
      },
      "writtenOn": "2016-01-23T02:49:45Z",
      "side": 1,
      "message": "I applied your comment.",
      "parentUuid": "54aa2254_6e67a3cc",
      "range": {
        "startLine": 42,
        "startChar": 12,
        "endLine": 42,
        "endChar": 36
      },
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_ae4cbb4e",
        "filename": "user/test/com/google/gwt/dev/jjs/optimized/JsOverlayMethodOptimizationTest.java",
        "patchSetId": 4
      },
      "lineNbr": 54,
      "author": {
        "id": 5110
      },
      "writtenOn": "2016-01-23T01:13:15Z",
      "side": 1,
      "message": "This could be optimized just because the return values unused and the methods are side effect free. So I don\u0027t think it tests inlining as class javadoc says (or may stop testing what it suppose to in the future). I think it is better if impossible case of alwaysThis has some side effect.",
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_2e30cb8d",
        "filename": "user/test/com/google/gwt/dev/jjs/optimized/JsOverlayMethodOptimizationTest.java",
        "patchSetId": 4
      },
      "lineNbr": 54,
      "author": {
        "id": 5105
      },
      "writtenOn": "2016-01-23T01:55:55Z",
      "side": 1,
      "message": "Methods are not analyzed for side effects, in limited cases we mark methods as side effect free (annotation, empty methods, etc). So in this case it does test inlining, and that it happens during the Java phase. In particular if you look for the implementation of String.contains you will see that it eventually calls some JSNI method (I am sure there is not even modeling of side effect freeness for JS code).",
      "parentUuid": "54aa2254_ae4cbb4e",
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_190c3b8a",
        "filename": "user/test/com/google/gwt/dev/jjs/optimized/JsOverlayMethodOptimizationTest.java",
        "patchSetId": 4
      },
      "lineNbr": 54,
      "author": {
        "id": 5110
      },
      "writtenOn": "2016-01-23T02:25:51Z",
      "side": 1,
      "message": "But it will immediately stop testing inlining if we add simple sideEffect analysis, won\u0027t it?",
      "parentUuid": "54aa2254_2e30cb8d",
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_d950e35b",
        "filename": "user/test/com/google/gwt/dev/jjs/optimized/JsOverlayMethodOptimizationTest.java",
        "patchSetId": 4
      },
      "lineNbr": 54,
      "author": {
        "id": 5105
      },
      "writtenOn": "2016-01-23T02:49:45Z",
      "side": 1,
      "message": "Maybe. String.contains won\u0027t be marked sideeffect free with a simple side effect analysis (it calls a JSNI method). But potentially if the compiler is made better yes. Then it is better to use an effectfull method and assert something about the content, like I had before. Yes that seems more reasonable I\u0027ll revert.",
      "parentUuid": "54aa2254_190c3b8a",
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_b989670f",
        "filename": "user/test/com/google/gwt/dev/jjs/optimized/JsOverlayMethodOptimizationTest.java",
        "patchSetId": 4
      },
      "lineNbr": 54,
      "author": {
        "id": 5110
      },
      "writtenOn": "2016-01-23T03:08:36Z",
      "side": 1,
      "message": "instead of null, we can call a method that throws an exception and keep everything else same right?",
      "parentUuid": "54aa2254_d950e35b",
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4a43ebb_103d240b",
        "filename": "user/test/com/google/gwt/dev/jjs/optimized/JsOverlayMethodOptimizationTest.java",
        "patchSetId": 4
      },
      "lineNbr": 54,
      "author": {
        "id": 5105
      },
      "writtenOn": "2016-01-25T20:33:40Z",
      "side": 1,
      "message": "See if you like the current state better.",
      "parentUuid": "54aa2254_b989670f",
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}