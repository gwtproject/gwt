{
  "comments": [
    {
      "key": {
        "uuid": "54aa2254_ae411b3e",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/ast/JReferenceType.java",
        "patchSetId": 4
      },
      "lineNbr": 362,
      "author": {
        "id": 5110
      },
      "writtenOn": "2016-01-23T01:13:15Z",
      "side": 1,
      "message": "nit: comment basically says exactly what the line below is; you can remove the comment if you don\u0027t have anything new to say :)",
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_ee1e334e",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/GwtAstBuilder.java",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5110
      },
      "writtenOn": "2016-01-23T01:13:15Z",
      "side": 1,
      "message": "I don\u0027t understand how the changes in this file relates to the patch?",
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_cefc9725",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/GwtAstBuilder.java",
        "patchSetId": 4
      },
      "lineNbr": 2908,
      "author": {
        "id": 5110
      },
      "writtenOn": "2016-01-23T01:13:15Z",
      "side": 1,
      "message": "Why did we change the design here? Are these changes really needed?",
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_8e38dfa5",
        "filename": "user/test/com/google/gwt/core/interop/NativeJsTypeTest.java",
        "patchSetId": 4
      },
      "lineNbr": 71,
      "author": {
        "id": 5110
      },
      "writtenOn": "2016-01-23T01:13:15Z",
      "side": 1,
      "message": "move down testGetClass test method?",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 71,
        "endChar": 69
      },
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_4e3bc7a7",
        "filename": "user/test/com/google/gwt/core/interop/NativeJsTypeTest.java",
        "patchSetId": 4
      },
      "lineNbr": 82,
      "author": {
        "id": 5110
      },
      "writtenOn": "2016-01-23T01:13:15Z",
      "side": 1,
      "message": "testGetClass?",
      "range": {
        "startLine": 82,
        "startChar": 18,
        "endLine": 82,
        "endChar": 27
      },
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_ce2ed765",
        "filename": "user/test/com/google/gwt/core/interop/NativeJsTypeTest.java",
        "patchSetId": 4
      },
      "lineNbr": 86,
      "author": {
        "id": 5110
      },
      "writtenOn": "2016-01-23T01:13:15Z",
      "side": 1,
      "message": "// Assert that nativeObject1 is not marked as EXACT so don\u0027t mess getClass dispatch. \n\nAnd please update other comments similarly.",
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_ce233783",
        "filename": "user/test/com/google/gwt/core/interop/NativeJsTypeTest.java",
        "patchSetId": 4
      },
      "lineNbr": 107,
      "author": {
        "id": 5110
      },
      "writtenOn": "2016-01-23T01:13:15Z",
      "side": 1,
      "message": "be *incorrectly* marked?",
      "range": {
        "startLine": 107,
        "startChar": 33,
        "endLine": 107,
        "endChar": 34
      },
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_eef95332",
        "filename": "user/test/com/google/gwt/core/interop/NativeJsTypeTest.java",
        "patchSetId": 4
      },
      "lineNbr": 113,
      "author": {
        "id": 5110
      },
      "writtenOn": "2016-01-23T01:13:15Z",
      "side": 1,
      "message": "So if I understand the comment correctly, you don\u0027t use assertSame to ensure optimzation kicks in. I would get rid of the method \"same\" and make the comment more explicit (assertSame is not used because we want test \u003cblah\u003e).",
      "range": {
        "startLine": 113,
        "startChar": 4,
        "endLine": 113,
        "endChar": 14
      },
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_6e67a3cc",
        "filename": "user/test/com/google/gwt/dev/jjs/optimized/JsOverlayMethodOptimizationTest.java",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 5110
      },
      "writtenOn": "2016-01-23T01:13:15Z",
      "side": 1,
      "message": "// NativeType.contains should get inlined by Java passes so the code below should be statically evaluated to return \"this.",
      "range": {
        "startLine": 42,
        "startChar": 12,
        "endLine": 42,
        "endChar": 36
      },
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aa2254_ae4cbb4e",
        "filename": "user/test/com/google/gwt/dev/jjs/optimized/JsOverlayMethodOptimizationTest.java",
        "patchSetId": 4
      },
      "lineNbr": 54,
      "author": {
        "id": 5110
      },
      "writtenOn": "2016-01-23T01:13:15Z",
      "side": 1,
      "message": "This could be optimized just because the return values unused and the methods are side effect free. So I don\u0027t think it tests inlining as class javadoc says (or may stop testing what it suppose to in the future). I think it is better if impossible case of alwaysThis has some side effect.",
      "revId": "2df8bc28e9dab32dd855d618045d1909be0a0c2f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}