{
  "comments": [
    {
      "key": {
        "uuid": "afcbc564_5fdfa47f",
        "filename": "dev/core/src/com/google/gwt/core/ext/linker/ArtifactSet.java",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 5010
      },
      "writtenOn": "2014-02-13T23:24:14Z",
      "side": 1,
      "message": "Finally getting back to this; sorry about the delay.\n\nI like the performance win, but despite having tried several times I\u0027m finding this code rather hard to follow. It would help if you added comments explaining the lifecycle and invariants of these fields, so the reader doesn\u0027t have to read the whole class to figure out your intentions.\n\nPerhaps introducing an inner class or two to encapsulate some of the internals might help?",
      "range": {
        "startLine": 52,
        "startChar": 65,
        "endLine": 52,
        "endChar": 70
      },
      "revId": "399280df4fc394daf3aac59279c61fdc07f45b8c",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "92138adb_ef8335a9",
        "filename": "dev/core/src/com/google/gwt/core/ext/linker/ArtifactSet.java",
        "patchSetId": 4
      },
      "lineNbr": 82,
      "author": {
        "id": 5100
      },
      "writtenOn": "2014-02-03T22:59:05Z",
      "side": 1,
      "message": "If this is null, that is because clear has been called, or we deserialized it, right?  Why wouldn\u0027t we recreate the byType map and then populate it as normal?",
      "range": {
        "startLine": 82,
        "startChar": 7,
        "endLine": 82,
        "endChar": 8
      },
      "revId": "399280df4fc394daf3aac59279c61fdc07f45b8c",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b21c0efc_5a9bf5e9",
        "filename": "dev/core/src/com/google/gwt/core/ext/linker/ArtifactSet.java",
        "patchSetId": 4
      },
      "lineNbr": 82,
      "author": {
        "id": 5740
      },
      "writtenOn": "2014-02-03T23:25:40Z",
      "side": 1,
      "message": "This is the lazy index and cache generation stuff.  Both things are not generated until the first find() on the set.  I don\u0027t think there\u0027s a penalty for deferring the creation of either object until that first find(), but after that point, there is an obvious penalty for not keeping the index up-to-date.",
      "parentUuid": "92138adb_ef8335a9",
      "range": {
        "startLine": 82,
        "startChar": 7,
        "endLine": 82,
        "endChar": 8
      },
      "revId": "399280df4fc394daf3aac59279c61fdc07f45b8c",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "92138adb_2f9b8d19",
        "filename": "dev/core/src/com/google/gwt/core/ext/linker/ArtifactSet.java",
        "patchSetId": 4
      },
      "lineNbr": 167,
      "author": {
        "id": 5100
      },
      "writtenOn": "2014-02-03T22:59:05Z",
      "side": 1,
      "message": "The fact this can happen seems like a bad code smell.  Some code that gets passed an ArtifactSet now has to worry about getting an exception on find if its caller passed in a head/tail/subset-based ArtifactSet, leading to an obscure runtime error.\n\nI think maybe a better approach would be to have views maintain their own cache and by-type maps, and just get passed in the base Set\u003cArtifact\u003e, and invalidate the parent\u0027s caches\u0027maps if they get modified (and let them be lazily recalculated).\n\nWe\u0027re probably overthinking all of this anyway - does any known caller actually use the views and try and modify through them?  Maybe the first approach of just not allowing modifications through views (and do likewise with the iterator) would be best.",
      "revId": "399280df4fc394daf3aac59279c61fdc07f45b8c",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b21c0efc_9a90adc7",
        "filename": "dev/core/src/com/google/gwt/core/ext/linker/ArtifactSet.java",
        "patchSetId": 4
      },
      "lineNbr": 167,
      "author": {
        "id": 5740
      },
      "writtenOn": "2014-02-03T23:25:40Z",
      "side": 1,
      "message": "The view-creating methods don\u0027t explicitly return ArtifactSets (it\u0027s just a hidden detail), so to reach this point, someone would have to look quite a ways under the covers to see that the SortedSets could be cast in this direction.  It\u0027s a convenience thing for me so that I can share the cache-invalidation stuff.\n\nPrior to this change, the SortedSets were views created by TreeSets, so they weren\u0027t ArtifactSets at all, above or below the line.\n\nI could just wrap the views with a simple ForwardingSortedSet, and then find wouldn\u0027t be callable even after a cast, but the ForwardingSortedSet thing struck me as a bit paranoid.",
      "parentUuid": "92138adb_2f9b8d19",
      "revId": "399280df4fc394daf3aac59279c61fdc07f45b8c",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "92138adb_ef9c5516",
        "filename": "dev/core/src/com/google/gwt/core/ext/linker/ArtifactSet.java",
        "patchSetId": 4
      },
      "lineNbr": 170,
      "author": {
        "id": 5100
      },
      "writtenOn": "2014-02-03T22:59:05Z",
      "side": 1,
      "message": "Does this really do what you want here?  It seems like two threads could pass this get check, and then one of them would wipe out the cache.  I guess in the case of a cache that isn\u0027t that big a deal since you just lose performance not data.",
      "revId": "399280df4fc394daf3aac59279c61fdc07f45b8c",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b21c0efc_7ac919ed",
        "filename": "dev/core/src/com/google/gwt/core/ext/linker/ArtifactSet.java",
        "patchSetId": 4
      },
      "lineNbr": 170,
      "author": {
        "id": 5740
      },
      "writtenOn": "2014-02-03T23:25:40Z",
      "side": 1,
      "message": "I\u0027m okay personally with the loss of performance in this event. I could slap a synchronized on the method, but my uninformed hope is that concurrent calls to find are rare in-practice.",
      "parentUuid": "92138adb_ef9c5516",
      "revId": "399280df4fc394daf3aac59279c61fdc07f45b8c",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}