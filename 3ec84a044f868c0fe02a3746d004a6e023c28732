{
  "comments": [
    {
      "key": {
        "uuid": "1d879d2a_329f9649",
        "filename": "user/super/com/google/gwt/emul/java/lang/Byte.java",
        "patchSetId": 9
      },
      "lineNbr": 37,
      "author": {
        "id": 5110
      },
      "writtenOn": "2013-06-03T22:23:09Z",
      "side": 1,
      "message": "return x - y  otherwise this will be inconsistent dev vs prod",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fd1569d0_7838413f",
        "filename": "user/super/com/google/gwt/emul/java/lang/Byte.java",
        "patchSetId": 9
      },
      "lineNbr": 37,
      "author": {
        "id": 5385
      },
      "writtenOn": "2013-06-10T07:08:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1d879d2a_329f9649",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d879d2a_321eb624",
        "filename": "user/super/com/google/gwt/emul/java/lang/Float.java",
        "patchSetId": 9
      },
      "lineNbr": 37,
      "author": {
        "id": 5110
      },
      "writtenOn": "2013-06-03T22:23:09Z",
      "side": 1,
      "message": "Please start checks with the more common case (i.e. x \u0026 y is not NaN).",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d9cfd82_8a5f0ff4",
        "filename": "user/super/com/google/gwt/emul/java/lang/Float.java",
        "patchSetId": 9
      },
      "lineNbr": 37,
      "author": {
        "id": 5385
      },
      "writtenOn": "2013-06-04T13:03:04Z",
      "side": 1,
      "message": "I don\u0027t think its a good idea, since with this we would have to do something like:\n\nif(!isNaN(x) \u0026\u0026 !isNaN(y)) {\n// do normal stuff\n}else{\n//test again\n}\n\nIf we want to change this, we should also change this in Double.compare (its implemented the same way)",
      "parentUuid": "1d879d2a_321eb624",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d879d2a_bd86f79c",
        "filename": "user/super/com/google/gwt/emul/java/lang/Float.java",
        "patchSetId": 9
      },
      "lineNbr": 37,
      "author": {
        "id": 5110
      },
      "writtenOn": "2013-06-04T18:55:12Z",
      "side": 1,
      "message": "Why do you need to do something like that?\n\nFollowing should work fine:\n\n // All these checks should be false if x or y isNaN \n if(x \u003c y) return -1;\n if(x \u003e y) return 1;\n if(x \u003d\u003d y) return 0;\n\n // below same isNaN check as before\n if( isNaN(x) )\n  ....",
      "parentUuid": "1d9cfd82_8a5f0ff4",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d879d2a_3e167dcd",
        "filename": "user/super/com/google/gwt/emul/java/lang/Float.java",
        "patchSetId": 9
      },
      "lineNbr": 37,
      "author": {
        "id": 5100
      },
      "writtenOn": "2013-06-05T18:23:02Z",
      "side": 1,
      "message": "You have to make sure those comparisons behave as desired when one or both operands are NaNs.",
      "parentUuid": "1d879d2a_bd86f79c",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d215d31_39608f3b",
        "filename": "user/super/com/google/gwt/emul/java/lang/Float.java",
        "patchSetId": 9
      },
      "lineNbr": 37,
      "author": {
        "id": 5385
      },
      "writtenOn": "2013-06-10T07:08:34Z",
      "side": 1,
      "message": "changed order",
      "parentUuid": "1d879d2a_3e167dcd",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d9cfd82_81713a57",
        "filename": "user/super/com/google/gwt/emul/java/lang/Integer.java",
        "patchSetId": 9
      },
      "lineNbr": 61,
      "author": {
        "id": 5030
      },
      "writtenOn": "2013-06-02T22:44:17Z",
      "side": 1,
      "message": "Do we actually need the call to signum() here? The Javadoc only talks about positive or negative values, not specifically 1 and -1, and Character#compareTo currently just returns \u0027x - y\u0027.",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1dc5dd78_f9267726",
        "filename": "user/super/com/google/gwt/emul/java/lang/Integer.java",
        "patchSetId": 9
      },
      "lineNbr": 61,
      "author": {
        "id": 5100
      },
      "writtenOn": "2013-06-02T22:48:17Z",
      "side": 1,
      "message": "That is a change from before, but from the Javadoc it should be fine.  However, I worry about overflow conditions, such as compare(2^31, -2^31)",
      "parentUuid": "1d9cfd82_81713a57",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d879d2a_d291da47",
        "filename": "user/super/com/google/gwt/emul/java/lang/Integer.java",
        "patchSetId": 9
      },
      "lineNbr": 61,
      "author": {
        "id": 5110
      },
      "writtenOn": "2013-06-03T22:23:09Z",
      "side": 1,
      "message": "If we don\u0027t return 1 and -1 then it will be inconsistent across dev vs prod",
      "parentUuid": "1d9cfd82_81713a57",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d879d2a_5e4891e3",
        "filename": "user/super/com/google/gwt/emul/java/lang/Integer.java",
        "patchSetId": 9
      },
      "lineNbr": 61,
      "author": {
        "id": 5100
      },
      "writtenOn": "2013-06-05T18:23:02Z",
      "side": 1,
      "message": "The spec of the Javadoc doesn\u0027t care, so anyone that writes code that depends on implementation details, whether our own JRE emulation or different JVMs, deserves whatever pain they get.",
      "parentUuid": "1d879d2a_d291da47",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d879d2a_de9d61fb",
        "filename": "user/super/com/google/gwt/emul/java/lang/Integer.java",
        "patchSetId": 9
      },
      "lineNbr": 61,
      "author": {
        "id": 5110
      },
      "writtenOn": "2013-06-05T19:02:56Z",
      "side": 1,
      "message": "\u003e \".. deserves whatever pain they get\" \n\u003d)\n\nI would not try hard for something like this but currently I don\u0027t see any good reason to make this behave different than the de facto JDK.",
      "parentUuid": "1d879d2a_5e4891e3",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fd1569d0_18358546",
        "filename": "user/super/com/google/gwt/emul/java/lang/Integer.java",
        "patchSetId": 9
      },
      "lineNbr": 61,
      "author": {
        "id": 5385
      },
      "writtenOn": "2013-06-10T07:08:34Z",
      "side": 1,
      "message": "see: https://code.google.com/p/google-web-toolkit/issues/detail?id\u003d8185\u0026thanks\u003d8185",
      "parentUuid": "1d879d2a_de9d61fb",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d879d2a_127d322c",
        "filename": "user/super/com/google/gwt/emul/java/lang/Short.java",
        "patchSetId": 9
      },
      "lineNbr": 37,
      "author": {
        "id": 5110
      },
      "writtenOn": "2013-06-03T22:23:09Z",
      "side": 1,
      "message": "Short should just return x-y otherwise this will be inconsistent dev vs prod.",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d9cfd82_aaad3390",
        "filename": "user/super/com/google/gwt/emul/java/lang/Short.java",
        "patchSetId": 9
      },
      "lineNbr": 37,
      "author": {
        "id": 5385
      },
      "writtenOn": "2013-06-04T13:03:04Z",
      "side": 1,
      "message": "I don\"t really understand what the difference would be between prod vs. dev if we do not use x-y. Correct me if I am wrong but one should never rely on the exact value returned from compare.",
      "parentUuid": "1d879d2a_127d322c",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d879d2a_dd93abdd",
        "filename": "user/super/com/google/gwt/emul/java/lang/Short.java",
        "patchSetId": 9
      },
      "lineNbr": 37,
      "author": {
        "id": 5110
      },
      "writtenOn": "2013-06-04T18:55:12Z",
      "side": 1,
      "message": "One should never rely on it for sure, but if somehow they rely on it, it will work or fail consistently in both production and dev mode (i.e. less surprises).\nIn general, it is best to not diverge prod vs dev if there is no good reason to do so (like a big performance hit).",
      "parentUuid": "1d9cfd82_aaad3390",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d1c61fa_fac9a9a1",
        "filename": "user/super/com/google/gwt/emul/java/lang/Short.java",
        "patchSetId": 9
      },
      "lineNbr": 37,
      "author": {
        "id": 5385
      },
      "writtenOn": "2013-06-10T07:08:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1d879d2a_dd93abdd",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d879d2a_92704252",
        "filename": "user/test/com/google/gwt/emultest/java/lang/FloatTest.java",
        "patchSetId": 9
      },
      "lineNbr": 81,
      "author": {
        "id": 5110
      },
      "writtenOn": "2013-06-03T22:23:09Z",
      "side": 1,
      "message": "Not sure if there is such a difference in js like in java but can you add a test for -0 vs 0?",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d6fb93b_07ea582a",
        "filename": "user/test/com/google/gwt/emultest/java/lang/FloatTest.java",
        "patchSetId": 9
      },
      "lineNbr": 81,
      "author": {
        "id": 5385
      },
      "writtenOn": "2013-06-04T13:03:04Z",
      "side": 1,
      "message": "In JavaScript something like this passes:\nassertEquals(0, Float.compare(0.0f, -0.0f));\n\nWhile it does not pass in Java. Do we want to make sure we cover this corner case (as well as others) and take the performance hit?\n\nNot sure here. Could we just cover this in the docs of the JRE Emulation?",
      "parentUuid": "1d879d2a_92704252",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d879d2a_5d597b70",
        "filename": "user/test/com/google/gwt/emultest/java/lang/FloatTest.java",
        "patchSetId": 9
      },
      "lineNbr": 81,
      "author": {
        "id": 5110
      },
      "writtenOn": "2013-06-04T18:55:12Z",
      "side": 1,
      "message": "I guess there is no -0 in js and in that case there is not much to do,\n\nOn the other hand, I\u0027m not very familiar how we handle numerical difference in js vs java. Thomas? John?",
      "parentUuid": "7d6fb93b_07ea582a",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d879d2a_9e3a0937",
        "filename": "user/test/com/google/gwt/emultest/java/lang/FloatTest.java",
        "patchSetId": 9
      },
      "lineNbr": 81,
      "author": {
        "id": 5100
      },
      "writtenOn": "2013-06-05T18:23:02Z",
      "side": 1,
      "message": "Floating point varies significantly across all browsers.  At least when I was working on it, Safari JSCore steals bits from floats for tag values, so there are some values that aren\u0027t representable there and you get different roundoff than other engines.\n\nI don\u0027t believe you can type \"-0\" in JS, but there are other ways to generate them.  I seem to recall code in Dan\u0027s float-to-int bytes tests that generated them.",
      "parentUuid": "1d879d2a_5d597b70",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d9cfd82_bb5d875e",
        "filename": "user/test/com/google/gwt/emultest/java/lang/FloatTest.java",
        "patchSetId": 9
      },
      "lineNbr": 81,
      "author": {
        "id": 5030
      },
      "writtenOn": "2013-06-05T22:57:55Z",
      "side": 1,
      "message": "\"-0\" is valid JS, and 1/0 is Infinity while 1/-0 is -Infinity (per spec and tested in Chrome and Firefox).\n\nThat said, we don\u0027t deal with that elsewhere. E.g. our Math.signum() emulations use \u003e0 and \u003c0 which won\u0027t distinguish +0 and -0. Math.signum(Double.NaN) is also broken BTW. This is fixable (with explicit isNaN and \u003d\u003d0 checks) but nobody complained so far.",
      "parentUuid": "1d879d2a_9e3a0937",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d1c61fa_bac33180",
        "filename": "user/test/com/google/gwt/emultest/java/lang/FloatTest.java",
        "patchSetId": 9
      },
      "lineNbr": 81,
      "author": {
        "id": 5385
      },
      "writtenOn": "2013-06-10T07:08:34Z",
      "side": 1,
      "message": "see: https://code.google.com/p/google-web-toolkit/issues/detail?id\u003d8185\u0026thanks\u003d8185",
      "parentUuid": "1d9cfd82_bb5d875e",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d879d2a_d26aba5b",
        "filename": "user/test/com/google/gwt/emultest/java/lang/IntegerTest.java",
        "patchSetId": 9
      },
      "lineNbr": 120,
      "author": {
        "id": 5110
      },
      "writtenOn": "2013-06-03T22:23:09Z",
      "side": 1,
      "message": "Can you add test for borders like John suggested?",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d6cb547_2343cacb",
        "filename": "user/test/com/google/gwt/emultest/java/lang/IntegerTest.java",
        "patchSetId": 9
      },
      "lineNbr": 120,
      "author": {
        "id": 5385
      },
      "writtenOn": "2013-06-04T13:03:04Z",
      "side": 1,
      "message": "We actually look terrible at the Borders:\n\nThis will just fail:\nInteger.compare(Integer.MAX_VALUE,  Integer.MIN_VALUE) \u003e 0\n\nsince we do not got overflow for ints in javascript.\n\nI am not sure how to handle such corner cases, do we want to handle them, any input?",
      "parentUuid": "1d879d2a_d26aba5b",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d879d2a_fd694ff7",
        "filename": "user/test/com/google/gwt/emultest/java/lang/IntegerTest.java",
        "patchSetId": 9
      },
      "lineNbr": 120,
      "author": {
        "id": 5110
      },
      "writtenOn": "2013-06-04T18:55:12Z",
      "side": 1,
      "message": "I think we need to but we can create a bug and defer it to another time.\n\nJohn \u0026 Thomas, any input here?",
      "parentUuid": "5d6cb547_2343cacb",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d879d2a_fe31455a",
        "filename": "user/test/com/google/gwt/emultest/java/lang/IntegerTest.java",
        "patchSetId": 9
      },
      "lineNbr": 120,
      "author": {
        "id": 5100
      },
      "writtenOn": "2013-06-05T18:23:02Z",
      "side": 1,
      "message": "We already say in the JRE compatibility doc that we don\u0027t handle integer overflows.  However, people aren\u0027t going to think of a comparison as an integer overflow case, so if we can handle it cheaply we should.\n\nAfter MAX_VALUE - MIN_VALUE overflows, what happens after the result is coerced to an int?  If we can\u0027t deal with the overflow after the fact, we would need to check for overflow before doing the comparison.\n\nOr, maybe that is why we didn\u0027t use subtraction in the first place.",
      "parentUuid": "1d879d2a_fd694ff7",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d1c61fa_9abe6ded",
        "filename": "user/test/com/google/gwt/emultest/java/lang/IntegerTest.java",
        "patchSetId": 9
      },
      "lineNbr": 120,
      "author": {
        "id": 5385
      },
      "writtenOn": "2013-06-10T07:08:34Z",
      "side": 1,
      "message": "Let\u0027s deal with the corner cases in another CL: https://code.google.com/p/google-web-toolkit/issues/detail?id\u003d8185",
      "parentUuid": "1d879d2a_fe31455a",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}