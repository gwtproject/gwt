{
  "comments": [
    {
      "key": {
        "uuid": "1d879d2a_329f9649",
        "filename": "user/super/com/google/gwt/emul/java/lang/Byte.java",
        "patchSetId": 9
      },
      "lineNbr": 37,
      "author": {
        "id": 5110
      },
      "writtenOn": "2013-06-03T22:23:09Z",
      "side": 1,
      "message": "return x - y  otherwise this will be inconsistent dev vs prod",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d879d2a_321eb624",
        "filename": "user/super/com/google/gwt/emul/java/lang/Float.java",
        "patchSetId": 9
      },
      "lineNbr": 37,
      "author": {
        "id": 5110
      },
      "writtenOn": "2013-06-03T22:23:09Z",
      "side": 1,
      "message": "Please start checks with the more common case (i.e. x \u0026 y is not NaN).",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d9cfd82_8a5f0ff4",
        "filename": "user/super/com/google/gwt/emul/java/lang/Float.java",
        "patchSetId": 9
      },
      "lineNbr": 37,
      "author": {
        "id": 5385
      },
      "writtenOn": "2013-06-04T13:03:04Z",
      "side": 1,
      "message": "I don\u0027t think its a good idea, since with this we would have to do something like:\n\nif(!isNaN(x) \u0026\u0026 !isNaN(y)) {\n// do normal stuff\n}else{\n//test again\n}\n\nIf we want to change this, we should also change this in Double.compare (its implemented the same way)",
      "parentUuid": "1d879d2a_321eb624",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d879d2a_bd86f79c",
        "filename": "user/super/com/google/gwt/emul/java/lang/Float.java",
        "patchSetId": 9
      },
      "lineNbr": 37,
      "author": {
        "id": 5110
      },
      "writtenOn": "2013-06-04T18:55:12Z",
      "side": 1,
      "message": "Why do you need to do something like that?\n\nFollowing should work fine:\n\n // All these checks should be false if x or y isNaN \n if(x \u003c y) return -1;\n if(x \u003e y) return 1;\n if(x \u003d\u003d y) return 0;\n\n // below same isNaN check as before\n if( isNaN(x) )\n  ....",
      "parentUuid": "1d9cfd82_8a5f0ff4",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d9cfd82_81713a57",
        "filename": "user/super/com/google/gwt/emul/java/lang/Integer.java",
        "patchSetId": 9
      },
      "lineNbr": 61,
      "author": {
        "id": 5030
      },
      "writtenOn": "2013-06-02T22:44:17Z",
      "side": 1,
      "message": "Do we actually need the call to signum() here? The Javadoc only talks about positive or negative values, not specifically 1 and -1, and Character#compareTo currently just returns \u0027x - y\u0027.",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1dc5dd78_f9267726",
        "filename": "user/super/com/google/gwt/emul/java/lang/Integer.java",
        "patchSetId": 9
      },
      "lineNbr": 61,
      "author": {
        "id": 5100
      },
      "writtenOn": "2013-06-02T22:48:17Z",
      "side": 1,
      "message": "That is a change from before, but from the Javadoc it should be fine.  However, I worry about overflow conditions, such as compare(2^31, -2^31)",
      "parentUuid": "1d9cfd82_81713a57",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d879d2a_d291da47",
        "filename": "user/super/com/google/gwt/emul/java/lang/Integer.java",
        "patchSetId": 9
      },
      "lineNbr": 61,
      "author": {
        "id": 5110
      },
      "writtenOn": "2013-06-03T22:23:09Z",
      "side": 1,
      "message": "If we don\u0027t return 1 and -1 then it will be inconsistent across dev vs prod",
      "parentUuid": "1d9cfd82_81713a57",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d879d2a_127d322c",
        "filename": "user/super/com/google/gwt/emul/java/lang/Short.java",
        "patchSetId": 9
      },
      "lineNbr": 37,
      "author": {
        "id": 5110
      },
      "writtenOn": "2013-06-03T22:23:09Z",
      "side": 1,
      "message": "Short should just return x-y otherwise this will be inconsistent dev vs prod.",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d9cfd82_aaad3390",
        "filename": "user/super/com/google/gwt/emul/java/lang/Short.java",
        "patchSetId": 9
      },
      "lineNbr": 37,
      "author": {
        "id": 5385
      },
      "writtenOn": "2013-06-04T13:03:04Z",
      "side": 1,
      "message": "I don\"t really understand what the difference would be between prod vs. dev if we do not use x-y. Correct me if I am wrong but one should never rely on the exact value returned from compare.",
      "parentUuid": "1d879d2a_127d322c",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d879d2a_dd93abdd",
        "filename": "user/super/com/google/gwt/emul/java/lang/Short.java",
        "patchSetId": 9
      },
      "lineNbr": 37,
      "author": {
        "id": 5110
      },
      "writtenOn": "2013-06-04T18:55:12Z",
      "side": 1,
      "message": "One should never rely on it for sure, but if somehow they rely on it, it will work or fail consistently in both production and dev mode (i.e. less surprises).\nIn general, it is best to not diverge prod vs dev if there is no good reason to do so (like a big performance hit).",
      "parentUuid": "1d9cfd82_aaad3390",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d879d2a_92704252",
        "filename": "user/test/com/google/gwt/emultest/java/lang/FloatTest.java",
        "patchSetId": 9
      },
      "lineNbr": 81,
      "author": {
        "id": 5110
      },
      "writtenOn": "2013-06-03T22:23:09Z",
      "side": 1,
      "message": "Not sure if there is such a difference in js like in java but can you add a test for -0 vs 0?",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d6fb93b_07ea582a",
        "filename": "user/test/com/google/gwt/emultest/java/lang/FloatTest.java",
        "patchSetId": 9
      },
      "lineNbr": 81,
      "author": {
        "id": 5385
      },
      "writtenOn": "2013-06-04T13:03:04Z",
      "side": 1,
      "message": "In JavaScript something like this passes:\nassertEquals(0, Float.compare(0.0f, -0.0f));\n\nWhile it does not pass in Java. Do we want to make sure we cover this corner case (as well as others) and take the performance hit?\n\nNot sure here. Could we just cover this in the docs of the JRE Emulation?",
      "parentUuid": "1d879d2a_92704252",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d879d2a_5d597b70",
        "filename": "user/test/com/google/gwt/emultest/java/lang/FloatTest.java",
        "patchSetId": 9
      },
      "lineNbr": 81,
      "author": {
        "id": 5110
      },
      "writtenOn": "2013-06-04T18:55:12Z",
      "side": 1,
      "message": "I guess there is no -0 in js and in that case there is not much to do,\n\nOn the other hand, I\u0027m not very familiar how we handle numerical difference in js vs java. Thomas? John?",
      "parentUuid": "7d6fb93b_07ea582a",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d879d2a_d26aba5b",
        "filename": "user/test/com/google/gwt/emultest/java/lang/IntegerTest.java",
        "patchSetId": 9
      },
      "lineNbr": 120,
      "author": {
        "id": 5110
      },
      "writtenOn": "2013-06-03T22:23:09Z",
      "side": 1,
      "message": "Can you add test for borders like John suggested?",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d6cb547_2343cacb",
        "filename": "user/test/com/google/gwt/emultest/java/lang/IntegerTest.java",
        "patchSetId": 9
      },
      "lineNbr": 120,
      "author": {
        "id": 5385
      },
      "writtenOn": "2013-06-04T13:03:04Z",
      "side": 1,
      "message": "We actually look terrible at the Borders:\n\nThis will just fail:\nInteger.compare(Integer.MAX_VALUE,  Integer.MIN_VALUE) \u003e 0\n\nsince we do not got overflow for ints in javascript.\n\nI am not sure how to handle such corner cases, do we want to handle them, any input?",
      "parentUuid": "1d879d2a_d26aba5b",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d879d2a_fd694ff7",
        "filename": "user/test/com/google/gwt/emultest/java/lang/IntegerTest.java",
        "patchSetId": 9
      },
      "lineNbr": 120,
      "author": {
        "id": 5110
      },
      "writtenOn": "2013-06-04T18:55:12Z",
      "side": 1,
      "message": "I think we need to but we can create a bug and defer it to another time.\n\nJohn \u0026 Thomas, any input here?",
      "parentUuid": "5d6cb547_2343cacb",
      "revId": "3ec84a044f868c0fe02a3746d004a6e023c28732",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}