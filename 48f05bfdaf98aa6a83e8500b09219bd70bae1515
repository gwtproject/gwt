{
  "comments": [
    {
      "key": {
        "uuid": "e7f07da0_3f0e45f6",
        "filename": "user/src/com/google/gwt/core/client/JavaScriptObject.java",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 5030
      },
      "writtenOn": "2013-09-11T12:28:20Z",
      "side": 1,
      "message": "Just a note, I have no idea what effect it could have on runtime perf, if any, but we can save a few bytes here by calling the constructor as a function (i.e. removing the \u0027new\u0027 keyword):\n\n return Array(size);\n\nSee http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.1\n\nNo idea about cross-browser compatibility either (works in Chrome 30, Firefox 23 and Opera 12, at least)",
      "revId": "48f05bfdaf98aa6a83e8500b09219bd70bae1515",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "479ea96d_11e36c4f",
        "filename": "user/src/com/google/gwt/core/client/JavaScriptObject.java",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 5385
      },
      "writtenOn": "2013-09-11T21:57:29Z",
      "side": 1,
      "message": "After checking with v8 team this should indeed be new Array();\n\nHere is why:\nThere is a difference, at this point \"new Array(20)\" is better, even though \"Array(20)\" will benefit from type feedback as well.\n\nThe constructor version is more straightforward. From the first storage of an element into the array, AllocationMemento feedback is updated. Information learned in full code generation is smoothly consumed for crankshaft as well.\n\nFor the function call version, a custom IC is used. It has a longer warm up time, going through uninitialized and premonomorphic states before settling into a monomorphic state and making use of the AllocationMemento type feedback mechanism.\n\nSecondly, this type feedback is lost when a method is crankshafted. When the call is crankshafted, a custom IC is used again, but it has to go through the same warm up state.",
      "parentUuid": "e7f07da0_3f0e45f6",
      "revId": "48f05bfdaf98aa6a83e8500b09219bd70bae1515",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7f07da0_1f0b89e5",
        "filename": "user/test/com/google/gwt/core/client/JavaScriptObjectTest.java",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 5030
      },
      "writtenOn": "2013-09-11T12:28:20Z",
      "side": 1,
      "message": "No need to import Assert and qualify assertEquals, as GWTTestCase extends Assert already (through TestCase).\n\n assertEquals(20, array.length());",
      "revId": "48f05bfdaf98aa6a83e8500b09219bd70bae1515",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c420d793_d549bc65",
        "filename": "user/test/com/google/gwt/core/client/JavaScriptObjectTest.java",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 5385
      },
      "writtenOn": "2013-09-18T11:49:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7f07da0_1f0b89e5",
      "revId": "48f05bfdaf98aa6a83e8500b09219bd70bae1515",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}