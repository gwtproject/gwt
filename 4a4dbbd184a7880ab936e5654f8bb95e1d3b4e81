{
  "comments": [
    {
      "key": {
        "uuid": "56c4e1d1_beae4906",
        "filename": "user/super/com/google/gwt/emul/java/util/DoubleSummaryStatistics.java",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 5542
      },
      "writtenOn": "2015-10-29T10:58:22Z",
      "side": 1,
      "message": "OpenJDK uses Kahan summation algorithm [1] to compensate accumulating summation errors. It\u0027s simple, let\u0027s also use it here.\n\n[1] https://en.wikipedia.org/wiki/Kahan_summation_algorithm",
      "revId": "4a4dbbd184a7880ab936e5654f8bb95e1d3b4e81",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "166509c4_1a3bfdb3",
        "filename": "user/super/com/google/gwt/emul/java/util/DoubleSummaryStatistics.java",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 5031
      },
      "writtenOn": "2015-10-29T12:53:40Z",
      "side": 1,
      "message": "I\u0027ll take a look. Might require some trickery so that the compensation does not get optimized to 0 by GWT compiler.",
      "parentUuid": "56c4e1d1_beae4906",
      "revId": "4a4dbbd184a7880ab936e5654f8bb95e1d3b4e81",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fdce9ca2_893de9c6",
        "filename": "user/super/com/google/gwt/emul/java/util/DoubleSummaryStatistics.java",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 5130
      },
      "writtenOn": "2016-02-10T21:04:58Z",
      "side": 1,
      "message": "Thoughts on changing this, and how important it may be to have present in our emulated version?",
      "parentUuid": "166509c4_1a3bfdb3",
      "revId": "4a4dbbd184a7880ab936e5654f8bb95e1d3b4e81",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1dc45060_5befbbd5",
        "filename": "user/super/com/google/gwt/emul/java/util/DoubleSummaryStatistics.java",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 5031
      },
      "writtenOn": "2016-02-11T09:50:01Z",
      "side": 1,
      "message": "I think its worth adding as it makes the sum more accurate, especially when you sum lots of doubles and not just a few.",
      "parentUuid": "fdce9ca2_893de9c6",
      "revId": "4a4dbbd184a7880ab936e5654f8bb95e1d3b4e81",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16c1896c_1a38fd01",
        "filename": "user/super/com/google/gwt/emul/java/util/DoubleSummaryStatistics.java",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 5030
      },
      "writtenOn": "2015-10-26T12:19:08Z",
      "side": 1,
      "message": "Micro-optimization: how about\n\n if (value \u003c min) {\n   min \u003d value;\n }\n\nNot sure this is really necessary, but avoids looking up \u0027Math\u0027 in scope and then dereferencing a method. I suppose JIT in modern JS engines can probably optimize everything such that there\u0027d be no clear winner, but just in caseâ€¦\n\n(JSPerf could possibly tell us)",
      "revId": "4a4dbbd184a7880ab936e5654f8bb95e1d3b4e81",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7671e51a_65f78689",
        "filename": "user/super/com/google/gwt/emul/java/util/DoubleSummaryStatistics.java",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 5031
      },
      "writtenOn": "2015-10-26T13:21:05Z",
      "side": 1,
      "message": "Thats the same as Math.min/max is emulated in GWT. I would say chances are good that GWT compiler / Closure will inline the emulation anyways.",
      "parentUuid": "16c1896c_1a38fd01",
      "revId": "4a4dbbd184a7880ab936e5654f8bb95e1d3b4e81",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36b04d09_fb954f3f",
        "filename": "user/super/com/google/gwt/emul/java/util/DoubleSummaryStatistics.java",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 5030
      },
      "writtenOn": "2015-10-26T14:23:51Z",
      "side": 1,
      "message": "Ah right, it\u0027s java.lang.Math, not JS\u0027s Math! ;-)",
      "parentUuid": "7671e51a_65f78689",
      "revId": "4a4dbbd184a7880ab936e5654f8bb95e1d3b4e81",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fdce9ca2_296db5cf",
        "filename": "user/super/com/google/gwt/emul/java/util/DoubleSummaryStatistics.java",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 5130
      },
      "writtenOn": "2016-02-10T21:04:58Z",
      "side": 1,
      "message": "Thomas, you still have this listed as \"-1\" - is that still accurate, or are you okay with what is committed right now?",
      "parentUuid": "36b04d09_fb954f3f",
      "revId": "4a4dbbd184a7880ab936e5654f8bb95e1d3b4e81",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1dc45060_5bb89bee",
        "filename": "user/super/com/google/gwt/emul/java/util/DoubleSummaryStatistics.java",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 5031
      },
      "writtenOn": "2016-02-11T09:50:01Z",
      "side": 1,
      "message": "Its -1 because it has no tests yet (Double.NaN / Infinities) and I agree with it. I\u0027ll add some by the end of the week.",
      "parentUuid": "fdce9ca2_296db5cf",
      "revId": "4a4dbbd184a7880ab936e5654f8bb95e1d3b4e81",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}