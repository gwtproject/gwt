{
  "comments": [
    {
      "key": {
        "uuid": "4b1c6baf_296e29e5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 14
      },
      "lineNbr": 7,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-11-08T12:40:37Z",
      "side": 1,
      "message": "This is no longer accurate.",
      "revId": "4f4a24901e1a29192c5efbe382764ef9e477cc66",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4628e269_e6e4deca",
        "filename": "user/src/com/google/gwt/safehtml/shared/UriUtils.java",
        "patchSetId": 14
      },
      "lineNbr": 49,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-11-08T12:40:37Z",
      "side": 1,
      "message": "Useless; inline it.",
      "revId": "4f4a24901e1a29192c5efbe382764ef9e477cc66",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b6bb700_3b977f95",
        "filename": "user/src/com/google/gwt/safehtml/shared/UriUtils.java",
        "patchSetId": 14
      },
      "lineNbr": 274,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-11-08T12:40:37Z",
      "side": 1,
      "message": "This means we\u0027ll to the toUpperCase even when not needed, which is likely the most common case (URL with http or https scheme). There *might* be a performance impact at runtime.",
      "revId": "4f4a24901e1a29192c5efbe382764ef9e477cc66",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b64332d_972ca6b0",
        "filename": "user/src/com/google/gwt/safehtml/shared/UriUtils.java",
        "patchSetId": 14
      },
      "lineNbr": 282,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-11-08T12:40:37Z",
      "side": 1,
      "message": "We\u0027re doing both toLowerCase and toUpperCase for all extra schemes, even when not needed (as is the case for \"tel\" for example).\n\nCould we either do like safe-html-types and introduce an enum rather than accepting arbitrary strings? and/or possibly introduce an interface with a \"boolean matches(String)\" method that extra schemes would implement as needed. For schemes containing chars that could be problematic (like a \"i\"), because URI schemes are limited to alphanum+dot+hyphen+plus, we could first validate the scheme before giving the lowercased version to the extra scheme matchers. That\u0027s extra work but I think this is an acceptable trade-off and wouldn\u0027t require the double comparison (and transformation!) in upper and lower case (what I don\u0027t want is to have negative impact on people *not* using the feature, which will be 99.999% GWT users)\n\nThe advantage to using a custom type for extra schemes is that one cannot erroneously pass input from the user (inherently unsafe) as a \"safe scheme\".\n\n interface SafeScheme {\n   boolean matches(String schemeLc);\n }\n\n enum SafeSchemes implements SafeScheme {\n   TEL(\"tel\"),\n   SMS(\"sms\");\n\n   private final schemeLc\n   @Override\n   public boolean matches(String schemeLc) {\n     return this.schemeLc.equals(schemeLc);\n   }\n }\n\n(or instead of an enum, use constants on the UriUtils class, similar to the HTTP methods in RequestBuilder)",
      "revId": "4f4a24901e1a29192c5efbe382764ef9e477cc66",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}