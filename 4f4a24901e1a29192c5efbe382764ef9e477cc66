{
  "comments": [
    {
      "key": {
        "uuid": "4b1c6baf_296e29e5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 14
      },
      "lineNbr": 7,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-11-08T12:40:37Z",
      "side": 1,
      "message": "This is no longer accurate.",
      "revId": "4f4a24901e1a29192c5efbe382764ef9e477cc66",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4628e269_e6e4deca",
        "filename": "user/src/com/google/gwt/safehtml/shared/UriUtils.java",
        "patchSetId": 14
      },
      "lineNbr": 49,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-11-08T12:40:37Z",
      "side": 1,
      "message": "Useless; inline it.",
      "revId": "4f4a24901e1a29192c5efbe382764ef9e477cc66",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b6bb700_3b977f95",
        "filename": "user/src/com/google/gwt/safehtml/shared/UriUtils.java",
        "patchSetId": 14
      },
      "lineNbr": 274,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-11-08T12:40:37Z",
      "side": 1,
      "message": "This means we\u0027ll to the toUpperCase even when not needed, which is likely the most common case (URL with http or https scheme). There *might* be a performance impact at runtime.",
      "revId": "4f4a24901e1a29192c5efbe382764ef9e477cc66",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b64332d_972ca6b0",
        "filename": "user/src/com/google/gwt/safehtml/shared/UriUtils.java",
        "patchSetId": 14
      },
      "lineNbr": 282,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-11-08T12:40:37Z",
      "side": 1,
      "message": "We\u0027re doing both toLowerCase and toUpperCase for all extra schemes, even when not needed (as is the case for \"tel\" for example).\n\nCould we either do like safe-html-types and introduce an enum rather than accepting arbitrary strings? and/or possibly introduce an interface with a \"boolean matches(String)\" method that extra schemes would implement as needed. For schemes containing chars that could be problematic (like a \"i\"), because URI schemes are limited to alphanum+dot+hyphen+plus, we could first validate the scheme before giving the lowercased version to the extra scheme matchers. That\u0027s extra work but I think this is an acceptable trade-off and wouldn\u0027t require the double comparison (and transformation!) in upper and lower case (what I don\u0027t want is to have negative impact on people *not* using the feature, which will be 99.999% GWT users)\n\nThe advantage to using a custom type for extra schemes is that one cannot erroneously pass input from the user (inherently unsafe) as a \"safe scheme\".\n\n interface SafeScheme {\n   boolean matches(String schemeLc);\n }\n\n enum SafeSchemes implements SafeScheme {\n   TEL(\"tel\"),\n   SMS(\"sms\");\n\n   private final schemeLc\n   @Override\n   public boolean matches(String schemeLc) {\n     return this.schemeLc.equals(schemeLc);\n   }\n }\n\n(or instead of an enum, use constants on the UriUtils class, similar to the HTTP methods in RequestBuilder)",
      "revId": "4f4a24901e1a29192c5efbe382764ef9e477cc66",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b64332d_775e2afe",
        "filename": "user/src/com/google/gwt/safehtml/shared/UriUtils.java",
        "patchSetId": 14
      },
      "lineNbr": 282,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-11-08T16:41:04Z",
      "side": 1,
      "message": "OK, looking at safe-html-types\u0027 implementation, it looks like I was over-paranoid: they simply toLowerCase (the locale-sensitive version!), and have that comment:\n\n    // If some Unicode character lower cases to something that ends up matching these ASCII ones,\n    // it\u0027s harmless.\n\nBTW, this is actually also what we\u0027re doing with our \"mailto\" and \"MAILTO\" checks, as they are or\u0027d, not and\u0027d; so all of \"mailto\", \"maılto\", \"MAILTO\" and \"MAİLTO\" (and all case variations, what matters here is the \"i\") would pass our current check, and we\u0027re then relying on the browser to properly reject \"maılto\" and \"MAİLTO\" (I previously misinterpreted this –by reading too fast– as that we would only want to match \"mailto\" and \"MAILTO\" and reject \"maılto\" and \"MAİLTO\"). You can find the original discussion in the original code review: https://gwt-code-reviews.appspot.com/771801, the goal was to avoid rejecting \"mailto\" and \"MAILTO\".\n\nNote that because safe-html-types uses the locale-sensitive toLowerCase, that means MAILTO in a Turkish locale wouldn\u0027t match (as it would be lowercased to maılto), but MAİLTO would (but then would be rejected by the browser or whatever handles the URL.)\n\nI tested the JavaScript\u0027s toLowerCase (which we end up using in GWT for toLowerCase(Locale.ROOT), using toLocaleLowerCase for toLocale() or toLocale(Locale.getDefault())) in Edge, IE11, Firefox and Chrome on a Windows 10 in a Turkish locale, and all of them correctly map \"I\" to \"i\" (note that Chrome maps İ to i̇ i.e. \"i\\u0307\", but we don\u0027t really care here). That means, in addition to what we observe in safe-html-types, that we could probably safely remove our \"MAILTO\" case and our need for toUpperCase.\n(fwiw, JavaScript\u0027s toUpperCase is OK in all browsers I tested: iıIİ → IIIİ)\n\nIn conclusion: +1 for removing the toUpperCase for the extraAllowedScheme in the latest patchset, and we might go farther and remove the one on MAILTO (it could change the behavior in browsers that don\u0027t implement toLowerCase properly, but I\u0027d bet there aren\u0027t that much, if any).",
      "parentUuid": "0b64332d_972ca6b0",
      "revId": "4f4a24901e1a29192c5efbe382764ef9e477cc66",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}