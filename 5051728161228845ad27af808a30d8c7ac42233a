{
  "comments": [
    {
      "key": {
        "uuid": "QnMbzwio",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/ast/JVisitor.java",
        "patchSetId": 4
      },
      "lineNbr": 844,
      "author": {
        "id": 5010
      },
      "writtenOn": "2013-03-01T23:34:05Z",
      "side": 1,
      "message": "Can you explain how we\u0027re going to preserve this constraint? It seems pretty easy to violate - all you have to do is visit the field\u0027s initializer or the method body, and it could have an anonymous inner class which has a nested JField or JMethod.\n\nPerhaps we should use a stack and have push/pop methods?",
      "revId": "5051728161228845ad27af808a30d8c7ac42233a",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "QoSEkzro",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/ast/JVisitor.java",
        "patchSetId": 4
      },
      "lineNbr": 844,
      "author": {
        "id": 5105
      },
      "writtenOn": "2013-03-02T00:04:58Z",
      "side": 1,
      "message": "In our java AST, (anonymous) inner classes are represented as top level classes (with a pointer to the parent class). Visitable nodes bellow JMethod (i.e. JMethodBody, JStatemente, JExpression and descendants) do not include JType (or derived), JMethod or JField. Whenever something in the method body refers to a field, method or class it does so through a reference node. During visits reference nodes break the chain so to speak (visit stops at references) (look at JMethodCall.traverse() or JFieldRef.traverse()).\n\nSo that is an invariant of the AST (which I agree might change, but I can document in the AST).\n\nFields initializers are not traversed as descendant of JField but as part if the $clinit() method (look at JField.traverse()).\n\nThe same is not true for JavaScriptAST where functions can be nested....",
      "parentUuid": "QnMbzwio",
      "revId": "5051728161228845ad27af808a30d8c7ac42233a",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "QnuQVmkw",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/ast/JVisitor.java",
        "patchSetId": 4
      },
      "lineNbr": 844,
      "author": {
        "id": 5010
      },
      "writtenOn": "2013-03-02T00:29:13Z",
      "side": 1,
      "message": "Okay, makes sense. I think it\u0027s a good idea to explain it here.\n\nPerhaps we should have some asserts to make the lifecycle clear:\n\nvoid enterField(JField f) {\n  assert f !\u003d null;  \n  assert currentField \u003d\u003d null;\n  currentField \u003d f;\n}\n\nvoid exitField(JField f) {\n  assert f !\u003d null;\n  assert currentField \u003d\u003d f;\n  currentField \u003d null;\n}",
      "parentUuid": "QoSEkzro",
      "revId": "5051728161228845ad27af808a30d8c7ac42233a",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "QnoQUpk0",
        "filename": "dev/core/test/com/google/gwt/dev/jjs/ast/JVisitorTest.java",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 5010
      },
      "writtenOn": "2013-03-02T00:29:13Z",
      "side": 1,
      "message": "When testing callbacks it\u0027s usually a good idea to make sure they are called the expected number of times and in the right order. Otherwise the asserts might not be reached. So I would do something like this:\n\nList\u003cString\u003e log \u003d new ArrayList\u003cString\u003e();\n\n   beginVisit(JStatement...) {\n     log.append(\"statement entered\");\n     ...\n   }\n   endVisit(JStatement...) {\n     log.append(\"statement exited\");\n     ...\n   }\n\n  ...\n\n  MoreAsserts.assertContentsInOrder(log,\n     \"statement entered\",\n     \"statement exited\");\n\n(I\u0027m not sure if we can use MoreAsserts in GWT tests. If not, perhaps create an equivalent utility method somewhere.)",
      "revId": "5051728161228845ad27af808a30d8c7ac42233a",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "QnqQPojg",
        "filename": "dev/core/test/com/google/gwt/dev/jjs/ast/JVisitorTest.java",
        "patchSetId": 4
      },
      "lineNbr": 71,
      "author": {
        "id": 5010
      },
      "writtenOn": "2013-03-02T00:29:13Z",
      "side": 1,
      "message": "perhaps put an anonymous inner class here to demonstrate how it works?",
      "revId": "5051728161228845ad27af808a30d8c7ac42233a",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}