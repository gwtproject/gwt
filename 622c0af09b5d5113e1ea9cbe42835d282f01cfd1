{
  "comments": [
    {
      "key": {
        "uuid": "bbcc0a0e_3962c6e5",
        "filename": "user/build.xml",
        "patchSetId": 4
      },
      "lineNbr": 154,
      "author": {
        "id": 5031
      },
      "writtenOn": "2019-02-09T12:32:21Z",
      "side": 1,
      "message": "Belongs to your follow up patch",
      "range": {
        "startLine": 154,
        "startChar": 108,
        "endLine": 154,
        "endChar": 122
      },
      "revId": "622c0af09b5d5113e1ea9cbe42835d282f01cfd1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd87b754_2471b42a",
        "filename": "user/super/com/google/gwt/emul/java/util/AbstractMap.java",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 7970
      },
      "writtenOn": "2019-02-05T07:59:23Z",
      "side": 1,
      "message": "Maybe update link?",
      "revId": "622c0af09b5d5113e1ea9cbe42835d282f01cfd1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8108dab9_90cfde8c",
        "filename": "user/super/com/google/gwt/emul/java/util/List.java",
        "patchSetId": 4
      },
      "lineNbr": 219,
      "author": {
        "id": 5031
      },
      "writtenOn": "2019-02-09T12:32:21Z",
      "side": 1,
      "message": "If someone passes in an array we might want to do a switch on the elements length and at least check if the array is empty to return Collections.emptyList() / List.of(). \n\nTechnically we could do that switch for up to 10 elements and delegate to List.of(..) implementations. Kind of depends on how slow Collections.unmodifiableList(new ArrayList\u003c\u003e(Arrays.asList(elements))) is for small element counts compared to multiple ArrayList.add() calls. Currently ArrayList.toArray(), used by ArrayList(Collection),  does a JS slice and stamps the resulting array. Array stamping might cost some time.",
      "range": {
        "startLine": 219,
        "startChar": 29,
        "endLine": 219,
        "endChar": 37
      },
      "revId": "622c0af09b5d5113e1ea9cbe42835d282f01cfd1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bcce2f9c_cf42935a",
        "filename": "user/super/com/google/gwt/emul/java/util/List.java",
        "patchSetId": 4
      },
      "lineNbr": 219,
      "author": {
        "id": 5130
      },
      "writtenOn": "2019-02-12T14:27:00Z",
      "side": 1,
      "message": "I suspect the switch/case on size would kill any gains from unrolling the loop, but I certainly agree at least for size 0 (and possible size 1) that it would be worth it. Does that seem reasonable?",
      "parentUuid": "8108dab9_90cfde8c",
      "range": {
        "startLine": 219,
        "startChar": 29,
        "endLine": 219,
        "endChar": 37
      },
      "revId": "622c0af09b5d5113e1ea9cbe42835d282f01cfd1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40a3dee0_b82e37ef",
        "filename": "user/super/com/google/gwt/emul/java/util/List.java",
        "patchSetId": 4
      },
      "lineNbr": 223,
      "author": {
        "id": 7970
      },
      "writtenOn": "2019-02-05T07:59:23Z",
      "side": 1,
      "message": "Is the `new ArrayList` necessary here?",
      "revId": "622c0af09b5d5113e1ea9cbe42835d282f01cfd1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e842f1f_4dd0ccfc",
        "filename": "user/super/com/google/gwt/emul/java/util/List.java",
        "patchSetId": 4
      },
      "lineNbr": 223,
      "author": {
        "id": 5031
      },
      "writtenOn": "2019-02-09T12:32:21Z",
      "side": 1,
      "message": "It is, because Arrays.asList() does not copy the input array, so modifications to it would propagate to the returned immutable List.",
      "parentUuid": "40a3dee0_b82e37ef",
      "revId": "622c0af09b5d5113e1ea9cbe42835d282f01cfd1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9af7048f_62588201",
        "filename": "user/super/com/google/gwt/emul/java/util/Map.java",
        "patchSetId": 4
      },
      "lineNbr": 238,
      "author": {
        "id": 5031
      },
      "writtenOn": "2019-02-09T12:32:21Z",
      "side": 1,
      "message": "Always implicitly calling entry.getKey().toString() for the potential checkArgument error message might be expensive. Same for all other methods added to the interface but given they only have up to 10 keys it is probably ok for the other methods.",
      "revId": "622c0af09b5d5113e1ea9cbe42835d282f01cfd1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2eda0a8b_a9edc4f5",
        "filename": "user/super/com/google/gwt/emul/java/util/Map.java",
        "patchSetId": 4
      },
      "lineNbr": 238,
      "author": {
        "id": 5130
      },
      "writtenOn": "2019-02-12T14:27:00Z",
      "side": 1,
      "message": "Yeah, that\u0027s not ideal, but I\u0027m not sure of a good way to resolve that. Inlining the check either makes it hard to be optional, unless I also bring in the system properties, but does mean that I can split the boolean check and toString operation.\n\nAlternatively, just throw the exception with a simple constant message.\n\nAlternatively, add an overload to checkArgument which takes an Object and toStrings it as needed.",
      "parentUuid": "9af7048f_62588201",
      "revId": "622c0af09b5d5113e1ea9cbe42835d282f01cfd1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fb6a6e6_02e9fa0f",
        "filename": "user/super/com/google/gwt/emul/java/util/Set.java",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 5031
      },
      "writtenOn": "2019-02-09T12:32:21Z",
      "side": 1,
      "message": "Maybe remove check here and add a shortcut in the beginning of method: checkArgument(!Objects.equals(e1,e2))",
      "revId": "622c0af09b5d5113e1ea9cbe42835d282f01cfd1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7070ce9d_c6b6b14e",
        "filename": "user/super/com/google/gwt/emul/java/util/Set.java",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 7970
      },
      "writtenOn": "2019-02-05T07:59:23Z",
      "side": 1,
      "message": "`new HashSet(3)` ? (same in other factory methods)",
      "revId": "622c0af09b5d5113e1ea9cbe42835d282f01cfd1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ee0cead_957fe616",
        "filename": "user/super/com/google/gwt/emul/java/util/Set.java",
        "patchSetId": 4
      },
      "lineNbr": 215,
      "author": {
        "id": 5031
      },
      "writtenOn": "2019-02-09T12:32:21Z",
      "side": 1,
      "message": "new HashSet\u003c\u003e(elements.length) and special case at least elements.length \u003d\u003d 0 to return Collections.emptySet() / Set.of().",
      "range": {
        "startLine": 215,
        "startChar": 21,
        "endLine": 215,
        "endChar": 36
      },
      "revId": "622c0af09b5d5113e1ea9cbe42835d282f01cfd1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b3ce686_7fdb1510",
        "filename": "user/test/com/google/gwt/emultest/java9/util/ListTest.java",
        "patchSetId": 4
      },
      "lineNbr": 126,
      "author": {
        "id": 5031
      },
      "writtenOn": "2019-02-09T12:32:21Z",
      "side": 1,
      "message": "Hmm then this should be fixed. All mutation methods should throw even if the List/Set/Map is empty.",
      "range": {
        "startLine": 124,
        "startChar": 6,
        "endLine": 126,
        "endChar": 42
      },
      "revId": "622c0af09b5d5113e1ea9cbe42835d282f01cfd1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a88497f_e1a0e14c",
        "filename": "user/test/com/google/gwt/emultest/java9/util/ListTest.java",
        "patchSetId": 4
      },
      "lineNbr": 126,
      "author": {
        "id": 5130
      },
      "writtenOn": "2019-02-12T14:27:00Z",
      "side": 1,
      "message": "I\u0027ll recheck, but I thought that this is what I found the JRE to do as well. If not, I\u0027ll file an issue to follow up on later, since this current implementation doesn\u0027t create its own immutable types, but uses the existing ones.\n\nIn theory, we should actually have our own immutable non-null-contents types, so we other copy operations can just return the same instance.",
      "parentUuid": "9b3ce686_7fdb1510",
      "range": {
        "startLine": 124,
        "startChar": 6,
        "endLine": 126,
        "endChar": 42
      },
      "revId": "622c0af09b5d5113e1ea9cbe42835d282f01cfd1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f10aa21_7fcbf1c2",
        "filename": "user/test/com/google/gwt/emultest/java9/util/SetTest.java",
        "patchSetId": 4
      },
      "lineNbr": 173,
      "author": {
        "id": 7970
      },
      "writtenOn": "2019-02-05T07:59:23Z",
      "side": 1,
      "message": "Maybe extract in some \"TestUtils/TestAsserts\"?",
      "range": {
        "startLine": 157,
        "startChar": 0,
        "endLine": 173,
        "endChar": 3
      },
      "revId": "622c0af09b5d5113e1ea9cbe42835d282f01cfd1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ab1b957_a9fc7675",
        "filename": "user/test/com/google/gwt/emultest/java9/util/SetTest.java",
        "patchSetId": 4
      },
      "lineNbr": 173,
      "author": {
        "id": 5031
      },
      "writtenOn": "2019-02-09T12:32:21Z",
      "side": 1,
      "message": "EmulTestBase already has some helper asserts so these methods here could move up to the base class",
      "parentUuid": "9f10aa21_7fcbf1c2",
      "range": {
        "startLine": 157,
        "startChar": 0,
        "endLine": 173,
        "endChar": 3
      },
      "revId": "622c0af09b5d5113e1ea9cbe42835d282f01cfd1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": true
    }
  ]
}