{
  "comments": [
    {
      "key": {
        "uuid": "6d1bb95b_437a06b6",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/ControlFlowRecorder.java",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 5001
      },
      "writtenOn": "2015-05-28T00:31:00Z",
      "side": 1,
      "message": "Shouldn\u0027t this be inside the if (x.isExported()) block? A constructor doesn\u0027t instantiate the class in non-exported code unless targeted by JNewInstance, or referenced by JSNI.\n\nWill this have a substantial impact on the amount of code rescued and loaded up in SDM in Chrome? Remember, the devtools tends to choke on really big code.",
      "range": {
        "startLine": 146,
        "startChar": 27,
        "endLine": 146,
        "endChar": 28
      },
      "revId": "6bcf432f8a63cfaf76c715ff5cf21cf649a9fb11",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d1bb95b_0cb83b25",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/ControlFlowRecorder.java",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 5305
      },
      "writtenOn": "2015-05-28T05:19:06Z",
      "side": 1,
      "message": "Actually constructors can only be \n1) target of new \n2) called from other constructors of the same class (in which case the type is already instantiated)\n3) called from subclass constructors and we consider supertypes instantiated if subtypes are both in CFA and in RTA (removed the code rom RTA was instantiating all supertypes on subtype instantiatiaton)\n4) exported and called from JS (this was a missing instantiation before)\n5) the rare case in which they are called from JSNI but are not target of a new (this is the only case that is added and not needed but it should not contribute to (almost) any extra code).\n\nI don\u0027t think I am missing something, am I? The new code is simpler an covers exactly the same cases as before + the missing exported case (+ the potential calls from JSNI without new)",
      "parentUuid": "6d1bb95b_437a06b6",
      "range": {
        "startLine": 146,
        "startChar": 27,
        "endLine": 146,
        "endChar": 28
      },
      "revId": "6bcf432f8a63cfaf76c715ff5cf21cf649a9fb11",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9f6d849_9dffe3a2",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/ControlFlowRecorder.java",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 5001
      },
      "writtenOn": "2015-05-28T23:04:05Z",
      "side": 1,
      "message": "But given the way this is written now, isn\u0027t this identical to just considering every concrete class as instantiated? What non-interface class, in this scenario, would not be marked instantiated? Those with a banned constructor? \n\nIn that case, couldn\u0027t you just get rid of the recordCurrentMethodInstantiatesType data and just make the assumption that all concrete types are instantiated?\n\nIt seems like this data is not superfluous.",
      "parentUuid": "6d1bb95b_0cb83b25",
      "range": {
        "startLine": 146,
        "startChar": 27,
        "endLine": 146,
        "endChar": 28
      },
      "revId": "6bcf432f8a63cfaf76c715ff5cf21cf649a9fb11",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d54fde2_ffcc6b0a",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/ControlFlowRecorder.java",
        "patchSetId": 2
      },
      "lineNbr": 148,
      "author": {
        "id": 5410
      },
      "writtenOn": "2015-05-28T00:27:13Z",
      "side": 1,
      "message": "that\u0027s spelled \"instantiates\"",
      "range": {
        "startLine": 148,
        "startChar": 6,
        "endLine": 148,
        "endChar": 40
      },
      "revId": "6bcf432f8a63cfaf76c715ff5cf21cf649a9fb11",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d1bb95b_feffeef7",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/ControlFlowRecorder.java",
        "patchSetId": 2
      },
      "lineNbr": 148,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-05-28T21:44:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0d54fde2_ffcc6b0a",
      "range": {
        "startLine": 148,
        "startChar": 6,
        "endLine": 148,
        "endChar": 40
      },
      "revId": "6bcf432f8a63cfaf76c715ff5cf21cf649a9fb11",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed56c9ec_788b30ef",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/ControlFlowRecorder.java",
        "patchSetId": 2
      },
      "lineNbr": 212,
      "author": {
        "id": 5410
      },
      "writtenOn": "2015-05-28T00:27:13Z",
      "side": 1,
      "message": "is this null check actually needed?",
      "range": {
        "startLine": 212,
        "startChar": 0,
        "endLine": 212,
        "endChar": 4
      },
      "revId": "6bcf432f8a63cfaf76c715ff5cf21cf649a9fb11",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d1bb95b_cc86236b",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/ControlFlowRecorder.java",
        "patchSetId": 2
      },
      "lineNbr": 212,
      "author": {
        "id": 5305
      },
      "writtenOn": "2015-05-28T05:19:06Z",
      "side": 1,
      "message": "Well that was a choice. Either there or guarding the recursion on superclass. You choice.",
      "parentUuid": "ed56c9ec_788b30ef",
      "range": {
        "startLine": 212,
        "startChar": 0,
        "endLine": 212,
        "endChar": 4
      },
      "revId": "6bcf432f8a63cfaf76c715ff5cf21cf649a9fb11",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d1bb95b_9e98baf2",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/ControlFlowRecorder.java",
        "patchSetId": 2
      },
      "lineNbr": 212,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-05-28T21:44:46Z",
      "side": 1,
      "message": "Guarded the recursion on the supertype instead. It reads better.",
      "parentUuid": "6d1bb95b_cc86236b",
      "range": {
        "startLine": 212,
        "startChar": 0,
        "endLine": 212,
        "endChar": 4
      },
      "revId": "6bcf432f8a63cfaf76c715ff5cf21cf649a9fb11",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}