{
  "comments": [
    {
      "key": {
        "uuid": "1dc45060_5e56c9d7",
        "filename": "user/super/com/google/gwt/emul/java/lang/Math.java",
        "patchSetId": 1
      },
      "lineNbr": 173,
      "author": {
        "id": 5055
      },
      "writtenOn": "2016-02-15T08:15:36Z",
      "side": 1,
      "message": "I feel like also for int and long we should use the NativeMath method, casting the result. Otherwise the result could be not the expected:\n\n    NaN \u003c 1 ? NaN : 1  -\u003e 1\n    Math.min(NaN, 1) -\u003e NaN",
      "revId": "6c5a1062c3723f9936ecb424f39620c2db2590bd",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1dc45060_3ed66d70",
        "filename": "user/super/com/google/gwt/emul/java/lang/Math.java",
        "patchSetId": 1
      },
      "lineNbr": 173,
      "author": {
        "id": 5031
      },
      "writtenOn": "2016-02-15T09:33:40Z",
      "side": 1,
      "message": "Well int and long do not have NaN. As soon as you use Double/Float.NaN in either parameter the double/float variant should be used. So the current int/long variants work correctly.",
      "parentUuid": "1dc45060_5e56c9d7",
      "revId": "6c5a1062c3723f9936ecb424f39620c2db2590bd",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}