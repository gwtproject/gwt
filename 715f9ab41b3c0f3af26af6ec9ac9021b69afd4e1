{
  "comments": [
    {
      "key": {
        "uuid": "f5ee6ed8_02ce5661",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 5031
      },
      "writtenOn": "2017-03-24T10:50:11Z",
      "side": 1,
      "message": "Replace with: \n\n\nMake Array.sort(float[]/double[]) JDK compliant",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 66
      },
      "revId": "715f9ab41b3c0f3af26af6ec9ac9021b69afd4e1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0ded379_2d4ec44a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 5031
      },
      "writtenOn": "2017-03-24T10:50:11Z",
      "side": 1,
      "message": "Replace with:\n\n\nBug: #9504\nBug-Link: https://github.com/gwtproject/gwt/issues/9504\nChange-Id: I2ad9abffbd38e70ba7d5a20011392d879383b7b8",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 52
      },
      "revId": "715f9ab41b3c0f3af26af6ec9ac9021b69afd4e1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fd5521c3_e718a331",
        "filename": "user/super/com/google/gwt/emul/java/util/Arrays.java",
        "patchSetId": 1
      },
      "lineNbr": 1764,
      "author": {
        "id": 5031
      },
      "writtenOn": "2017-03-24T10:50:11Z",
      "side": 1,
      "message": "JavaDoc of Arrays.sort() states that it sticks to the ordering defined by Double/Float.compareTo(Double/Float). There is already a patch to fix Double/Float.compareTo() regarding +-0:\n\nhttps://gwt-review.googlesource.com/#/c/14876/\n\nSo I guess we could just call compareTo here?\n\n\nAlternatively we could handle +/-0 correctly by using 1/a and 1/b which would result in Infinity for 0 and -Infinity for -0 so that both cases can be distinguished then. Or we could use Object.is() and install a polyfill if needed (which basically does the 1/a solution internally):\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n\n\nWondering what others think.",
      "range": {
        "startLine": 1764,
        "startChar": 29,
        "endLine": 1764,
        "endChar": 52
      },
      "revId": "715f9ab41b3c0f3af26af6ec9ac9021b69afd4e1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3be679d1_811a509f",
        "filename": "user/super/com/google/gwt/emul/java/util/Arrays.java",
        "patchSetId": 1
      },
      "lineNbr": 1764,
      "author": {
        "id": 5110
      },
      "writtenOn": "2017-03-24T19:45:26Z",
      "side": 1,
      "message": "I agree it should use Double.compare and follow the pattern that we used for the long.",
      "parentUuid": "fd5521c3_e718a331",
      "range": {
        "startLine": 1764,
        "startChar": 29,
        "endLine": 1764,
        "endChar": 52
      },
      "revId": "715f9ab41b3c0f3af26af6ec9ac9021b69afd4e1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}