{
  "comments": [
    {
      "key": {
        "uuid": "414a3e43_67d47069",
        "filename": "user/test/com/google/gwt/core/client/interop/JsFunctionTest.java",
        "patchSetId": 2
      },
      "lineNbr": 213,
      "author": {
        "id": 5110
      },
      "writtenOn": "2015-03-13T02:11:33Z",
      "side": 1,
      "message": "this looks incorrect. Is this passing right now?",
      "range": {
        "startLine": 207,
        "startChar": 0,
        "endLine": 213,
        "endChar": 5
      },
      "revId": "7812423c823de0d0b779c9751e6f36bc8b12b94d",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "414a3e43_3902903a",
        "filename": "user/test/com/google/gwt/core/client/interop/JsFunctionTest.java",
        "patchSetId": 2
      },
      "lineNbr": 213,
      "author": {
        "id": 7701
      },
      "writtenOn": "2015-03-13T04:29:14Z",
      "side": 1,
      "message": "Yes, it is passing. Why it is incorrect? object is of MyJsFunctionInterfaceImpl, which is not a JsType. In current implementation, it should be false. Do you think it should not?",
      "parentUuid": "414a3e43_67d47069",
      "range": {
        "startLine": 207,
        "startChar": 0,
        "endLine": 213,
        "endChar": 5
      },
      "revId": "7812423c823de0d0b779c9751e6f36bc8b12b94d",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "012da676_cb71a962",
        "filename": "user/test/com/google/gwt/core/client/interop/JsFunctionTest.java",
        "patchSetId": 2
      },
      "lineNbr": 213,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-03-13T16:36:45Z",
      "side": 1,
      "message": "This is very confusing. Here are the casting rules as I understand them to be:\n\n(JSO) anything that is not a Java Object  (from the current module/app, this also allows a gwt library to be used as a javascript library)\n\n(JSType) anything that is not a Java Object  + Java Objects that implement JSType.\n\n(JSTypeWProto) anything that is not a Java Object but return true to \"instanceof Proto\"  + Java Objects that implement JSTypeWProto (?)\n\n(JSFunctionIFace) anything that responds true to \"typeof \u003d \u0027function\u0027\" (this will include Java Object that implement an JsFunction interface).\n\n\nBy these rules, the above code is correct, you can not cast a java object to an unrelated JSType interface (in the case that both are part of the same app, objects in the same module/app have a typeMarker pointing to a function in JCHSU , so foreing objects look like js objects from this perspective)",
      "parentUuid": "414a3e43_3902903a",
      "range": {
        "startLine": 207,
        "startChar": 0,
        "endLine": 213,
        "endChar": 5
      },
      "revId": "7812423c823de0d0b779c9751e6f36bc8b12b94d",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "012da676_ce6b77a1",
        "filename": "user/test/com/google/gwt/core/client/interop/JsFunctionTest.java",
        "patchSetId": 2
      },
      "lineNbr": 213,
      "author": {
        "id": 7701
      },
      "writtenOn": "2015-03-13T17:19:20Z",
      "side": 1,
      "message": "It is also what I understand them to be. Goktug has different opinions?",
      "parentUuid": "012da676_cb71a962",
      "range": {
        "startLine": 207,
        "startChar": 0,
        "endLine": 213,
        "endChar": 5
      },
      "revId": "7812423c823de0d0b779c9751e6f36bc8b12b94d",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "414a3e43_c1942c18",
        "filename": "user/test/com/google/gwt/core/client/interop/JsFunctionTest.java",
        "patchSetId": 2
      },
      "lineNbr": 220,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-03-13T01:48:13Z",
      "side": 1,
      "message": "It would be more interesting somethining like\n\n@JsFunction\ninterface I1 { \n   int m();\n }\n\n@JsFunction\ninterface I2 {\n  int n();\n }\n\n\nclass A implements I1 {\n  public int m() { return 1; }\n}\n\nprivate int callfn(JavaScriptObject fn) /*-{\n  return fn();\n\n}-*/\n\nvoid testCast_crossCastJavaObject() {\n Object o \u003d new A();\n A a \u003d (A) o;\n assertEquals(a.m(), callfn(a));\n I1 i1 \u003d (I1) o;\n assertEquals(a.m(), i1.m());\n I2 i2 \u003d (I2) o;\n // this is the surprising bit, but should work as this is how it is defined in the spec.\n assertEquals(a.m(), i2.n());",
      "revId": "7812423c823de0d0b779c9751e6f36bc8b12b94d",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "414a3e43_c7da7c99",
        "filename": "user/test/com/google/gwt/core/client/interop/JsFunctionTest.java",
        "patchSetId": 2
      },
      "lineNbr": 220,
      "author": {
        "id": 5110
      },
      "writtenOn": "2015-03-13T02:11:33Z",
      "side": 1,
      "message": "We talked with Roberto and actually the following is what we want to test:\n\nvoid testCast_crossCastJavaInstance() {\n  Object o \u003d new A();\n  assertEquals(1, ((I2) o).n());\n  assertSame((I1)o, (I2)o);\n}",
      "parentUuid": "414a3e43_c1942c18",
      "revId": "7812423c823de0d0b779c9751e6f36bc8b12b94d",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "414a3e43_a7fe58e8",
        "filename": "user/test/com/google/gwt/core/client/interop/JsFunctionTest.java",
        "patchSetId": 2
      },
      "lineNbr": 244,
      "author": {
        "id": 5110
      },
      "writtenOn": "2015-03-13T02:11:33Z",
      "side": 1,
      "message": "This also looks incorrect.",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 244,
        "endChar": 58
      },
      "revId": "7812423c823de0d0b779c9751e6f36bc8b12b94d",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}