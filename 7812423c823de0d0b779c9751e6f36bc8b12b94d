{
  "comments": [
    {
      "key": {
        "uuid": "414a3e43_67d47069",
        "filename": "user/test/com/google/gwt/core/client/interop/JsFunctionTest.java",
        "patchSetId": 2
      },
      "lineNbr": 213,
      "author": {
        "id": 5110
      },
      "writtenOn": "2015-03-13T02:11:33Z",
      "side": 1,
      "message": "this looks incorrect. Is this passing right now?",
      "range": {
        "startLine": 207,
        "startChar": 0,
        "endLine": 213,
        "endChar": 5
      },
      "revId": "7812423c823de0d0b779c9751e6f36bc8b12b94d",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "414a3e43_3902903a",
        "filename": "user/test/com/google/gwt/core/client/interop/JsFunctionTest.java",
        "patchSetId": 2
      },
      "lineNbr": 213,
      "author": {
        "id": 7701
      },
      "writtenOn": "2015-03-13T04:29:14Z",
      "side": 1,
      "message": "Yes, it is passing. Why it is incorrect? object is of MyJsFunctionInterfaceImpl, which is not a JsType. In current implementation, it should be false. Do you think it should not?",
      "parentUuid": "414a3e43_67d47069",
      "range": {
        "startLine": 207,
        "startChar": 0,
        "endLine": 213,
        "endChar": 5
      },
      "revId": "7812423c823de0d0b779c9751e6f36bc8b12b94d",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "012da676_cb71a962",
        "filename": "user/test/com/google/gwt/core/client/interop/JsFunctionTest.java",
        "patchSetId": 2
      },
      "lineNbr": 213,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-03-13T16:36:45Z",
      "side": 1,
      "message": "This is very confusing. Here are the casting rules as I understand them to be:\n\n(JSO) anything that is not a Java Object  (from the current module/app, this also allows a gwt library to be used as a javascript library)\n\n(JSType) anything that is not a Java Object  + Java Objects that implement JSType.\n\n(JSTypeWProto) anything that is not a Java Object but return true to \"instanceof Proto\"  + Java Objects that implement JSTypeWProto (?)\n\n(JSFunctionIFace) anything that responds true to \"typeof \u003d \u0027function\u0027\" (this will include Java Object that implement an JsFunction interface).\n\n\nBy these rules, the above code is correct, you can not cast a java object to an unrelated JSType interface (in the case that both are part of the same app, objects in the same module/app have a typeMarker pointing to a function in JCHSU , so foreing objects look like js objects from this perspective)",
      "parentUuid": "414a3e43_3902903a",
      "range": {
        "startLine": 207,
        "startChar": 0,
        "endLine": 213,
        "endChar": 5
      },
      "revId": "7812423c823de0d0b779c9751e6f36bc8b12b94d",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "012da676_ce6b77a1",
        "filename": "user/test/com/google/gwt/core/client/interop/JsFunctionTest.java",
        "patchSetId": 2
      },
      "lineNbr": 213,
      "author": {
        "id": 7701
      },
      "writtenOn": "2015-03-13T17:19:20Z",
      "side": 1,
      "message": "It is also what I understand them to be. Goktug has different opinions?",
      "parentUuid": "012da676_cb71a962",
      "range": {
        "startLine": 207,
        "startChar": 0,
        "endLine": 213,
        "endChar": 5
      },
      "revId": "7812423c823de0d0b779c9751e6f36bc8b12b94d",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "012da676_37f622df",
        "filename": "user/test/com/google/gwt/core/client/interop/JsFunctionTest.java",
        "patchSetId": 2
      },
      "lineNbr": 213,
      "author": {
        "id": 5110
      },
      "writtenOn": "2015-03-13T19:04:50Z",
      "side": 1,
      "message": "As we discussed offline, I updated the the spec to make the clarification. The issue is JsType are loose contracts that it would be surprising to enforce java semantics just because the object is happen to be declared in java.\nA good way to illustrate this issue is WebComponents. If enforce such rules, then if the component is implemented by a third party polymer or x-tag GWT wrapper will cause runtime error when we traverse children; just because they are developed in java.",
      "parentUuid": "012da676_ce6b77a1",
      "range": {
        "startLine": 207,
        "startChar": 0,
        "endLine": 213,
        "endChar": 5
      },
      "revId": "7812423c823de0d0b779c9751e6f36bc8b12b94d",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "012da676_428af6e8",
        "filename": "user/test/com/google/gwt/core/client/interop/JsFunctionTest.java",
        "patchSetId": 2
      },
      "lineNbr": 213,
      "author": {
        "id": 5001
      },
      "writtenOn": "2015-03-13T20:36:33Z",
      "side": 1,
      "message": "I guess a better way to state this is that a Javascript function (hand written in JS) can do double duty:\n\n1) it can cast as JSO to any SingleJso interface, JSO overlay type, or JsType without prototype, because, after all, it\u0027s just a JS obj without a type marker.\n\n2) it can cast check as a SAM interface\n\nSince our SAM Java implementations are effectively JS function objects, they should behave the same way.\n\nThe only weird caveat is that it intuitively seems like you should have to put an @JsType on the @JsFunction interface in addition.\n\nWhy? Because we don\u0027t allow these semantics for the old JSO Single Jso System.\n\ninterface Function { ... }\nclass JsFunction implements Function extends JSO {\n  ...\n}\n\nclass JavaFunction implements Function { ... }\n\n\n(HTMLElement) (jsFunction) \u003d\u003e true\n(HTMLElement) (javaFunction) \u003d\u003e CCE",
      "parentUuid": "012da676_37f622df",
      "range": {
        "startLine": 207,
        "startChar": 0,
        "endLine": 213,
        "endChar": 5
      },
      "revId": "7812423c823de0d0b779c9751e6f36bc8b12b94d",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "012da676_7d831b9b",
        "filename": "user/test/com/google/gwt/core/client/interop/JsFunctionTest.java",
        "patchSetId": 2
      },
      "lineNbr": 213,
      "author": {
        "id": 5110
      },
      "writtenOn": "2015-03-13T21:32:06Z",
      "side": 1,
      "message": "(HTMLElement) (javaFunction)\ndoesn\u0027t throw exception if HTMLElement doesn\u0027t have prototype. You can cast anything to a JsType.",
      "parentUuid": "012da676_428af6e8",
      "range": {
        "startLine": 207,
        "startChar": 0,
        "endLine": 213,
        "endChar": 5
      },
      "revId": "7812423c823de0d0b779c9751e6f36bc8b12b94d",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "012da676_dddfa786",
        "filename": "user/test/com/google/gwt/core/client/interop/JsFunctionTest.java",
        "patchSetId": 2
      },
      "lineNbr": 213,
      "author": {
        "id": 7701
      },
      "writtenOn": "2015-03-13T21:40:36Z",
      "side": 1,
      "message": "It does throw an exception in current implementation. We will change it in another patch, right?",
      "parentUuid": "012da676_7d831b9b",
      "range": {
        "startLine": 207,
        "startChar": 0,
        "endLine": 213,
        "endChar": 5
      },
      "revId": "7812423c823de0d0b779c9751e6f36bc8b12b94d",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "012da676_bd8d9384",
        "filename": "user/test/com/google/gwt/core/client/interop/JsFunctionTest.java",
        "patchSetId": 2
      },
      "lineNbr": 213,
      "author": {
        "id": 5110
      },
      "writtenOn": "2015-03-13T21:45:24Z",
      "side": 1,
      "message": "Yes, sorry. I meant it should\u0027t do that in the future :)",
      "parentUuid": "012da676_dddfa786",
      "range": {
        "startLine": 207,
        "startChar": 0,
        "endLine": 213,
        "endChar": 5
      },
      "revId": "7812423c823de0d0b779c9751e6f36bc8b12b94d",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2639e0d0_f1f5e8d0",
        "filename": "user/test/com/google/gwt/core/client/interop/JsFunctionTest.java",
        "patchSetId": 2
      },
      "lineNbr": 213,
      "author": {
        "id": 5001
      },
      "writtenOn": "2015-03-13T21:56:49Z",
      "side": 1,
      "message": "Goktug, you misunderstand, I\u0027m talking about regular JSOs and SingleJsoImpl interfaces, not the JsInterop stuff.\n\nThe semantics of \"any JSO can cross-cast to any other JSO\" and \"JSO interfaces can cross cast to other JSO interfaces\" doesn\u0027t extend to concrete implementors of a JSO itnerface. \n\nIn the old GWT overlay system, a concrete Java object is always checked for it\u0027s typeMarker, and if it has one, then the castableTypeMap becomes the source of truth.\n\n\nWhat I\u0027m saying is, your proposed changes diverges from the way we treated JSO interfaces and JSOs in the past with respect to concrete Java implementors of JSO interfaces.",
      "parentUuid": "012da676_7d831b9b",
      "range": {
        "startLine": 207,
        "startChar": 0,
        "endLine": 213,
        "endChar": 5
      },
      "revId": "7812423c823de0d0b779c9751e6f36bc8b12b94d",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "660f5879_5bcb5e23",
        "filename": "user/test/com/google/gwt/core/client/interop/JsFunctionTest.java",
        "patchSetId": 2
      },
      "lineNbr": 213,
      "author": {
        "id": 5110
      },
      "writtenOn": "2015-03-17T00:56:32Z",
      "side": 1,
      "message": "\u003e What I\u0027m saying is, your proposed changes diverges from the way we treated JSO interfaces and JSOs in the past with respect to concrete Java implementors of JSO interfaces.\n\nYes that\u0027s correct. The part I didn\u0027t understand is if you are objecting to suggested behavior or not? :)",
      "parentUuid": "2639e0d0_f1f5e8d0",
      "range": {
        "startLine": 207,
        "startChar": 0,
        "endLine": 213,
        "endChar": 5
      },
      "revId": "7812423c823de0d0b779c9751e6f36bc8b12b94d",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "414a3e43_c1942c18",
        "filename": "user/test/com/google/gwt/core/client/interop/JsFunctionTest.java",
        "patchSetId": 2
      },
      "lineNbr": 220,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-03-13T01:48:13Z",
      "side": 1,
      "message": "It would be more interesting somethining like\n\n@JsFunction\ninterface I1 { \n   int m();\n }\n\n@JsFunction\ninterface I2 {\n  int n();\n }\n\n\nclass A implements I1 {\n  public int m() { return 1; }\n}\n\nprivate int callfn(JavaScriptObject fn) /*-{\n  return fn();\n\n}-*/\n\nvoid testCast_crossCastJavaObject() {\n Object o \u003d new A();\n A a \u003d (A) o;\n assertEquals(a.m(), callfn(a));\n I1 i1 \u003d (I1) o;\n assertEquals(a.m(), i1.m());\n I2 i2 \u003d (I2) o;\n // this is the surprising bit, but should work as this is how it is defined in the spec.\n assertEquals(a.m(), i2.n());",
      "revId": "7812423c823de0d0b779c9751e6f36bc8b12b94d",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "414a3e43_c7da7c99",
        "filename": "user/test/com/google/gwt/core/client/interop/JsFunctionTest.java",
        "patchSetId": 2
      },
      "lineNbr": 220,
      "author": {
        "id": 5110
      },
      "writtenOn": "2015-03-13T02:11:33Z",
      "side": 1,
      "message": "We talked with Roberto and actually the following is what we want to test:\n\nvoid testCast_crossCastJavaInstance() {\n  Object o \u003d new A();\n  assertEquals(1, ((I2) o).n());\n  assertSame((I1)o, (I2)o);\n}",
      "parentUuid": "414a3e43_c1942c18",
      "revId": "7812423c823de0d0b779c9751e6f36bc8b12b94d",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "414a3e43_a7fe58e8",
        "filename": "user/test/com/google/gwt/core/client/interop/JsFunctionTest.java",
        "patchSetId": 2
      },
      "lineNbr": 244,
      "author": {
        "id": 5110
      },
      "writtenOn": "2015-03-13T02:11:33Z",
      "side": 1,
      "message": "This also looks incorrect.",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 244,
        "endChar": 58
      },
      "revId": "7812423c823de0d0b779c9751e6f36bc8b12b94d",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}