{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "039298eb_ac970e86",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 5030
      },
      "writtenOn": "2021-11-06T13:16:02Z",
      "side": 1,
      "message": "Should they be marked as @Deprecated as a signal? (both for GWT maintainers that they were only left in place for backwards compatibility, and for downstream project maintainers that they should try to remove their uses)\nOr do you intend to keep them ad vitam? (given the ongoing move to org.gwtproject)",
      "range": {
        "startLine": 16,
        "startChar": 24,
        "endLine": 18,
        "endChar": 11
      },
      "revId": "8b248e86843d29d5c22c5ccf5f57b1b53d28b9f7",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfdc7ce0_154a7781",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 5130
      },
      "writtenOn": "2021-11-06T19:15:22Z",
      "side": 1,
      "message": "On the one hand, it does seem reasonable to keep the classes around if used by downstream projects. On the other hand, I offer two arguments:\n\n* IE6/7 were \"more alive\" when we cut those browsers off in ~2014 than IE8/9/10 are today, as far as I can tell - XP lived for a very long time, and as I recall it was still possible to run IE7 in Vista (possibly it was the default version for some builds?)\n* If we leave the classes in place to make downstream libraries easier to handle, then the additional selection properties for ie8, ie9, ie10 must remain too, though we could still leave them out of the defaults. Otherwise, downstream .gwt.xml files that offer rebind rules that handle user.agent\u003die8 etc will need to also be updated.\n\nI\u0027m amenable to either path, though at the very least I believe that the rebind rules should be removed and the non-public (using your definition) types/members should be removed. If the goal is _only_ to allow downstream projects to remain compatible, we could take the further step of removing any implementation.\n\nI\u0027ll also note that the last patch, we did make some breaking changes even to the classes that remained, such as renaming FormPanelImplIE6 to FormPanelIE8, deleting PopupImplIe6. \n\nOne final option for consideration: redefine \"public\" above, instead of \"visible and extendable in downstream code\" to mean \"listed as part of the public api\", i.e. only types and members that the apichecker noticed and disapproved of.\n\nSo, three proposed paths here (ordered very roughly by descending preference, but I think all are reasonable enough to consider):\n* Leave the patch as-is, downstream projects that still \"support\" ie8-10 may make some small changes\n* Restore the extends-property declarations (though add a set-property to avoid ie8-10 being enabled by default), restore any \"public\" type that a downstream project might have extended, mark all such types as Deprecated\n* Optional extra step for the last option , remove implementation of any leftover dead/deprecated types. This isn\u0027t too serious of an option, but we are quite confident at this point that these browsers do not matter, and this move would seek to maintain only the ability to compile in downstream projects.",
      "parentUuid": "039298eb_ac970e86",
      "range": {
        "startLine": 16,
        "startChar": 24,
        "endLine": 18,
        "endChar": 11
      },
      "revId": "8b248e86843d29d5c22c5ccf5f57b1b53d28b9f7",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a248ba90_608d7c13",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 5030
      },
      "writtenOn": "2021-11-07T00:23:27Z",
      "side": 1,
      "message": "Ah, I may have been misunderstood: I meant annotating the classes that you did leave here for backwards compatibility, not annotating *instead* of removing.",
      "parentUuid": "cfdc7ce0_154a7781",
      "range": {
        "startLine": 16,
        "startChar": 24,
        "endLine": 18,
        "endChar": 11
      },
      "revId": "8b248e86843d29d5c22c5ccf5f57b1b53d28b9f7",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3db6f87_091bc2bc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 5130
      },
      "writtenOn": "2021-11-18T17:54:35Z",
      "side": 1,
      "message": "Okay, this might be overboard, but take a look - when a rebind candidate has no other implementations, I\u0027ve marked it as likely to be removed and inlined into the actual class, and when the class hierarchy is linear I\u0027ve likewise marked at least one class as likely to be flattened into its superclass. This latter case could be handled differently, my thinking was that it probably makes more sense to retain the base name (e.g. \"DOMImpl\") rather than the never-instantiated subclass (e.g. \"DOMImplStandard\") which then has additional subclasses, since that is what is created directly via GWT.create - and if no \"non-Standard\" implementations exist, should be part of the base class.",
      "parentUuid": "a248ba90_608d7c13",
      "range": {
        "startLine": 16,
        "startChar": 24,
        "endLine": 18,
        "endChar": 11
      },
      "revId": "8b248e86843d29d5c22c5ccf5f57b1b53d28b9f7",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dbafce47_40de592e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5130
      },
      "writtenOn": "2021-11-04T21:02:45Z",
      "side": 1,
      "message": "\u003e Patch Set 1:\n\u003e \n\u003e Change imported as http://cl/407663197\n\nI\u0027m not sure exactly what this implies, but we can\u0027t merge this out here without the apichecker fixes (which in turn requires the gwtproject/tools merge to provide the reference jar for gwt 2.9).",
      "revId": "8b248e86843d29d5c22c5ccf5f57b1b53d28b9f7",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45724a8a_a326760a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5030
      },
      "writtenOn": "2021-11-06T13:16:02Z",
      "side": 1,
      "message": "Looks like there\u0027s actually a lot of room for improvement all over the place, with runtime checks for very old Gecko or WebKit versions.\nMaybe not worth removing them now as we\u0027re moving to org.gwtproject. Feel free to ignore all those comments then.",
      "revId": "8b248e86843d29d5c22c5ccf5f57b1b53d28b9f7",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c889040e_b75b4f23",
        "filename": "user/src/com/google/gwt/core/client/ScriptInjector.java",
        "patchSetId": 1
      },
      "lineNbr": 290,
      "author": {
        "id": 5445
      },
      "writtenOn": "2021-11-04T15:41:13Z",
      "side": 1,
      "message": "[warning] Line is longer than 100 characters (found 106).",
      "revId": "8b248e86843d29d5c22c5ccf5f57b1b53d28b9f7",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f60bbe7_ae7d3cc5",
        "filename": "user/src/com/google/gwt/core/client/impl/CrossSiteLoadingStrategy.java",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 5445
      },
      "writtenOn": "2021-11-04T15:41:13Z",
      "side": 1,
      "message": "[warning] Line is longer than 100 characters (found 134).",
      "revId": "8b248e86843d29d5c22c5ccf5f57b1b53d28b9f7",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "310e0a6a_093c2d97",
        "filename": "user/src/com/google/gwt/junit/JUnitShell.java",
        "patchSetId": 1
      },
      "lineNbr": 529,
      "author": {
        "id": 5445
      },
      "writtenOn": "2021-11-04T15:41:13Z",
      "side": 1,
      "message": "[warning] Line is longer than 100 characters (found 105).",
      "revId": "8b248e86843d29d5c22c5ccf5f57b1b53d28b9f7",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4875b171_300c0922",
        "filename": "user/src/com/google/gwt/safecss/shared/SafeStylesUtils.java",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 5030
      },
      "writtenOn": "2021-11-06T13:16:02Z",
      "side": 1,
      "message": "In this case, given that the class is not public, I\u0027d vote for removing it altogether (and same for all other non-public, i.e. package-private, classes when we remove all subclasses as part of this patch, if any)\n\nThis could possibly be done in a followup patch (or never done if we consider that only org.gwtproject is worth \"actively maintaining\" and we don\u0027t want to invest too much time in c.g.g)",
      "revId": "8b248e86843d29d5c22c5ccf5f57b1b53d28b9f7",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6235527d_46f1b06f",
        "filename": "user/src/com/google/gwt/user/client/History.java",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 5030
      },
      "writtenOn": "2021-11-06T13:16:02Z",
      "side": 1,
      "message": "This is a private class (not even package-private), so we could also remove it altogether, moving the methods to the parent class.",
      "revId": "8b248e86843d29d5c22c5ccf5f57b1b53d28b9f7",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3beea39e_a52c848c",
        "filename": "user/src/com/google/gwt/user/client/History.java",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 5130
      },
      "writtenOn": "2021-11-06T19:15:22Z",
      "side": 1,
      "message": "I agree, but wanted to draw the line somewhere in terms of how deep to make changes, how much reading was necessary to handle this already large patch.",
      "parentUuid": "6235527d_46f1b06f",
      "revId": "8b248e86843d29d5c22c5ccf5f57b1b53d28b9f7",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4cd6a597_604465af",
        "filename": "user/src/com/google/gwt/user/client/History.java",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 5030
      },
      "writtenOn": "2021-11-07T00:23:27Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3beea39e_a52c848c",
      "revId": "8b248e86843d29d5c22c5ccf5f57b1b53d28b9f7",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ca85630_e923a6f5",
        "filename": "user/test/com/google/gwt/core/client/impl/StackTraceNativeTest.java",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 5030
      },
      "writtenOn": "2021-11-06T13:16:02Z",
      "side": 1,
      "message": "Same here, we could further removing this as well.",
      "revId": "8b248e86843d29d5c22c5ccf5f57b1b53d28b9f7",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ddd5f808_259fc35e",
        "filename": "user/test/com/google/gwt/core/client/impl/StackTraceNativeTest.java",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 5130
      },
      "writtenOn": "2021-11-06T19:15:22Z",
      "side": 1,
      "message": "Definitely agree that a followup patch should consider these things, or just assume they are dealt with in the modularization work (note that this one will not be, since this is effectively only a test of \"does Error.stackTraceLimit or does (new Error).stack exist\", and exists only for the sake of gwt2\u0027s Exceptions intrinsic type).",
      "parentUuid": "7ca85630_e923a6f5",
      "revId": "8b248e86843d29d5c22c5ccf5f57b1b53d28b9f7",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dfff1de0_27f8536c",
        "filename": "user/test/com/google/gwt/core/client/impl/StackTraceNativeTest.java",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 5030
      },
      "writtenOn": "2021-11-07T00:23:27Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ddd5f808_259fc35e",
      "revId": "8b248e86843d29d5c22c5ccf5f57b1b53d28b9f7",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46"
    }
  ]
}