{
  "comments": [
    {
      "key": {
        "uuid": "56202fde_5d2fd7a7",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/GenerateJavaScriptAST.java",
        "patchSetId": 3
      },
      "lineNbr": 2276,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-08-07T22:31:06Z",
      "side": 1,
      "message": "Is this only needed for classes which are subtypes of another class and override something?\n\nWasn\u0027t this a performance hit on IE10/11 and had to be rolled back? Do we need to special case this for non-IE?",
      "revId": "93d274c636f60d30c11a408389dafa47f8d0a4e4",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6e89fcd_42b2761d",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/GenerateJavaScriptAST.java",
        "patchSetId": 3
      },
      "lineNbr": 2276,
      "author": {
        "id": 5105
      },
      "writtenOn": "2014-08-08T00:29:43Z",
      "side": 1,
      "message": "My guess is that in IE10/11 the dynamic property access was causing the problem. (we were doing _[Â¨_$GWT$_\"+ typeid] in defineClass) \n\nI made this patch to test if that was the case.",
      "parentUuid": "56202fde_5d2fd7a7",
      "revId": "93d274c636f60d30c11a408389dafa47f8d0a4e4",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56202fde_fd368bfa",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/GenerateJavaScriptAST.java",
        "patchSetId": 3
      },
      "lineNbr": 2603,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-08-07T22:31:06Z",
      "side": 1,
      "message": "Since we\u0027re not obfuscating it, maybe we can get away with something shorter, like _$G, or perhaps align it with the way Class.getName() is represented in -XdisableClassMetaData\n\nIf there are 3000 classes, shaving off 4 characters is 12k which a reasonable savings.",
      "revId": "93d274c636f60d30c11a408389dafa47f8d0a4e4",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56202fde_7255a585",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/GenerateJavaScriptAST.java",
        "patchSetId": 3
      },
      "lineNbr": 2603,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-08-08T00:25:21Z",
      "side": 1,
      "message": "Wouldn\u0027t Gzip handle this kind of recurring patterns pretty well?",
      "parentUuid": "56202fde_fd368bfa",
      "revId": "93d274c636f60d30c11a408389dafa47f8d0a4e4",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6e89fcd_221aca60",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/GenerateJavaScriptAST.java",
        "patchSetId": 3
      },
      "lineNbr": 2603,
      "author": {
        "id": 5105
      },
      "writtenOn": "2014-08-08T00:29:43Z",
      "side": 1,
      "message": "There are many further optimizations, but first I want to see if this patch behaves well.\n\nWe can optimize this field away if there is already a \"distinguishing field\" (any non static field that has a non null initializer) or, as you noted, if there are no overrides.\n\nAs for making it shorter, I don\u0027t think it will make much of a difference in the compressed size.",
      "parentUuid": "56202fde_fd368bfa",
      "revId": "93d274c636f60d30c11a408389dafa47f8d0a4e4",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56202fde_b2843dbf",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/GenerateJavaScriptAST.java",
        "patchSetId": 3
      },
      "lineNbr": 2603,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-08-08T00:30:16Z",
      "side": 1,
      "message": "Gzip can only deal with strings within a certain window, and the new topological sorting we\u0027re doing probably makes gzip worse. \n\nPlus in the browser, you pay the cost of the uncompressed size in terms of memory. Source code size (uncompressed) even effects things like V8 inlining decisions. \n\nIf we\u0027re going to generate unobfuscated names, it would be nice not to make them substantially large.\n\nPlus it looks bad from a marketing aspect. Right or wrong, people look at uncompressed JS library sizes.\n\nThe question is, do we need to generate these for every class, or only classes that are part of an inheritance hierarchy?",
      "parentUuid": "56202fde_7255a585",
      "revId": "93d274c636f60d30c11a408389dafa47f8d0a4e4",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6e89fcd_e23702ce",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/GenerateJavaScriptAST.java",
        "patchSetId": 3
      },
      "lineNbr": 2603,
      "author": {
        "id": 5105
      },
      "writtenOn": "2014-08-08T00:33:51Z",
      "side": 1,
      "message": "We have been tracking code size for a while now and the numbers some times are different from intuition. Let\u0027s get the numbers first.",
      "parentUuid": "56202fde_b2843dbf",
      "revId": "93d274c636f60d30c11a408389dafa47f8d0a4e4",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}