{
  "comments": [
    {
      "key": {
        "uuid": "858acbd9_e1166658",
        "filename": "user/src/com/google/gwt/i18n/shared/DateTimeFormat.java",
        "patchSetId": 5
      },
      "lineNbr": 793,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-09-26T14:01:22Z",
      "side": 1,
      "message": "Neither Date is modified (setTime), only the variables are reassigned to new values, so the Date object can be shared, like in the code prior to this change:\n\n Date keepDate \u003d new Date(date.getTime() + diff);\n Date keepTime \u003d keepDate;",
      "range": {
        "startLine": 792,
        "startChar": 0,
        "endLine": 793,
        "endChar": 52
      },
      "revId": "95c926dc0aac6c89e47c28ff581ceb68b99fa556",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "858acbd9_a1205ea4",
        "filename": "user/src/com/google/gwt/i18n/shared/DateTimeFormat.java",
        "patchSetId": 5
      },
      "lineNbr": 796,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-09-26T14:01:22Z",
      "side": 1,
      "message": "Given the \u0027|| diffKeepDate \u003e 0\u0027, should this be \u0027diffKeepDate \u003c 0\u0027 then? (and remove that \u0027||\u0027 condition in the inner-if)",
      "revId": "95c926dc0aac6c89e47c28ff581ceb68b99fa556",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6556b716_8ba431a0",
        "filename": "user/src/com/google/gwt/i18n/shared/DateTimeFormat.java",
        "patchSetId": 5
      },
      "lineNbr": 803,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-09-26T14:01:22Z",
      "side": 1,
      "message": "This needs to be described in the big comment above: in which condition do we need to adjust the keepDate? and how?\n\n(for keepTime, I understand that if the target date\u0027s timezone offset is not the same as the source date\u0027s timezone offset, then we re-compute keepDate adjusting by 1 day in the \"reverse direction\" to be sure to stay with the same timezone offset; but for keepDate, this is really obscure to me; and I spent long minutes reading the code and trying to understand that code)",
      "range": {
        "startLine": 795,
        "startChar": 0,
        "endLine": 803,
        "endChar": 5
      },
      "revId": "95c926dc0aac6c89e47c28ff581ceb68b99fa556",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4569b3e3_9786c4c3",
        "filename": "user/src/com/google/gwt/i18n/shared/DateTimeFormat.java",
        "patchSetId": 5
      },
      "lineNbr": 805,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-09-26T14:01:22Z",
      "side": 1,
      "message": "Use dateTimezoneOffset?\n\nBut it might be more readable without those local variables without much runtime overhead (is getTimezoneOffset really costly?)",
      "range": {
        "startLine": 805,
        "startChar": 40,
        "endLine": 805,
        "endChar": 64
      },
      "revId": "95c926dc0aac6c89e47c28ff581ceb68b99fa556",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "858acbd9_61e25694",
        "filename": "user/test/com/google/gwt/i18n/server/DateTimeFormatTest.java",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-09-26T13:23:56Z",
      "side": 1,
      "message": "I have a hard time reading those tests as I don\u0027t understand the edge cases being tested here. Could comments maybe make things clearer?\n\nAlso, the tests could possible be rewritten in terms of a single call to an assertFormatInTimeZone(Date d, String tz, String expected) method. E.g.\n\n public void testDstStartAndFixedDateDoesntSwitchDst() {\n   // add a comment here explaining what transformation happens,\n   // and why we\u0027re expecting what we\u0027re expecting.\n   assertFormatInTimeZone(\n     new Date(Date.UTC(2016, 2, 13, 10, 0, 0)),\n     TimeZone.createTimeZone(10 * 60),\n     \"Sun, 13 Mar 2016 00:00:00 -1000\");\n }",
      "revId": "95c926dc0aac6c89e47c28ff581ceb68b99fa556",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "858acbd9_c1d562b2",
        "filename": "user/test/com/google/gwt/i18n/server/DateTimeFormatTest.java",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-09-26T13:23:56Z",
      "side": 1,
      "message": "This is a JUnit 4 thing; so either the test should be JUnit 4 all the way (no \"extends TestCase\", @Test on test methods, and I believe Google would like a @RunWith to tell their build tool that it\u0027s a JUnit 4 testcase; but that\u0027d be the very first JUnit 4 test in the whole GWT codebase), or it should only use JUnit 3 features (setUp/tearDown would work just as well here).\n\nBTW, relying on, and changing, global state like the default timezone is brittle. We know that tests are run in the America/Los_Angeles timezone (some other tests depend on it), so can tests be rewritten to take that into account instead of changing the default timezone? (I know you noted in the commit message that it wouldn\u0027t be possible, but as said above, I don\u0027t have a clear understanding what cases are actually being tested here so…)",
      "revId": "95c926dc0aac6c89e47c28ff581ceb68b99fa556",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6556b716_c8e58f2e",
        "filename": "user/test/com/google/gwt/i18n/server/DateTimeFormatTest.java",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-09-26T13:23:56Z",
      "side": 1,
      "message": "new Date(Date.UTC(year, month - 1, day, hour, minute, 0)) with the usual @SuppressWarnings(\"deprecation\") ?\n\n(then inline it, folding the month-1 into the constants)",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 67,
        "endChar": 25
      },
      "revId": "95c926dc0aac6c89e47c28ff581ceb68b99fa556",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}