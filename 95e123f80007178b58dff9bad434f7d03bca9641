{
  "comments": [
    {
      "key": {
        "uuid": "d60ff2af_2da3996e",
        "filename": "user/super/com/google/gwt/emul/java/math/BigInteger.java",
        "patchSetId": 1
      },
      "lineNbr": 616,
      "author": {
        "id": 5031
      },
      "writtenOn": "2015-11-10T00:37:42Z",
      "side": 1,
      "message": "Hmm, can\u0027t you check for 7 bits right away? e.g.\n\n  if (numberLength \u003c\u003d 1 \u0026\u0026 bitLength() \u003c\u003d 7) {\n    return byteValue();\n  }\n  throw ....",
      "range": {
        "startLine": 611,
        "startChar": 4,
        "endLine": 616,
        "endChar": 5
      },
      "revId": "95e123f80007178b58dff9bad434f7d03bca9641",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56030291_6903c1eb",
        "filename": "user/super/com/google/gwt/emul/java/math/BigInteger.java",
        "patchSetId": 1
      },
      "lineNbr": 775,
      "author": {
        "id": 5031
      },
      "writtenOn": "2015-11-10T00:37:42Z",
      "side": 1,
      "message": "Not sure if its worth it. If we go with it then we should do it in all *value() methods.",
      "range": {
        "startLine": 775,
        "startChar": 4,
        "endLine": 775,
        "endChar": 20
      },
      "revId": "95e123f80007178b58dff9bad434f7d03bca9641",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6345268_852e0465",
        "filename": "user/super/com/google/gwt/emul/java/math/BigInteger.java",
        "patchSetId": 1
      },
      "lineNbr": 778,
      "author": {
        "id": 5031
      },
      "writtenOn": "2015-11-10T00:37:42Z",
      "side": 1,
      "message": "remove?",
      "range": {
        "startLine": 778,
        "startChar": 4,
        "endLine": 778,
        "endChar": 49
      },
      "revId": "95e123f80007178b58dff9bad434f7d03bca9641",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "569062ca_9e9e1d78",
        "filename": "user/super/com/google/gwt/emul/java/math/BigInteger.java",
        "patchSetId": 1
      },
      "lineNbr": 917,
      "author": {
        "id": 5031
      },
      "writtenOn": "2015-11-10T00:37:42Z",
      "side": 1,
      "message": "I think I am fine with it here. Its an easy fix for the int overflow in case of MIN_VALUE. Could also be written as:\n\n  if (sign \u003d\u003d 0) { // maybe not worth it\n    return 0; \n  }\n  int i \u003d digits[0];\n  // i is always positive except for Integer.MIN_VALUE because of int overflow\n  return (sign \u003e 0 || i \u003d\u003d Integer.MIN_VALUE) ? i : -i;",
      "range": {
        "startLine": 912,
        "startChar": 4,
        "endLine": 917,
        "endChar": 20
      },
      "revId": "95e123f80007178b58dff9bad434f7d03bca9641",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "169a6aee_9c9e2578",
        "filename": "user/super/com/google/gwt/emul/java/math/BigInteger.java",
        "patchSetId": 1
      },
      "lineNbr": 1276,
      "author": {
        "id": 5031
      },
      "writtenOn": "2015-11-10T00:37:42Z",
      "side": 1,
      "message": "Use 15 bits and shortValue()? See intValueExact.",
      "range": {
        "startLine": 1276,
        "startChar": 15,
        "endLine": 1276,
        "endChar": 30
      },
      "revId": "95e123f80007178b58dff9bad434f7d03bca9641",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}