{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "365fa2ec_791c7f28",
        "filename": "common.ant.xml",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 5030
      },
      "writtenOn": "2021-10-14T22:26:11Z",
      "side": 1,
      "message": "Shouldn\u0027t this be the reverse? (using ErrorProne with JDK8, using modern with JDK7)\n\nThings would ideally be updated for a newer ErrorProne, which deprecated that Ant compiler, but that\u0027s a change for another patch.",
      "revId": "9d945489659b2acd3671991272414b9bd011ab45",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18df4d25_5f6bb258",
        "filename": "common.ant.xml",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 5130
      },
      "writtenOn": "2021-10-14T22:32:49Z",
      "side": 1,
      "message": "I\u0027ve long since forgotten why this ended up being necessarily, so I\u0027ll repeat the work and see what I find.\n\nI did once get latest errorprone building, but it was more than a bit of a headache, each time I upgraded I found that the ant instructions were incorrect, and some dependency or another was undocumented. Probably worth revisiting, in case that has been tidied up (or, converting to something that isn\u0027t ant, but that\u0027s a separate discussion with its own problems).",
      "parentUuid": "365fa2ec_791c7f28",
      "revId": "9d945489659b2acd3671991272414b9bd011ab45",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8a5d7f3_bd40e9f9",
        "filename": "common.ant.xml",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 5130
      },
      "writtenOn": "2021-10-15T02:24:00Z",
      "side": 1,
      "message": "Thanks for bringing this up - I see no obvious difference with either Java 8 or Java 11 with this set to `false`, and I agree with your conclusion that this more accurately reflects what the old xml was trying to do.\n\nJava 11 has a build issue in one dev/core/ test, which I\u0027ll patch separately, plus of course the Javadoc issues. I did not run all tests, but I did compile all sources and tests for gwt itself to confirm that this worked correctly.",
      "parentUuid": "18df4d25_5f6bb258",
      "revId": "9d945489659b2acd3671991272414b9bd011ab45",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4816a514_26e6ded8",
        "filename": "common.ant.xml",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 5030
      },
      "writtenOn": "2021-10-15T08:06:23Z",
      "side": 1,
      "message": "Actually, I was talking about both javac.fork and javac.compiler (they go in pair)\n\nWith JDK 7 (and long before that), we used javac.compiler\u003dmodern (i.e. no ErrorProne) and javac.fork\u003dtrue (to set some heap memory at the time that has actually since been removed, so javac.fork\u003dtrue probably was no longer necessary: https://github.com/gwtproject/gwt/commit/ed07433edeb8a5cc97adb43349a6810f7e899331, yup that\u0027s more than 11 years ago); and with JDK 8, we used javac.compiler\u003dcom.google.errorprone.ErrorProneAntCompilerAdapter which then required javac.fork\u003dfalse (https://github.com/gwtproject/gwt/commit/e2fe2c658959f9e020cda695c18e18889d1a5d47, that\u0027s where memoryMaximumSize\u003d\"1024m\" was removed).\n\nIf we want to compile using ErrorProne, then we need javac.compiler\u003dcom.google.errorprone.ErrorProneAntCompilerAdapter and javac.fork\u003dfalse.\nIf we use javac.compiler\u003dmodern then we won\u0027t use ErrorProne and we can remove the compilerclasspath (we can also use javac.fork\u003dfalse which might speed up the build a bit)",
      "parentUuid": "b8a5d7f3_bd40e9f9",
      "revId": "9d945489659b2acd3671991272414b9bd011ab45",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc9d757c_9e4fd73f",
        "filename": "common.ant.xml",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 5030
      },
      "writtenOn": "2021-10-14T22:26:11Z",
      "side": 1,
      "message": "Any specific reason for this update? (those versions are so old I can\u0027t remember what they bring)",
      "revId": "9d945489659b2acd3671991272414b9bd011ab45",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3ef41ae_d6db16af",
        "filename": "common.ant.xml",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 5130
      },
      "writtenOn": "2021-10-14T22:32:49Z",
      "side": 1,
      "message": "So 2.1.2 adds support for Java 9, at least that is why it was originally added to the gwtproject/tools repo. However java8 this also has the benefit of not trying to compile various .java files found on the classpath (instead of just sources) - in our case it is necessary to prevent the testng sources jar from tripping our of our error prone checks:\n```\n[gwt.javac] Compiling 1685 source files to /home/colin/workspace/gwt/build/out/user/bin-test\n[gwt.javac] /home/colin/workspace/tools/lib/testng/testng-5.14.1-sources.jar(/org/testng/internal/annotations/JDK15TagFactory.java):507: error: [GetClassOnAnnotation] Calling getClass() on an annotation may return a proxy class\n[gwt.javac]       Method m \u003d test.getClass().getMethod(methodName, new Class[0]);\n[gwt.javac]                               ^\n[gwt.javac]     (see http://errorprone.info/bugpattern/GetClassOnAnnotation)\n[gwt.javac]   Did you mean \u0027Method m \u003d test.annotationType().getMethod(methodName, new Class[0]);\u0027?\n```",
      "parentUuid": "bc9d757c_9e4fd73f",
      "revId": "9d945489659b2acd3671991272414b9bd011ab45",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e87f875_067cae15",
        "filename": "common.ant.xml",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 5030
      },
      "writtenOn": "2021-10-15T08:06:23Z",
      "side": 1,
      "message": "Ah, I didn\u0027t have in mind that we (you) now were building with JDK 11 too.\n\nI suppose you had that error prior to the other part of this change that unconditionally sets javac.compiler to \u0027modern\u0027? (see comment above)\n\nFwiw, if we want to update ErrorProne, things have changed quite a bit about how to use it with Ant (required since ErrorProne 2.3.2, but probably usable since 2.0.18 actually): https://errorprone.info/docs/installation#ant\n\nKeep in mind that every version of ErrorProne possibly comes with a different set of checks enabled by default, so upgrading ErrorProne might fail the build due to new/newly-enabled checks. That said, Google probably uses the latest version internally (but not necessarily with the same set of checks enabled by default) so the risk should be low (unless it\u0027s in parts of the code base they have deleted on their side)\n\nOverall, as with the other comment above, the question is: do we want to keep ErrorProne or not (I couldn\u0027t imagine a project without it, even though it rarely fails my builds, so I\u0027d vote for keeping it; but if it\u0027s too much work to keep it working with JDK 8 and JDK 11 for instance, then let\u0027s remove it)",
      "parentUuid": "a3ef41ae_d6db16af",
      "revId": "9d945489659b2acd3671991272414b9bd011ab45",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46"
    }
  ]
}