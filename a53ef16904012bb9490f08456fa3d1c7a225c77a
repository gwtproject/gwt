{
  "comments": [
    {
      "key": {
        "uuid": "b0d42a38_074e6a4d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 5445
      },
      "writtenOn": "2015-04-26T12:51:14Z",
      "side": 1,
      "message": "[warning] Commit message lines should be 72 characters or fewer.",
      "revId": "a53ef16904012bb9490f08456fa3d1c7a225c77a",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30375a6d_e117c644",
        "filename": "user/src/com/google/gwt/http/client/Request.java",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 5385
      },
      "writtenOn": "2015-04-26T19:13:33Z",
      "side": 1,
      "message": "Why would you want to be able to call this method directly?",
      "revId": "a53ef16904012bb9490f08456fa3d1c7a225c77a",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70f712e2_8c404bf6",
        "filename": "user/src/com/google/gwt/http/client/Request.java",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 5900
      },
      "writtenOn": "2015-04-27T20:22:26Z",
      "side": 1,
      "message": "External apis that want to be able to use GWT\u0027s core http api extending com.google.gwt.http.client.XMLHttpRequest features need to both construct a com.google.gwt.http.client.Request object and call #fireOnResponseReceived method when the XHR reaches the LOADED state to properly rely on this api.",
      "parentUuid": "30375a6d_e117c644",
      "revId": "a53ef16904012bb9490f08456fa3d1c7a225c77a",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30375a6d_071d1a65",
        "filename": "user/src/com/google/gwt/http/client/Request.java",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 5385
      },
      "writtenOn": "2015-04-27T20:27:35Z",
      "side": 1,
      "message": "What can\u0027t you do if we do not make these public?\n\nEverything that we make public hinders our ability to move forward without breaking anybody. So in general we only do this for a good reason.\n\nWhy would you want to extend this? Which API is missing?",
      "parentUuid": "70f712e2_8c404bf6",
      "revId": "a53ef16904012bb9490f08456fa3d1c7a225c77a",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70f712e2_b7111052",
        "filename": "user/src/com/google/gwt/http/client/Request.java",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 5900
      },
      "writtenOn": "2015-04-27T21:35:26Z",
      "side": 1,
      "message": "The Request class is basically responsible for managing a logical timer for the http request, performing some operations over the XMLHttpRequest class and create Response objects. All these responsabilities are well encapsulated. It happens that this class was designed thinking only on the local use, and not on the extension. In order to better allow extension, the http package need to expose these two members of the Request class. This way, others will be able to build custom apis for requesting.\n\nGWT offers a low-level \u0027user-friendly\u0027 api for requesting - RequestBuilder - but it does not appropriately allow others to extend its core http package and build higher level apis in replacement of the default one.\n\nCurrently, it\u0027s not possible to use an external XMLHttpRequest extension in conjuction with the Request and Response classes because the Request constructor is package accessible and the Response factory method (placed in the Request class) which takes a XHR as argument is private accessible. So the cycle of creating a XMLHttpRequest, then creating a Request with this XHR and lastly retrieving a Response is broken. This way we can\u0027t extend the gwt http api.\n\nGWT already offers its own solution for requesting to the end user. I claim that it should also allow the entension of the http api by middle users.\n\nMaybe a better solution would be to transform the Request class in an interface exposing the current public members, and creating a RequestImpl exposing the other members for entension.",
      "parentUuid": "30375a6d_071d1a65",
      "revId": "a53ef16904012bb9490f08456fa3d1c7a225c77a",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30375a6d_4a87a7e1",
        "filename": "user/src/com/google/gwt/http/client/Request.java",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 5385
      },
      "writtenOn": "2015-04-28T13:32:24Z",
      "side": 1,
      "message": "Can you give me one example of such an extension?",
      "parentUuid": "70f712e2_b7111052",
      "revId": "a53ef16904012bb9490f08456fa3d1c7a225c77a",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70f712e2_bddc4f99",
        "filename": "user/src/com/google/gwt/http/client/Request.java",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 5900
      },
      "writtenOn": "2015-04-28T14:09:43Z",
      "side": 1,
      "message": "Requestor supports the XHR2 spec. So I had to extend com.google.gwt.http.client.XMLHttpRequest (see https://github.com/reinert/requestor/blob/master/requestor/core/requestor-api/src/main/java/io/reinert/requestor/XMLHttpRequest.java) and implement the missing features (sending blob, json, file, xml; retrieving the response as an object; onprogress event for upload and download; etc). In order to Requestor work upon gwt http api, I had to expose the Request class as suggested in this patch, so I could create a Request with my XMLHttpRequest extension and properly retrieve a Response. As a middle user I could add many features to my library only because I used the core elements of the gwt http api combined with my own extensions. \n\n\nAs the time goes by, and the XHR spec keeps evolving, extensions will be necessary to get compatibility with the \u0027bleeding edge\u0027 features. GWT core may not want to keep compatibility with such features. But it should not prevent others to achieve it. (since others may depend on them in someway)",
      "parentUuid": "30375a6d_4a87a7e1",
      "revId": "a53ef16904012bb9490f08456fa3d1c7a225c77a",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30e3da4b_44a020e8",
        "filename": "user/src/com/google/gwt/http/client/Request.java",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 5385
      },
      "writtenOn": "2015-04-30T13:57:34Z",
      "side": 1,
      "message": "The requestor API look very nice, but I do not get why its depending on Request / XmlHttpRequest at all?\n\nIs there something I don\u0027t get?",
      "parentUuid": "70f712e2_bddc4f99",
      "revId": "a53ef16904012bb9490f08456fa3d1c7a225c77a",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "905806e7_989f45dd",
        "filename": "user/src/com/google/gwt/http/client/Request.java",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 5900
      },
      "writtenOn": "2015-04-30T15:17:16Z",
      "side": 1,
      "message": "Thanks. \n\nAbout why I use the class Request of gwt http instead of RequestBuilder, it first must be clear that I\u0027m using my own io.reinert.requestor.XMLHttpRequest implementation, which I inherited from com.google.gwt.http.client.XMLHttpRequest.\n\nNow, let\u0027s pay closer attention to RequestBuilder. It\u0027s the only way for requesting exposed by gwt http api and it\u0027s a \u0027user-friendly\u0027 approach.\n\nIt happens that RequestBuilder completely encapsulates the use of the XMLHttpRequest class (see https://gwt.googlesource.com/gwt/+/master/user/src/com/google/gwt/http/client/RequestBuilder.java#383). That\u0027s natural because RequestBuilder is \u0027user-friendly\u0027 and aims to simplify the task of requesting. But that also limits the power of flexibility by not allowing external access to the XMLHttpRequest object and prevent the possibility of using extensions of this class.\n\nSo I had to extend com.google.gwt.http.client.XMLHttpRequest class, RequestBuilder became useless to me. I needed lower level access to the Request class to make requests using my  io.reinert.requestor.XMLHttpRequest extension.\n\nMy problem is: I need to use my XMLHttpRequest extension, and gwt http api doesn\u0027t allow the use this class extensions.\n\nThis problem can be faced as: GWT core provides a default \u0027user-friendly\u0027 API for requesting: RequestBuilder. But it also could allow lower level manipulation of the core request elements (XMLHttpRequest and Request) for middle users to be more flexible and extensible.\n\nThat\u0027s my humble analysis of the http api, based on my own experience. I\u0027m open to discussions and other point of views.",
      "parentUuid": "30e3da4b_44a020e8",
      "revId": "a53ef16904012bb9490f08456fa3d1c7a225c77a",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7011d208_930f1c68",
        "filename": "user/src/com/google/gwt/http/client/Request.java",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 5031
      },
      "writtenOn": "2015-04-30T16:56:23Z",
      "side": 1,
      "message": "I think we can avoid making this method public if we move some code from RequestBuilder to Request. Basically RequestBuilder registers the ReadyStateChangeHandler in RequestBuilder.doSend() and the handler calls request.fireOnResponseReceived.\n\nI think the Request class could set the ReadStateChangeHandler itself which would allow making Request.fireOnResponseReceived() private and your library code does not have to deal with that method anymore.",
      "parentUuid": "905806e7_989f45dd",
      "revId": "a53ef16904012bb9490f08456fa3d1c7a225c77a",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7011d208_b3317820",
        "filename": "user/src/com/google/gwt/http/client/Request.java",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 5031
      },
      "writtenOn": "2015-04-30T17:08:03Z",
      "side": 1,
      "message": "Just seen that you have some custom cleanup code, so to make it work the GWT Request class would then need to provide an empty protected void cleanup() method for sub classes of Request as well.\n\nSo to sum it up:\n\n  - make the Request constructor protected and not public\n  - add protected void cleanup() for sub classes\n  - move ReadyStateChangeHandler code from RequestBuilder to Request\n  - call new Request.cleanup() method in ReadStateChangeHandler after xhr.clearOnReadyStateChange()\n\nThen in your library you can create a sub class of Request for cleanup work and you don\u0027t have to deal with fireOnResponseReceived() at all.",
      "parentUuid": "7011d208_930f1c68",
      "revId": "a53ef16904012bb9490f08456fa3d1c7a225c77a",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "905806e7_13d81618",
        "filename": "user/src/com/google/gwt/http/client/Request.java",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 5900
      },
      "writtenOn": "2015-04-30T17:38:26Z",
      "side": 1,
      "message": "Nice suggestion Jens.\n\nIt let me to wonder why the \u0027ReadyStateChangeHandler piece of code\u0027 were left to handle outside of the Request class. As the comment (https://gwt.googlesource.com/gwt/+/master/user/src/com/google/gwt/http/client/RequestBuilder.java#407) says, this handler must be set before calling the send() method, and it would be natural to handle it inside the class which defines this rule.\n\nI see one reason: external requesters, like RequestBuilder and my RequestDispatcherImpl, might want to do many things when the XHR\u0027s readyState change. As you noticed, I do some custom cleanup for my own needs when the XHR is DONE. But other might use it not only for \u0027cleanup\u0027 when DONE, but also for any need related to any other readyState of the XHR (remember they are five states!). There are a plenty of possibilities to handle the readyState change. And maybe it wouldn\u0027t be good to block requesters\u0027 access to this handler. (by encapsulating this logic inside the Request class)\n\nBased in what you said, making both the Request constructor and fireOnResponseReceived method protected would solve the problem - for me. (As I might need to extend the Request class anyway)\n\nAn alternative/additional solution, as I said before, would be turning the Request class into an interface exposing the current public members only, and creating a RequestImpl exposing the constructor and fireOnResponseReceived (either public or protected)",
      "parentUuid": "7011d208_b3317820",
      "revId": "a53ef16904012bb9490f08456fa3d1c7a225c77a",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}