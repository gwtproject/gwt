{
  "comments": [
    {
      "key": {
        "uuid": "U.N4RZRM",
        "filename": "user/src/com/google/gwt/core/client/JsonUtils.java",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 5030
      },
      "writtenOn": "2013-05-23T16:49:09Z",
      "side": 1,
      "message": "We should rather add an accessor for the static field (e.g. hasNativeJsonParse)\n\nAs an alternative, maybe we could use JSNI to access this field and keep it private. This is hack, but it\u0027s only temporary until we remove support for IE6/7 (where we could unconditionally use JsonUtils.safeEval(), and that one would unconditionally use JSON.parse, and that field would disappear).\n\nGiven that hasNativeJsonParse would soon unconditionally return \u0027true\u0027, I\u0027d prefer that we don\u0027t introduce such an API in 2.6 that we\u0027ll deprecate as soon as 3.0.",
      "revId": "a6bca9eaa210df11e794afcf813be5baf56e89d1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "U6IMGxCk",
        "filename": "user/src/com/google/gwt/core/client/JsonUtils.java",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 5000
      },
      "writtenOn": "2013-05-23T16:57:35Z",
      "side": 1,
      "message": "com.google.gwt.json.client.JSONParser already uses JSNI to bypass the private, so there\u0027s precedent for this hack.",
      "parentUuid": "U.N4RZRM",
      "revId": "a6bca9eaa210df11e794afcf813be5baf56e89d1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "U6GNY0As",
        "filename": "user/src/com/google/gwt/core/client/JsonUtils.java",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 5010
      },
      "writtenOn": "2013-05-23T17:58:35Z",
      "side": 1,
      "message": "I\u0027m neutral on this, but I\u0027ll point out that there\u0027s very little downside to keeping this method around forever.",
      "parentUuid": "U.N4RZRM",
      "revId": "a6bca9eaa210df11e794afcf813be5baf56e89d1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "VDLar6L8",
        "filename": "user/src/com/google/gwt/core/client/JsonUtils.java",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 5090
      },
      "writtenOn": "2013-05-24T07:08:08Z",
      "side": 1,
      "message": "I am too neutral on this, if JSONParser is already using it though JSNI then the ClientSerializationStreamWriter could do it as well and there would be no need to open this up.",
      "parentUuid": "U6GNY0As",
      "revId": "a6bca9eaa210df11e794afcf813be5baf56e89d1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "U6KPwKM0",
        "filename": "user/src/com/google/gwt/user/client/rpc/impl/AbstractSerializationStreamWriter.java",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 5010
      },
      "writtenOn": "2013-05-23T17:58:35Z",
      "side": 1,
      "message": "Call getVersion() here and do this only for the new version.",
      "revId": "a6bca9eaa210df11e794afcf813be5baf56e89d1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "U6KBEnoI",
        "filename": "user/super/com/google/gwt/user/translatable/com/google/gwt/user/client/rpc/impl/ClientSerializationStreamReader.java",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 5000
      },
      "writtenOn": "2013-05-23T16:24:27Z",
      "side": 1,
      "message": "GWT style is: \"if (condition) {\".\n\nDoes the .contains() check really do anything for us here?  Won\u0027t that be handled by the IllegalArgumentException fallback below anyway?  We need to fallback if there are unstringified NaN or Infinity values too after all, right?",
      "revId": "a6bca9eaa210df11e794afcf813be5baf56e89d1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "U6ANI9HI",
        "filename": "user/super/com/google/gwt/user/translatable/com/google/gwt/user/client/rpc/impl/ClientSerializationStreamReader.java",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 5000
      },
      "writtenOn": "2013-05-23T16:57:35Z",
      "side": 1,
      "message": "Hm, actually if we don\u0027t care about IE6/IE7 anymore anyway, why are we even worrying about whether JsonUtils.safeEval() is fast on IE6/IE7?  Can\u0027t we just do:\n\n    try {\n      results \u003d JsonUtils.safeEval(encoded);\n    } catch (IllegalArgumentException iae) {\n      // Input was invalid JSON; e.g., using ].concat([ or non-stringified NaN/Infinity.\n      results \u003d eval(encoded);\n    }",
      "parentUuid": "U6KBEnoI",
      "revId": "a6bca9eaa210df11e794afcf813be5baf56e89d1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "U6MP1HLw",
        "filename": "user/super/com/google/gwt/user/translatable/com/google/gwt/user/client/rpc/impl/ClientSerializationStreamReader.java",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 5010
      },
      "writtenOn": "2013-05-23T17:58:35Z",
      "side": 1,
      "message": "Please no content sniffing. We should check the version number.",
      "parentUuid": "U6ANI9HI",
      "revId": "a6bca9eaa210df11e794afcf813be5baf56e89d1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "VCxcSlGY",
        "filename": "user/super/com/google/gwt/user/translatable/com/google/gwt/user/client/rpc/impl/ClientSerializationStreamReader.java",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 5090
      },
      "writtenOn": "2013-05-24T07:08:08Z",
      "side": 1,
      "message": "Wouldn\u0027t passing everything though JSON.parse() yield an unnecessary performance hit in cases where we know .concat/NaN/Infity has been used and the JSON.parse() will throw the exception? \n\nThe version should be easily enough deducible from the encoded string and using that we could then simply do: \n\n     if(version \u003c 8){\n          eval() \n      } else { \n         try{\n            JSONUtils.safeEval() \n        } catch(IllegalArgumentException iae){\n            throw new IncompatibleRemoteServiceException(\"Expected valid JSON, got something else.\");\n        }\n      }",
      "parentUuid": "U6MP1HLw",
      "revId": "a6bca9eaa210df11e794afcf813be5baf56e89d1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "U6MBJkps",
        "filename": "user/super/com/google/gwt/user/translatable/com/google/gwt/user/client/rpc/impl/ClientSerializationStreamReader.java",
        "patchSetId": 3
      },
      "lineNbr": 69,
      "author": {
        "id": 5000
      },
      "writtenOn": "2013-05-23T16:24:27Z",
      "side": 1,
      "message": "Indented too far here.",
      "revId": "a6bca9eaa210df11e794afcf813be5baf56e89d1",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}