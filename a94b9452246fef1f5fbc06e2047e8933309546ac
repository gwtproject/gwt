{
  "comments": [
    {
      "key": {
        "uuid": "e4efa930_260ebc53",
        "filename": "dev/codeserver/java/com/google/gwt/dev/codeserver/SuperDevMode.java",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 5010
      },
      "writtenOn": "2014-07-01T19:10:22Z",
      "side": 1,
      "message": "Maybe call this SuperDevModeWithJetty?",
      "range": {
        "startLine": 38,
        "startChar": 13,
        "endLine": 38,
        "endChar": 25
      },
      "revId": "a94b9452246fef1f5fbc06e2047e8933309546ac",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4efa930_269cfc87",
        "filename": "dev/codeserver/java/com/google/gwt/dev/codeserver/SuperDevMode.java",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 5010
      },
      "writtenOn": "2014-07-01T19:26:58Z",
      "side": 1,
      "message": "(Or perhaps JettyDevMode if that\u0027s too long.)\n\njavadoc:\n\n\"Starts a Jetty server to run a web app with Super Dev Mode on. Partially backward-compatible with the DevMode entry point, for an easier transition.\"\n\nI don\u0027t want to call it SuperDevMode because we might have other launchers later. (For example, for App Engine.)",
      "parentUuid": "e4efa930_260ebc53",
      "range": {
        "startLine": 38,
        "startChar": 13,
        "endLine": 38,
        "endChar": 25
      },
      "revId": "a94b9452246fef1f5fbc06e2047e8933309546ac",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4efa930_a68e4c1d",
        "filename": "dev/codeserver/java/com/google/gwt/dev/codeserver/SuperDevMode.java",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 5625
      },
      "writtenOn": "2014-07-01T19:31:53Z",
      "side": 1,
      "message": "If it only serves Jetty, I suspect it will be harder to use with GPE if at all b/c it will not integrate well with GPE app engine configuration. iirc the -server arg for devmode passes in another potential server option.",
      "parentUuid": "e4efa930_269cfc87",
      "range": {
        "startLine": 38,
        "startChar": 13,
        "endLine": 38,
        "endChar": 25
      },
      "revId": "a94b9452246fef1f5fbc06e2047e8933309546ac",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4efa930_a6a80c68",
        "filename": "dev/codeserver/java/com/google/gwt/dev/codeserver/SuperDevMode.java",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 5625
      },
      "writtenOn": "2014-07-01T19:38:58Z",
      "side": 1,
      "message": "Just a thought, it could be easier to add a arguments into DevMode to start a SDM CodeServer and ignore DevMode browser hooks. Although this could add more complexity to the argument processors for DevMode, but essentially I see all the wiring in current DevMode minus some args SDM CodeServer needs.",
      "parentUuid": "e4efa930_a68e4c1d",
      "range": {
        "startLine": 38,
        "startChar": 13,
        "endLine": 38,
        "endChar": 25
      },
      "revId": "a94b9452246fef1f5fbc06e2047e8933309546ac",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "240701cd_7767d0f3",
        "filename": "dev/codeserver/java/com/google/gwt/dev/codeserver/SuperDevMode.java",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 5055
      },
      "writtenOn": "2014-07-01T19:41:47Z",
      "side": 1,
      "message": "I think SuperDevMode makes easier for users to remember the class if they have to edit by hand the launcher for replacing DevMode.\n\nMore options JettySuperDev SuperDevServer ...\n\nBTW, this implementation respects the -noserver flag, so as it runs the superdev code server but not jetty, and produces the stub nocache script which is deployed in any server and works loading the superdev script from the correct url.",
      "parentUuid": "e4efa930_a68e4c1d",
      "range": {
        "startLine": 38,
        "startChar": 13,
        "endLine": 38,
        "endChar": 25
      },
      "revId": "a94b9452246fef1f5fbc06e2047e8933309546ac",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "240701cd_57644ced",
        "filename": "dev/codeserver/java/com/google/gwt/dev/codeserver/SuperDevMode.java",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 5055
      },
      "writtenOn": "2014-07-01T19:41:47Z",
      "side": 1,
      "message": "That was my first thought, but this makes DevMode depends on CodeServer which are in different .jar files, making a circular dependency.",
      "parentUuid": "e4efa930_a6a80c68",
      "range": {
        "startLine": 38,
        "startChar": 13,
        "endLine": 38,
        "endChar": 25
      },
      "revId": "a94b9452246fef1f5fbc06e2047e8933309546ac",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4efa930_0623c034",
        "filename": "dev/codeserver/java/com/google/gwt/dev/codeserver/SuperDevMode.java",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 5625
      },
      "writtenOn": "2014-07-01T19:54:32Z",
      "side": 1,
      "message": "CodeServer is a different jar, forgot about that, you\u0027re right in that case, that would make the dependencies ugly. \n\nIn this format, I think it would be handy to carry in every arg that dev mode uses for alternate server configuration like for app engine. For instance here is an appengine DevMode args list and in this case any server could be used as the servlet container. Thoughts?\n\n-startupUrl WE_Simple.html -war /Users/branflake2267/git/WrightwayEconomy/WE_Simple/war -remoteUI \"${gwt_remote_ui_server_port}:${unique_id}\" -logLevel INFO -codeServerPort 9997 -port 8888 -server com.google.appengine.tools.development.gwt.AppEngineLauncher com.wrightwayeconomy.WE_Simple_Neptune",
      "parentUuid": "240701cd_7767d0f3",
      "range": {
        "startLine": 38,
        "startChar": 13,
        "endLine": 38,
        "endChar": 25
      },
      "revId": "a94b9452246fef1f5fbc06e2047e8933309546ac",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64b2d95d_71ec18de",
        "filename": "dev/codeserver/java/com/google/gwt/dev/codeserver/SuperDevMode.java",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 5010
      },
      "writtenOn": "2014-07-01T21:09:49Z",
      "side": 1,
      "message": "If it turns out we need all the DevMode flags for backward compatibility with GPE, Vaadin, or anything else then I\u0027m okay with that, since the point of this entry point is backward compatibility. I\u0027m just wondering if there are any flags that nobody uses or are perhaps broken or inapplicable to Super Dev Mode and we could drop. That\u0027s hard to tell if we just inherit all the flags at once without looking at them one by one.",
      "parentUuid": "e4efa930_0623c034",
      "range": {
        "startLine": 38,
        "startChar": 13,
        "endLine": 38,
        "endChar": 25
      },
      "revId": "a94b9452246fef1f5fbc06e2047e8933309546ac",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4efa930_ac746baa",
        "filename": "dev/codeserver/java/com/google/gwt/dev/codeserver/SuperDevMode.java",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 5625
      },
      "writtenOn": "2014-07-01T21:37:29Z",
      "side": 1,
      "message": "-remoteUI starts up the older launch shell/window (server for it), I don\u0027t think it fits in this context and isn\u0027t needed. And -Dgwt.devjar seems probably isn\u0027t needed. The rest of the args so far look useful or dependent, as they provide the coordinates to web application configuration.",
      "parentUuid": "64b2d95d_71ec18de",
      "range": {
        "startLine": 38,
        "startChar": 13,
        "endLine": 38,
        "endChar": 25
      },
      "revId": "a94b9452246fef1f5fbc06e2047e8933309546ac",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4efa930_433dba48",
        "filename": "dev/codeserver/java/com/google/gwt/dev/codeserver/SuperDevMode.java",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 5010
      },
      "writtenOn": "2014-07-01T19:10:22Z",
      "side": 1,
      "message": "I don\u0027t think we should extend HostedModeOptionsImpl since there are quite a lot of flags, most of which are legacy and unneeded for this new entry point. I think instead, we should start fresh like I did with CodeServer\u0027s options and only add the flags that seem to be needed. Any other options can be hard-coded. We can always add more flags later.\n\n(The options should be a top-level class.)",
      "range": {
        "startLine": 40,
        "startChar": 53,
        "endLine": 40,
        "endChar": 74
      },
      "revId": "a94b9452246fef1f5fbc06e2047e8933309546ac",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e418892e_1581343c",
        "filename": "dev/codeserver/java/com/google/gwt/dev/codeserver/SuperDevMode.java",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 5055
      },
      "writtenOn": "2014-07-01T19:41:47Z",
      "side": 1,
      "message": "I wanted to be the less intrusive with the implementation, so as anyone having launch scripts would be able to switch to super-devmode  just changing the classname. I know there are many .launch scripts in projects not using GPE we use launch scripts and launch script generators at vaadin for instance, and I have had many project in the past with those files.",
      "parentUuid": "e4efa930_433dba48",
      "range": {
        "startLine": 40,
        "startChar": 53,
        "endLine": 40,
        "endChar": 74
      },
      "revId": "a94b9452246fef1f5fbc06e2047e8933309546ac",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4efa930_03cc529c",
        "filename": "dev/codeserver/java/com/google/gwt/dev/codeserver/SuperDevMode.java",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 5010
      },
      "writtenOn": "2014-07-01T19:10:22Z",
      "side": 1,
      "message": "Picking an unused port is a bit trickier than this. It seems worth having a separate PortPicker utility class for it.\n\nTo avoid possible conflicts, I think we should exclude commonly-used fixed ports (like 8080 and 9876 :-) from the range. There\u0027s an IANA standard [1] that says we should use 49152 to 65535.\n\nWe should also check that the port isn\u0027t taken. Maybe something like:\n\n        try {\n          ServerSocket socket \u003d new ServerSocket(port);\n          int realPort \u003d socket.getLocalPort();\n          socket.close();\n          return realPort;\n        } catch (IOException ioe) {\n          // try again\n        }\n\nAlso, it might as well use SecureRandom(); it couldn\u0027t hurt.\n\n[1] http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml",
      "range": {
        "startLine": 48,
        "startChar": 8,
        "endLine": 48,
        "endChar": 25
      },
      "revId": "a94b9452246fef1f5fbc06e2047e8933309546ac",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4efa930_e0967cc3",
        "filename": "dev/codeserver/java/com/google/gwt/dev/codeserver/SuperDevMode.java",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 5010
      },
      "writtenOn": "2014-07-01T19:10:22Z",
      "side": 1,
      "message": "I think it would be better to build a List\u003cString\u003e here to hold the flags, so we don\u0027t have to think about how to handle filenames that contain spaces.",
      "range": {
        "startLine": 92,
        "startChar": 12,
        "endLine": 92,
        "endChar": 13
      },
      "revId": "a94b9452246fef1f5fbc06e2047e8933309546ac",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4efa930_a0f0f446",
        "filename": "dev/codeserver/java/com/google/gwt/dev/codeserver/SuperDevMode.java",
        "patchSetId": 3
      },
      "lineNbr": 110,
      "author": {
        "id": 5010
      },
      "writtenOn": "2014-07-01T19:10:22Z",
      "side": 1,
      "message": "Hmm, maybe better to switch to the other version of CodeServer.main(), so that option parsing happens in the main thread:\n\nOutside the Thread:\n\n    final Options options \u003d new Options();\n    if (!options.parseArgs(args)) {\n       // handle error\n    }\n\nThen run() can be just this:\n\nvoid run() {\n  try {   \n    CodeServer.main(options);\n  } catch (Exception e) {\n    // handle error\n  }\n}\n\nIf it makes it easier, you could add a variation of Options.parseArgs() that takes an Iterable\u003cString\u003e instead of a String[].\n\n(I\u0027d like to refactor CodeServer\u0027s Options object so there\u0027s a more type-safe way to create it, but that can happen later.)",
      "range": {
        "startLine": 110,
        "startChar": 21,
        "endLine": 110,
        "endChar": 25
      },
      "revId": "a94b9452246fef1f5fbc06e2047e8933309546ac",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4efa930_63d2768e",
        "filename": "dev/codeserver/java/com/google/gwt/dev/codeserver/hosted.nocache.js",
        "patchSetId": 3
      },
      "lineNbr": 1,
      "author": {
        "id": 5010
      },
      "writtenOn": "2014-07-01T19:10:22Z",
      "side": 1,
      "message": "Maybe \"stub.nocache.js\" would be a better name for this.",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 2
      },
      "revId": "a94b9452246fef1f5fbc06e2047e8933309546ac",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4efa930_63a39627",
        "filename": "dev/codeserver/java/com/google/gwt/dev/codeserver/hosted.nocache.js",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 5010
      },
      "writtenOn": "2014-07-01T19:10:22Z",
      "side": 1,
      "message": "Maybe wrap the whole script in a function to avoid inadvertently exporting any new symbols:\n\nfunction($wnd, $doc) {\n\n}(window, document);",
      "range": {
        "startLine": 22,
        "startChar": 1,
        "endLine": 22,
        "endChar": 4
      },
      "revId": "a94b9452246fef1f5fbc06e2047e8933309546ac",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4efa930_6320b602",
        "filename": "dev/codeserver/java/com/google/gwt/dev/codeserver/hosted.nocache.js",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 5010
      },
      "writtenOn": "2014-07-01T19:10:22Z",
      "side": 1,
      "message": "Maybe check for session storage first and skip the rest of the script if it fails? (I\u0027m not sure if we should touch __gwt_activeModules at all if we couldn\u0027t start.)",
      "range": {
        "startLine": 58,
        "startChar": 7,
        "endLine": 58,
        "endChar": 12
      },
      "revId": "a94b9452246fef1f5fbc06e2047e8933309546ac",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}