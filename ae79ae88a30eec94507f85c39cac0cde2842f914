{
  "comments": [
    {
      "key": {
        "uuid": "7c58ad41_31eb7261",
        "filename": "dev/core/super/com/google/gwt/dev/jjs/intrinsic/com/google/gwt/lang/Cast.java",
        "patchSetId": 16
      },
      "lineNbr": 184,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-02-28T04:35:15Z",
      "side": 1,
      "message": "You are redefining jsTypeContext instead of assigning? So we are probably not covering this in our tests?",
      "range": {
        "startLine": 184,
        "startChar": 8,
        "endLine": 184,
        "endChar": 27
      },
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_e87cc8cb",
        "filename": "dev/core/super/com/google/gwt/dev/jjs/intrinsic/com/google/gwt/lang/Cast.java",
        "patchSetId": 16
      },
      "lineNbr": 184,
      "author": {
        "id": 5105
      },
      "writtenOn": "2014-03-01T01:47:24Z",
      "side": 1,
      "message": "var can be removed, AFAIK multiple vars in the same scope are equiv to having one var at the scope and the rest plain assignment.",
      "parentUuid": "7c58ad41_31eb7261",
      "range": {
        "startLine": 184,
        "startChar": 8,
        "endLine": 184,
        "endChar": 27
      },
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_32ffedd2",
        "filename": "dev/core/super/com/google/gwt/dev/jjs/intrinsic/com/google/gwt/lang/Cast.java",
        "patchSetId": 16
      },
      "lineNbr": 184,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:15:52Z",
      "side": 1,
      "message": "I explained this in a separate doc, but essentially, if the instanceof check is not against $wnd, it has to compute the window from where the object originated, and then construct a reference to it. This is just a sneaky way to discover the window object that owns a given object reference.",
      "parentUuid": "7c58ad41_31eb7261",
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_7108ca88",
        "filename": "dev/core/super/com/google/gwt/dev/jjs/intrinsic/com/google/gwt/lang/Cast.java",
        "patchSetId": 16
      },
      "lineNbr": 196,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-02-28T04:35:15Z",
      "side": 1,
      "message": "I\u0027m lost in this function, I\u0027ll try to look with a fresh mind tomorrow.\nPoint to a reference (if you\u0027re following an algorithm that is already documented) or putting more description might be useful for future as well.",
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_318ff2a9",
        "filename": "dev/core/super/com/google/gwt/dev/jjs/intrinsic/com/google/gwt/lang/JavaClassHierarchySetupUtil.java",
        "patchSetId": 16
      },
      "lineNbr": 89,
      "author": {
        "id": 5105
      },
      "writtenOn": "2014-02-28T04:59:07Z",
      "side": 1,
      "message": "Shouldn\u0027t obj be used instead of obj.prototype in Object.create.\n\nNote that we are now storing prototypes in prototypesByTypeId (instead of the previous approach that stored seed that would have the prototype  in its prototype field).\n\nI find Javascript way of setting up inheritance confusing at best.",
      "range": {
        "startLine": 89,
        "startChar": 33,
        "endLine": 89,
        "endChar": 36
      },
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_7c00a11f",
        "filename": "dev/core/super/com/google/gwt/dev/jjs/intrinsic/com/google/gwt/lang/JavaClassHierarchySetupUtil.java",
        "patchSetId": 16
      },
      "lineNbr": 89,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-02-28T05:45:23Z",
      "side": 1,
      "message": "Yes, it is quite confusing and not standardized (yet).\n\nI thought about your question while reviewing this and actually it depends on the context.\n\nYou could either extend by A.prototype \u003d new Parent() or A.prototype \u003d Object.create(Parent.prototype)  - at least the way I see things - although I have read a lot on this but still everything is not clear for me :)\n\nNote that, those two alternatives are not exactly same and may not work similar depending how the Parent object is setup.\n\nHowever, for the custom elements case, you instantiate with the second option so that is similar to what is done here.\n\nOn the other hand, to be honest I\u0027m not 100% sure we are correctly modeling everything with the new stuff.",
      "parentUuid": "7c58ad41_318ff2a9",
      "range": {
        "startLine": 89,
        "startChar": 33,
        "endLine": 89,
        "endChar": 36
      },
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_32e80d21",
        "filename": "dev/core/super/com/google/gwt/dev/jjs/intrinsic/com/google/gwt/lang/JavaClassHierarchySetupUtil.java",
        "patchSetId": 16
      },
      "lineNbr": 89,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:15:52Z",
      "side": 1,
      "message": "\u0027obj\u0027 in this case is something like \u0027HTMLButtonElement\u0027, which is a function, not an object. We actually want to clone the prototype for our purposes via Object.create.\n\nTrying to construct a native function actually throws a hard TypeError in Chrome.",
      "parentUuid": "7c58ad41_318ff2a9",
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_f1795a0b",
        "filename": "dev/core/super/com/google/gwt/dev/jjs/intrinsic/com/google/gwt/lang/JavaClassHierarchySetupUtil.java",
        "patchSetId": 16
      },
      "lineNbr": 90,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-02-28T04:35:15Z",
      "side": 1,
      "message": "Does obj being null is a valid case? It looks like it shouldn\u0027t be and we should fail fast.",
      "range": {
        "startLine": 90,
        "startChar": 31,
        "endLine": 90,
        "endChar": 34
      },
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_d2f65100",
        "filename": "dev/core/super/com/google/gwt/dev/jjs/intrinsic/com/google/gwt/lang/JavaClassHierarchySetupUtil.java",
        "patchSetId": 16
      },
      "lineNbr": 90,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:15:52Z",
      "side": 1,
      "message": "Technically, it should never be null unless someone has a typo in their prototype. This is actually here to make JsInterfaceTest work because the ScriptInjector runs from within GWT code. I need a way to inject script into a GWTTestCase before the GWT module is defined.\n\nI will remove this when I fix the test.",
      "parentUuid": "7c58ad41_f1795a0b",
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_b19c020e",
        "filename": "dev/core/super/com/google/gwt/dev/jjs/intrinsic/com/google/gwt/lang/JavaClassHierarchySetupUtil.java",
        "patchSetId": 16
      },
      "lineNbr": 93,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-02-28T04:35:15Z",
      "side": 1,
      "message": "nit: perhaps temp -\u003e F ?",
      "range": {
        "startLine": 93,
        "startChar": 21,
        "endLine": 93,
        "endChar": 25
      },
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_922b3999",
        "filename": "dev/core/super/com/google/gwt/dev/jjs/intrinsic/com/google/gwt/lang/JavaClassHierarchySetupUtil.java",
        "patchSetId": 16
      },
      "lineNbr": 93,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:15:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c58ad41_b19c020e",
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_08995cee",
        "filename": "dev/core/super/com/google/gwt/dev/jjs/intrinsic/com/google/gwt/lang/JavaClassHierarchySetupUtil.java",
        "patchSetId": 16
      },
      "lineNbr": 97,
      "author": {
        "id": 5105
      },
      "writtenOn": "2014-03-01T01:47:24Z",
      "side": 1,
      "message": "I would like to have this logic factored in one place given that defineClass and defileClassWithPrototype share most of the logic and portableObjectCreate and createSubclassPrototype are also similar.\n\n1) extract into \n\nstatic native JSO JCHSU.portableObjectCreate(JSO proto) /*-{\n  if (proto \u0026\u0026 Object.create) {\n    return Object.create(proto);\n  }\n  function dummyCtor() {}\n  dummyCtor.prototype \u003d proto || {};\n  return new dummyCtor();   \n\n}-*/ \n and delete createSubclassPrototype.\n\nKeep the main creation logic in defineClassWithPrototype(), change generation code to pass directly the prototype instead of the object whose prototype is wanted or rename this one to an approriate name and keep defineClassWithPrototype()  \n\nand make defineClass be\ndefineClass() {\n  defineClassWithPrototype(..., prototypesByTypeId[superTypeId], ...);\n}",
      "range": {
        "startLine": 89,
        "startChar": 6,
        "endLine": 97,
        "endChar": 7
      },
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_71220a36",
        "filename": "dev/core/super/com/google/gwt/dev/jjs/intrinsic/com/google/gwt/lang/JavaClassHierarchySetupUtil.java",
        "patchSetId": 16
      },
      "lineNbr": 105,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-02-28T04:35:15Z",
      "side": 1,
      "message": "Why are we setting constructor to superClass instead of our own constructor?\n\nProbably we need to mimic something similar to:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript#Inheritance\n(i.e. instantiate the prototype and set the constructor)",
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_ef2e12bc",
        "filename": "dev/core/super/com/google/gwt/dev/jjs/intrinsic/com/google/gwt/lang/JavaClassHierarchySetupUtil.java",
        "patchSetId": 16
      },
      "lineNbr": 105,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:15:52Z",
      "side": 1,
      "message": "You\u0027re right. I fixed it. Just so happens, this doesn\u0027t affect GWT because the prototype checks (instanceof) are always against the superClass proto (e.g. HTMLButtonElement). If the class is a Java class, then it checks the castableTypeMap instead.\n\nHowever if we later move to a more JS-like system for translating instanceof, this might bite us. Also in DevTools, when you print the object, it might print the wrong name.",
      "parentUuid": "7c58ad41_71220a36",
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_7100ca1f",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 16
      },
      "lineNbr": 50,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-02-28T04:35:15Z",
      "side": 1,
      "message": "nit: inline like the rest",
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_f21b9584",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 16
      },
      "lineNbr": 50,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:15:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c58ad41_7100ca1f",
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_71520a30",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 16
      },
      "lineNbr": 63,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-02-28T04:35:15Z",
      "side": 1,
      "message": "As we discussed in the mail, always calling super (as in java semantics) might not work well for javascript objects. What do you think about my proposal for explicit constructor calls via methods marked with @JsConstructor instead?",
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_b2251dbf",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 16
      },
      "lineNbr": 63,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:15:52Z",
      "side": 1,
      "message": "Let\u0027s leave that for a follow on CL. This functionality is only a placeholder, and is mainly an artifact of the code in GenJsAST I updated to handle \u0027super\u0027 qualified calls in general.",
      "parentUuid": "7c58ad41_71520a30",
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_51826640",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 16
      },
      "lineNbr": 96,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-02-28T04:35:15Z",
      "side": 1,
      "message": "Here, instead of setting prototype by hand, is it possible to call defineClass for the second time to be sure everything is working as expected?",
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_32512d27",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 16
      },
      "lineNbr": 96,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:15:52Z",
      "side": 1,
      "message": "defineClass* early exits if called a second time with the same ID.",
      "parentUuid": "7c58ad41_51826640",
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_f1771aa5",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 16
      },
      "lineNbr": 108,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-02-28T04:35:15Z",
      "side": 1,
      "message": "Can we put different pieces into separate tests?",
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_b2819de6",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 16
      },
      "lineNbr": 108,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:15:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c58ad41_f1771aa5",
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_b12e4272",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 16
      },
      "lineNbr": 119,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-02-28T04:35:15Z",
      "side": 1,
      "message": "We were also having issues with classes that has only single method were treated as SAM even they were marked as @JsInterface. Can you cover that in your test cases as well?",
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_f2a6f5d2",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 16
      },
      "lineNbr": 119,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:15:52Z",
      "side": 1,
      "message": "Yeah, I\u0027ll add that. I\u0027ll need to find a spec legitimate way of handling this.  As far as the Java spec is concerned, any SAM class can be treated as a lambda.\n\nCertainly, any non-abstract class that is not the subtype of a SAM should not be treated as a lambda. That is, a class with only one method that doesn\u0027t implement a SAM interface. The question is, are there concrete classes that should not be lambda-promoted.\n\nConsider a JS interface mapping JSON object. The put() method is being used to store arbitrary Java objects. Do you want the value, even if it is lambda-like, to be wrapped in a function?\n\nWe may have to actually require people to annotate the parameters of interfaces that are eligible for lambda-conversion. It makes things more tedious, but would be less surprising, e.g.\n\ninterface EventTarget {\n  void addEventListener(String eventName, @JsFunction EventListener listener);\n}\n\nOne workaround for the time being is to use the synthetic bit. Lambda\u0027s create synthetic inner classes, so any non-static, synthetic inner class would get promoted.",
      "parentUuid": "7c58ad41_b12e4272",
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_118cee70",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 16
      },
      "lineNbr": 130,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-02-28T04:35:15Z",
      "side": 1,
      "message": "nit: extra space",
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_b242bd27",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 16
      },
      "lineNbr": 130,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:15:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c58ad41_118cee70",
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_11b50ef7",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 16
      },
      "lineNbr": 157,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-02-28T04:35:15Z",
      "side": 1,
      "message": "Is there a bug here?",
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_7138cab2",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 16
      },
      "lineNbr": 158,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-02-28T04:35:15Z",
      "side": 1,
      "message": "What is this needed? Is there a bug?",
      "range": {
        "startLine": 158,
        "startChar": 4,
        "endLine": 158,
        "endChar": 17
      },
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_12c98968",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 16
      },
      "lineNbr": 158,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:15:52Z",
      "side": 1,
      "message": "There is the potential for the compiler to optimize away assignments, which would then allow the cast-checks to be optimized away, e.g.\n\nassertNotNull(doc1 \u003d (MyClass) xxx)\n\nif doc1 is unused, it goes away, leaving\n\nassertNotNull((MyClass) xxx)\n\nbut assertNotNull takes an (Object), so casting from (Object) to (MyClass) is a trivially true cast and can go away.\n\nI haven\u0027t proven this actually happens, it\u0027s just a precaution.",
      "parentUuid": "7c58ad41_7138cab2",
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c58ad41_7111ea38",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 16
      },
      "lineNbr": 162,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-02-28T04:35:15Z",
      "side": 1,
      "message": "It would be great to have tests for different instanceof scenarios listed in the document:\n\n @JsInterface(prototype \u003d \"HTMLElement\")\n interface HTMLElement extends Element {\n\n HTMLElement obj \u003d ...;  // real javascript object\n obj instanceOf Object \u003d\u003d true\n obj instanceOf HtmlElement \u003d\u003d true\n obj instanceOf Iterator \u003d\u003d false\n obj instanceOf AJsInterface \u003d\u003d true\n obj instanceOf AJsInterfaceWithSamePrototype \u003d\u003d true\n obj instanceOf AJsInterfaceWithDifferentPrototype \u003d\u003d false\n obj instanceOf AJsInterfaceInheritsDifferentPrototype \u003d\u003d false\n\n\n class MyCustomElement extends HtmlElement.Prototype implements Iterator { ... }\n \n MyCustomElement obj \u003d ...; // a java object extends javascript object treated as a java object\n obj instanceOf Object \u003d\u003d true\n obj instanceOf HtmlElement \u003d\u003d true\n obj instanceOf Iterator \u003d\u003d true\n obj instanceOf AJsInterface \u003d\u003d false\n obj instanceOf AJsInterfaceWithSamePrototype \u003d\u003d false\n obj instanceOf AJsInterfaceWithDifferentPrototype \u003d\u003d false",
      "revId": "ae79ae88a30eec94507f85c39cac0cde2842f914",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}