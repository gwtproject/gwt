{
  "comments": [
    {
      "key": {
        "uuid": "1ceed1c6_67216e2c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 25
      },
      "lineNbr": 27,
      "author": {
        "id": 5445
      },
      "writtenOn": "2014-03-12T02:18:17Z",
      "side": 1,
      "message": "[warning] Commit message lines should be 72 characters or fewer.",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc10b997_cc67a37c",
        "filename": "dev/core/src/com/google/gwt/dev/javac/JSORestrictionsChecker.java",
        "patchSetId": 25
      },
      "lineNbr": 329,
      "author": {
        "id": 5105
      },
      "writtenOn": "2014-03-12T19:52:36Z",
      "side": 1,
      "message": "why not use mb.isConstructor() here?",
      "range": {
        "startLine": 329,
        "startChar": 12,
        "endLine": 329,
        "endChar": 39
      },
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cbf69de_c02df413",
        "filename": "dev/core/src/com/google/gwt/dev/javac/JSORestrictionsChecker.java",
        "patchSetId": 25
      },
      "lineNbr": 329,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:14:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dc10b997_cc67a37c",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc10b997_2c34775d",
        "filename": "dev/core/src/com/google/gwt/dev/javac/testing/impl/JavaResourceBase.java",
        "patchSetId": 25
      },
      "lineNbr": 349,
      "author": {
        "id": 5105
      },
      "writtenOn": "2014-03-12T19:52:36Z",
      "side": 1,
      "message": "Can you move these to JavaASTConstructor. That\u0027s where mocks for intrinsics and GWT specifics are.",
      "range": {
        "startLine": 322,
        "startChar": 0,
        "endLine": 349,
        "endChar": 0
      },
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cbf69de_a039e0ed",
        "filename": "dev/core/src/com/google/gwt/dev/javac/testing/impl/JavaResourceBase.java",
        "patchSetId": 25
      },
      "lineNbr": 349,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:14:34Z",
      "side": 1,
      "message": "But these types are needed before the JavaAst is constructed, and JSORestrictionsChecker doesn\u0027t use any of the Java AST",
      "parentUuid": "dc10b997_2c34775d",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cbf69de_237dd592",
        "filename": "dev/core/src/com/google/gwt/dev/javac/testing/impl/JavaResourceBase.java",
        "patchSetId": 25
      },
      "lineNbr": 349,
      "author": {
        "id": 5105
      },
      "writtenOn": "2014-03-17T03:10:03Z",
      "side": 1,
      "message": "I see. We should probably take the mock resources out of JavaAstConstructor and into a separate GwtMockRosources then. We\u0027ll do that in a future patch, leave them there for now.",
      "parentUuid": "5cbf69de_a039e0ed",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc10b997_0c39bb55",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/ControlFlowAnalyzer.java",
        "patchSetId": 25
      },
      "lineNbr": 411,
      "author": {
        "id": 5105
      },
      "writtenOn": "2014-03-12T19:52:36Z",
      "side": 1,
      "message": "Remove extra blank line.",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cbf69de_801ffc72",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/ControlFlowAnalyzer.java",
        "patchSetId": 25
      },
      "lineNbr": 411,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:14:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dc10b997_0c39bb55",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_e55edbd5",
        "filename": "dev/core/super/com/google/gwt/dev/jjs/intrinsic/com/google/gwt/lang/Cast.java",
        "patchSetId": 25
      },
      "lineNbr": 177,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-12T23:32:39Z",
      "side": 1,
      "message": "Let\u0027s do not add \"$wnd\" to the contract. I\u0027m not sure if there are enough compelling reasons to add this. Probably if somebody wants different semantics that would more like to the callee and they could jsni or some utility instead of instanceof operator in such case.",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cbf69de_c04bb47a",
        "filename": "dev/core/super/com/google/gwt/dev/jjs/intrinsic/com/google/gwt/lang/Cast.java",
        "patchSetId": 25
      },
      "lineNbr": 177,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:14:34Z",
      "side": 1,
      "message": "Let\u0027s discuss removing this in a followup CL. We\u0027d still need to strip it or deal with it anyway because the current spec places no restrictions on the path that is allowed in the prototype attribute.",
      "parentUuid": "9c2ba1c2_e55edbd5",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc10b997_6c614f1d",
        "filename": "dev/core/super/com/google/gwt/dev/jjs/intrinsic/com/google/gwt/lang/JavaClassHierarchySetupUtil.java",
        "patchSetId": 25
      },
      "lineNbr": 63,
      "author": {
        "id": 5105
      },
      "writtenOn": "2014-03-12T19:52:36Z",
      "side": 1,
      "message": "Maybe this is better done in portableObjCreate where a constructor actually exists?\n\nHere it is assigning the prototype to the constructor field.",
      "range": {
        "startLine": 63,
        "startChar": 3,
        "endLine": 63,
        "endChar": 24
      },
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_2571131f",
        "filename": "dev/core/super/com/google/gwt/dev/jjs/intrinsic/com/google/gwt/lang/JavaClassHierarchySetupUtil.java",
        "patchSetId": 25
      },
      "lineNbr": 75,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-12T23:32:39Z",
      "side": 1,
      "message": "Does this need to be a separate method or does it get complicated?",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7caeed94_671cdcf9",
        "filename": "dev/core/super/com/google/gwt/dev/jjs/intrinsic/com/google/gwt/lang/JavaClassHierarchySetupUtil.java",
        "patchSetId": 25
      },
      "lineNbr": 75,
      "author": {
        "id": 5105
      },
      "writtenOn": "2014-03-14T01:38:37Z",
      "side": 1,
      "message": "I think these two can be factored so that the main logic is not duplicated.",
      "parentUuid": "9c2ba1c2_2571131f",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_259ab310",
        "filename": "dev/core/super/com/google/gwt/dev/jjs/intrinsic/com/google/gwt/lang/JavaClassHierarchySetupUtil.java",
        "patchSetId": 25
      },
      "lineNbr": 90,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-12T23:32:39Z",
      "side": 1,
      "message": "nit: indentations look incorrect in this method.",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_e55d3bb3",
        "filename": "dev/core/super/com/google/gwt/dev/jjs/intrinsic/com/google/gwt/lang/JavaClassHierarchySetupUtil.java",
        "patchSetId": 25
      },
      "lineNbr": 96,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-12T23:32:39Z",
      "side": 1,
      "message": "It looks like you are not setting the constructor?",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_c502b765",
        "filename": "dev/core/super/com/google/gwt/dev/jjs/intrinsic/com/google/gwt/lang/JavaClassHierarchySetupUtil.java",
        "patchSetId": 25
      },
      "lineNbr": 141,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-12T23:32:39Z",
      "side": 1,
      "message": "Shouldn\u0027t this be the window by default? What are the use cases for global this?",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc10b997_ec541f3e",
        "filename": "dev/core/test/com/google/gwt/dev/javac/JSORestrictionsTest.java",
        "patchSetId": 25
      },
      "lineNbr": 358,
      "author": {
        "id": 5105
      },
      "writtenOn": "2014-03-12T19:52:36Z",
      "side": 1,
      "message": "I think the following restriction are missing tests:\nERR_CONSTRUCTOR_WITH_PARAMETERS, ERR_INSTANCE_FIELD, ERR_INSTANCE_METHOD_NONFINAL, ERR_IS_NONSTATIC_NESTED, ERR_NEW_JSO, ERR_NONEMPTY_CONSTRUCTOR, ERR_NONPROTECTED_CONSTRUCTOR,  ERR_OVERRIDDEN_METHOD,ERR_FORGOT_TO_MAKE_PROTOTYPE_IMPL_JSINTERFACE\n\nCan you add them?",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_65e82bd4",
        "filename": "dev/core/test/com/google/gwt/dev/javac/JSORestrictionsTest.java",
        "patchSetId": 25
      },
      "lineNbr": 358,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-12T21:55:28Z",
      "side": 1,
      "message": "Those are tested in other methods of this class (did you expand all?)",
      "parentUuid": "dc10b997_ec541f3e",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc10b997_f7e068e7",
        "filename": "dev/core/test/com/google/gwt/dev/javac/JSORestrictionsTest.java",
        "patchSetId": 25
      },
      "lineNbr": 358,
      "author": {
        "id": 5105
      },
      "writtenOn": "2014-03-12T22:07:25Z",
      "side": 1,
      "message": "My bad. There is one missing though ERR_FORGOT_TO_MAKE_PROTOTYPE_IMPL_JSINTERFACE",
      "parentUuid": "9c2ba1c2_65e82bd4",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_85571f46",
        "filename": "dev/core/test/com/google/gwt/dev/javac/JSORestrictionsTest.java",
        "patchSetId": 25
      },
      "lineNbr": 444,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-12T23:32:39Z",
      "side": 1,
      "message": "Foo_Prototype should be a top level class right?\nProbably it wouldn\u0027t matter for this context but it is better to follow the real world.\n\n(also similar lines below)",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cbf69de_e0047834",
        "filename": "dev/core/test/com/google/gwt/dev/javac/JSORestrictionsTest.java",
        "patchSetId": 25
      },
      "lineNbr": 444,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:14:34Z",
      "side": 1,
      "message": "Shouldn\u0027t matter with the new annotation anymore. I\u0027ll change one of the examples so that both arrangements are tested.",
      "parentUuid": "9c2ba1c2_85571f46",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_05e4ce4c",
        "filename": "dev/core/test/com/google/gwt/dev/javac/JSORestrictionsTest.java",
        "patchSetId": 25
      },
      "lineNbr": 473,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-12T23:32:39Z",
      "side": 1,
      "message": "This is not an error per spec.",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_a8431782",
        "filename": "dev/core/test/com/google/gwt/dev/javac/JSORestrictionsTest.java",
        "patchSetId": 25
      },
      "lineNbr": 473,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-13T00:32:23Z",
      "side": 1,
      "message": "Is is very very likely to be an unintentional mistake though. If it is not an error, we should at least have a warning somehow.",
      "parentUuid": "9c2ba1c2_05e4ce4c",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_6b9ab911",
        "filename": "dev/core/test/com/google/gwt/dev/javac/JSORestrictionsTest.java",
        "patchSetId": 25
      },
      "lineNbr": 473,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-13T01:33:13Z",
      "side": 1,
      "message": "I thought one might want to follow the contract of the interface without extending the prototype. Isn\u0027t that sound realistic?",
      "parentUuid": "9c2ba1c2_a8431782",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cbf69de_dd703bf3",
        "filename": "dev/core/test/com/google/gwt/dev/javac/JSORestrictionsTest.java",
        "patchSetId": 25
      },
      "lineNbr": 473,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:14:34Z",
      "side": 1,
      "message": "I think you\u0027re right that this seems only natural. I will leave the code for this commented out by a flag for now, and figure out a way to add a \u0027lint\u0027 mode to JSORestrictionsChecker later to warn when turned on.",
      "parentUuid": "9c2ba1c2_6b9ab911",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_a5306201",
        "filename": "dev/core/test/com/google/gwt/dev/javac/JSORestrictionsTest.java",
        "patchSetId": 25
      },
      "lineNbr": 507,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-12T23:32:39Z",
      "side": 1,
      "message": "Perhaps you can also add a test for\n\n  @JsProperty int foo(int)",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cbf69de_dd5b9b71",
        "filename": "dev/core/test/com/google/gwt/dev/javac/JSORestrictionsTest.java",
        "patchSetId": 25
      },
      "lineNbr": 507,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:14:34Z",
      "side": 1,
      "message": "Added.",
      "parentUuid": "9c2ba1c2_a5306201",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_4891bb84",
        "filename": "user/src/com/google/gwt/core/client/js/JsExport.java",
        "patchSetId": 25
      },
      "lineNbr": 30,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-12T23:32:39Z",
      "side": 1,
      "message": "I think we didn\u0027t discuss the field option earlier.",
      "range": {
        "startLine": 30,
        "startChar": 55,
        "endLine": 30,
        "endChar": 72
      },
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_c8576b45",
        "filename": "user/src/com/google/gwt/core/client/js/JsExport.java",
        "patchSetId": 25
      },
      "lineNbr": 30,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-13T00:32:23Z",
      "side": 1,
      "message": "Which option? The spec covers ctors, methods, and fields does it not?",
      "parentUuid": "9c2ba1c2_4891bb84",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_8b160da3",
        "filename": "user/src/com/google/gwt/core/client/js/JsExport.java",
        "patchSetId": 25
      },
      "lineNbr": 30,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-13T01:33:13Z",
      "side": 1,
      "message": "Sorry my bad. I thought I didn\u0027t cover the fields so I wasn\u0027t sure if I had thought about implications but it looks like it is covered in doc.",
      "parentUuid": "9c2ba1c2_c8576b45",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cbf69de_8046dc6e",
        "filename": "user/src/com/google/gwt/core/client/js/JsExport.java",
        "patchSetId": 25
      },
      "lineNbr": 30,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:14:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9c2ba1c2_8b160da3",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_a5e6a295",
        "filename": "user/src/com/google/gwt/core/client/js/JsInterface.java",
        "patchSetId": 25
      },
      "lineNbr": 16,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-12T23:32:39Z",
      "side": 1,
      "message": "What about c.g.gwt.js instead? c.g.gwt.core has plenty of JSO based code and probably is mostly not safe for shared code while this code is and might be referred from shared code in the future?",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cbf69de_e081183c",
        "filename": "user/src/com/google/gwt/core/client/js/JsInterface.java",
        "patchSetId": 25
      },
      "lineNbr": 16,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:14:34Z",
      "side": 1,
      "message": "That doesn\u0027t follow our current pattern of having translatable code live in a \u0027client\u0027 directory. It would have to be c.g.gwt.js.client in that circumstance. Let\u0027s land the CL and bikeshed on package naming and move it later.",
      "parentUuid": "9c2ba1c2_a5e6a295",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_2590f2ef",
        "filename": "user/src/com/google/gwt/core/client/js/JsInterface.java",
        "patchSetId": 25
      },
      "lineNbr": 32,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-12T23:32:39Z",
      "side": 1,
      "message": "nit: \u003cp\u003e",
      "range": {
        "startLine": 32,
        "startChar": 2,
        "endLine": 32,
        "endChar": 3
      },
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cbf69de_a08b205a",
        "filename": "user/src/com/google/gwt/core/client/js/JsInterface.java",
        "patchSetId": 25
      },
      "lineNbr": 32,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:14:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9c2ba1c2_2590f2ef",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_659aea11",
        "filename": "user/src/com/google/gwt/core/client/js/JsInterface.java",
        "patchSetId": 25
      },
      "lineNbr": 36,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-12T23:32:39Z",
      "side": 1,
      "message": "nit: \u003cp\u003e",
      "range": {
        "startLine": 36,
        "startChar": 2,
        "endLine": 36,
        "endChar": 3
      },
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cbf69de_80913c88",
        "filename": "user/src/com/google/gwt/core/client/js/JsInterface.java",
        "patchSetId": 25
      },
      "lineNbr": 36,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:14:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9c2ba1c2_659aea11",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_4846db71",
        "filename": "user/src/com/google/gwt/core/client/js/JsInterface.java",
        "patchSetId": 25
      },
      "lineNbr": 41,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-12T23:32:39Z",
      "side": 1,
      "message": "nit: don\u0027t need curly here",
      "range": {
        "startLine": 41,
        "startChar": 27,
        "endLine": 41,
        "endChar": 28
      },
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_0567ae3b",
        "filename": "user/src/com/google/gwt/core/client/js/JsInterface.java",
        "patchSetId": 25
      },
      "lineNbr": 45,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-12T23:32:39Z",
      "side": 1,
      "message": "Let\u0027s postpone adding this until we understand extension problem is a rule or just happens for some objects.",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_287d67c6",
        "filename": "user/src/com/google/gwt/core/client/js/JsInterface.java",
        "patchSetId": 25
      },
      "lineNbr": 45,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-13T00:32:23Z",
      "side": 1,
      "message": "Not sure I understand this. Almost every attempt to extend a native object will fail, it\u0027s exceptional when it works. I can\u0027t think of a single case where it does. I\u0027ve tried DOM elements, String, Number, Array, TypedArrays, etc. Only the root Object is really extensible in this way.\n\nI\u0027d say leave this check here for now (it\u0027s already implemented in JSORestrictionsChecker and test) and remove it later if we want.",
      "parentUuid": "9c2ba1c2_0567ae3b",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_cb6c8523",
        "filename": "user/src/com/google/gwt/core/client/js/JsInterface.java",
        "patchSetId": 25
      },
      "lineNbr": 45,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-13T01:33:13Z",
      "side": 1,
      "message": "I was thinking that the extension was problematic because the way they implemented the classes you have tested for, not because extending native objects are forbidden. I am still optimistic that they will support such extensions for HTMLElement. But as you said, we can leave the code and remove later if needed.",
      "parentUuid": "9c2ba1c2_287d67c6",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_084d038f",
        "filename": "user/src/com/google/gwt/core/client/js/JsInterface.java",
        "patchSetId": 25
      },
      "lineNbr": 46,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-12T23:32:39Z",
      "side": 1,
      "message": "As I argued earlier, let\u0027s do not generate super calls to prototype object as it is not always ok in JS semantics - instead we should let developer to make explicit calls to super constructor functions wherever needed as in real js world.\n\nFor that developer can annotate a method with JsConstructor and calls to that method will be translated into MyConstructor.call(this, ...).\n\nThis provides ability to define multiple type-safe delegates to constructors and also gives the most flexibility in terms of following real life js.",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_088183a1",
        "filename": "user/src/com/google/gwt/core/client/js/JsInterface.java",
        "patchSetId": 25
      },
      "lineNbr": 46,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-13T00:32:23Z",
      "side": 1,
      "message": "Super calls are not automatically generated. This annotation only controls the annotation processor, so for example,\n\n@JsInterface(..., constructor \u003d {int.class})\n\ncreates a stub super constructor\n\nclass Foo_Prototype {\n   public Foo_Prototype(int x) { ... }\n}\n\nInvoking this from a subclass\n\nclass MyFoo extends Foo_Prototype {\n   MyFoo() { super(42); }\n}\n\nIs the only instance in which a super call to a JS constructor will ever happen. You have to a) specifically have a stub ctor in the Prototype and b) manually call it in client code.\n\nAutomatically synthesized/inserted super-calls do not happen.\n\nThis annotation only exists, because if you do need to call a super-ctor, your only option is to manually write and stub out the entire _Prototype, which is annoying and error prone.",
      "parentUuid": "9c2ba1c2_084d038f",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_cb3e45ef",
        "filename": "user/src/com/google/gwt/core/client/js/JsInterface.java",
        "patchSetId": 25
      },
      "lineNbr": 46,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-13T01:33:13Z",
      "side": 1,
      "message": "I\u0027m kind of lost here.\n\nAre you saying you always generate a default constructor in addition to the constructor requested by the default using this field? And you do nothing when it is called (including the implicit super() calls), only generate a js call when there is an explicit call such as \"super(a, b)\"? Then how the developer opts-in to make a call to super constructor when that are no arguments?",
      "parentUuid": "9c2ba1c2_088183a1",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cbf69de_e0ba38ea",
        "filename": "user/src/com/google/gwt/core/client/js/JsInterface.java",
        "patchSetId": 25
      },
      "lineNbr": 46,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:14:34Z",
      "side": 1,
      "message": "No, basically when the compiler sees a super() JMethodCall in a subclass of a Prototype class, it checks the JMethod.isDefaultMethod() field.\n\nThis basically returns true if the user didn\u0027t hand-write the method (the javac/jdt compiler synthesized it by default), which means we won\u0027t invoke it in that circumstance.\n\nExample:\n\nClass Prototype {\n  // no ctor defined, Javac compiler generates invisible default one\n}\n\nclass Foo extends Prototype {\n  Foo() {} // compiler inserts invisible call to Prototype\u0027s super()\n}\n\nIn this scenario, we do nothing (we do not call the super(), it is ignored)\n\nclass Foo extends Prototype {\n  Foo() { super(); } // user puts his own super() call, still, the parent super-ctor is synthetic, we won\u0027t call it\n}\n\n\nClass Prototype {\n   Prototype() { ... } // we wrote our own stubbed out Prototype ctor()\n}\n\nclass Foo extends Prototype {\n   Foo() {} // compiler inserts super() call\n}\n\nIn this case, we translate the super() call to JsPrototype.prototype.call(this), e.g. \n\nThat is, the only way you can ever invoke a Javascript super ctor on a JS prototype is if you specifically declare one in the _Prototype class. You can do this in two ways:\n\nOption 1: Hand write your own _Prototype stub class\nOption 2: add constructor\u003d in the @JsInterface declaration, and the annotation processor will write out the stub for you.\n\nThat is, you can only invoke super prototype ctors if you specifically opt in and ask for it. Otherwise, calls to super() are translated as NO-OP. And the reason why they are translated to NO-OP by default is because the Java compiler *always* inserts a super call to the base class, it is part of the Java spec.",
      "parentUuid": "9c2ba1c2_cb3e45ef",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_454886ec",
        "filename": "user/src/com/google/gwt/core/client/js/JsProperty.java",
        "patchSetId": 25
      },
      "lineNbr": 28,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-12T23:32:39Z",
      "side": 1,
      "message": "Can you make this more javadoc friendly:\n\n \u003cp\u003e Examples:\n \u003cli\u003e {@code ..} ....\n \u003cli\u003e {@code ..} ....\n \u003cli\u003e {@code ..} ....",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cbf69de_a0b440fb",
        "filename": "user/src/com/google/gwt/core/client/js/JsProperty.java",
        "patchSetId": 25
      },
      "lineNbr": 28,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:14:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9c2ba1c2_454886ec",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_85427ec8",
        "filename": "user/src/com/google/gwt/core/client/js/JsProperty.java",
        "patchSetId": 25
      },
      "lineNbr": 35,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-12T23:32:39Z",
      "side": 1,
      "message": "nit: \u003cp\u003e here",
      "range": {
        "startLine": 35,
        "startChar": 3,
        "endLine": 35,
        "endChar": 5
      },
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cbf69de_60a748d0",
        "filename": "user/src/com/google/gwt/core/client/js/JsProperty.java",
        "patchSetId": 25
      },
      "lineNbr": 35,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:14:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9c2ba1c2_85427ec8",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_65f66a71",
        "filename": "user/src/com/google/gwt/core/client/js/JsProperty.java",
        "patchSetId": 25
      },
      "lineNbr": 39,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-12T23:32:39Z",
      "side": 1,
      "message": "Can you make this RUNTIME instead? (so that we can make reflection based mocks work accordingly)",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cbf69de_80aa5c98",
        "filename": "user/src/com/google/gwt/core/client/js/JsProperty.java",
        "patchSetId": 25
      },
      "lineNbr": 39,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:14:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9c2ba1c2_65f66a71",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_25bab29e",
        "filename": "user/src/com/google/gwt/core/client/js/impl/JsInterfacePrototype.java",
        "patchSetId": 25
      },
      "lineNbr": 28,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-12T23:32:39Z",
      "side": 1,
      "message": "RetentionPolicy.Source instead?",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cbf69de_804c9c61",
        "filename": "user/src/com/google/gwt/core/client/js/impl/JsInterfacePrototype.java",
        "patchSetId": 25
      },
      "lineNbr": 28,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:14:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9c2ba1c2_25bab29e",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_85defef3",
        "filename": "user/src/com/google/gwt/core/client/js/impl/JsInterfacePrototype.java",
        "patchSetId": 25
      },
      "lineNbr": 30,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-12T23:32:39Z",
      "side": 1,
      "message": "Probably not required to be documented?",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cbf69de_a03680c1",
        "filename": "user/src/com/google/gwt/core/client/js/impl/JsInterfacePrototype.java",
        "patchSetId": 25
      },
      "lineNbr": 30,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:14:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9c2ba1c2_85defef3",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_855c3ede",
        "filename": "user/src/com/google/gwt/core/client/js/impl/JsInterfacePrototype.java",
        "patchSetId": 25
      },
      "lineNbr": 31,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-12T23:32:39Z",
      "side": 1,
      "message": "This will show up in all auto completes for \"Js...\". Can you name it something else. perhaps PrototypeOfJsInterace?",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cbf69de_6049884f",
        "filename": "user/src/com/google/gwt/core/client/js/impl/JsInterfacePrototype.java",
        "patchSetId": 25
      },
      "lineNbr": 31,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:14:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9c2ba1c2_855c3ede",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc10b997_2c3e37f0",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 25
      },
      "lineNbr": 32,
      "author": {
        "id": 5105
      },
      "writtenOn": "2014-03-12T19:52:36Z",
      "side": 1,
      "message": "Can you add tests for the features that are missing tests here? i.e. JsProperties, BAMs?",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_850a7fef",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 25
      },
      "lineNbr": 32,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-12T21:55:28Z",
      "side": 1,
      "message": "JsProperty is tested in testJsProperties()\n\nI can add a test for lambda conversion.",
      "parentUuid": "dc10b997_2c3e37f0",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc10b997_370a00f2",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 25
      },
      "lineNbr": 32,
      "author": {
        "id": 5105
      },
      "writtenOn": "2014-03-12T22:07:25Z",
      "side": 1,
      "message": "Yes please add test for BAMs.",
      "parentUuid": "9c2ba1c2_850a7fef",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7caeed94_8721f02e",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 25
      },
      "lineNbr": 32,
      "author": {
        "id": 5105
      },
      "writtenOn": "2014-03-14T01:38:37Z",
      "side": 1,
      "message": "s/BAM/SAM/ :)",
      "parentUuid": "dc10b997_370a00f2",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_8540be52",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 25
      },
      "lineNbr": 159,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-12T23:32:39Z",
      "side": 1,
      "message": "Here, instead of setting prototype by hand, is it possible to call defineClass for the second time to be sure everything is working as expected?",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cbf69de_a0956024",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 25
      },
      "lineNbr": 159,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:14:34Z",
      "side": 1,
      "message": "Don\u0027t think so, defineClass will early exit and I don\u0027t have the arguments to feed defneClass either.",
      "parentUuid": "9c2ba1c2_8540be52",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_a5a18290",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 25
      },
      "lineNbr": 222,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-12T23:32:39Z",
      "side": 1,
      "message": "why is this needed?",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cbf69de_408564f0",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 25
      },
      "lineNbr": 222,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:14:34Z",
      "side": 1,
      "message": "If full optimizations are turned on, it is possible for the compiler to dead-strip the doc1/doc2/doc3 variables since they are not used, therefore the casts could potentially be stripped. I haven\u0027t verified the compiler does this, but it could do it in the future.",
      "parentUuid": "9c2ba1c2_a5a18290",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_852f1e6f",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 25
      },
      "lineNbr": 249,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-12T23:32:39Z",
      "side": 1,
      "message": "assertFalse(obj instanceOf AJsInterfaceInheritsDifferentPrototype)",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_85e1deeb",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 25
      },
      "lineNbr": 257,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-12T23:32:39Z",
      "side": 1,
      "message": "This should be false per spec as it is against java semantics.",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cbf69de_a0b7a0b6",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 25
      },
      "lineNbr": 257,
      "author": {
        "id": 5001
      },
      "writtenOn": "2014-03-14T22:14:34Z",
      "side": 1,
      "message": "Is it? When testing against \u0027Object\u0027 type, a cast against any type (T) could theoretically succeed.  Maybe the spec should say that only one interface can be bound to a given prototype, otherwise, it seems legal to have HTMLButtonElement and YetAnotherHtmlButtonElement which both point to the same JS prototype.",
      "parentUuid": "9c2ba1c2_85e1deeb",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_656f8acf",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 25
      },
      "lineNbr": 260,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-12T23:32:39Z",
      "side": 1,
      "message": "We were also having issues with classes that has only single method were treated as SAM even they were marked as @JsInterface. Can you cover that in your test cases as well?",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_45b086d5",
        "filename": "user/test/com/google/gwt/core/client/JsInterfaceTest.java",
        "patchSetId": 25
      },
      "lineNbr": 274,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-03-12T23:32:39Z",
      "side": 1,
      "message": "nit: your indentation is incorrect in most native methods.",
      "revId": "af4ec44ad1c779b5825026eb7e5c230bc9454a32",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}