{
  "comments": [
    {
      "key": {
        "uuid": "1e4de2ad_4cef1eb9",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/GwtAstBuilder.java",
        "patchSetId": 4
      },
      "lineNbr": 1267,
      "author": {
        "id": 5105
      },
      "writtenOn": "2019-03-04T18:51:49Z",
      "side": 1,
      "message": "remove",
      "range": {
        "startLine": 1267,
        "startChar": 6,
        "endLine": 1267,
        "endChar": 40
      },
      "revId": "b0fd2b7e45e1546578f76e68865ce6aa08345f90",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "926d6d14_649f4bca",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/GwtAstBuilder.java",
        "patchSetId": 4
      },
      "lineNbr": 1270,
      "author": {
        "id": 5105
      },
      "writtenOn": "2019-03-04T18:51:49Z",
      "side": 1,
      "message": "return",
      "range": {
        "startLine": 1270,
        "startChar": 8,
        "endLine": 1270,
        "endChar": 26
      },
      "revId": "b0fd2b7e45e1546578f76e68865ce6aa08345f90",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "671a5c37_57e78fec",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/GwtAstBuilder.java",
        "patchSetId": 4
      },
      "lineNbr": 1272,
      "author": {
        "id": 5105
      },
      "writtenOn": "2019-03-04T18:51:49Z",
      "side": 1,
      "message": "remove",
      "range": {
        "startLine": 1272,
        "startChar": 8,
        "endLine": 1272,
        "endChar": 14
      },
      "revId": "b0fd2b7e45e1546578f76e68865ce6aa08345f90",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7dd0f5c_dac9525b",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/GwtAstBuilder.java",
        "patchSetId": 4
      },
      "lineNbr": 1273,
      "author": {
        "id": 5105
      },
      "writtenOn": "2019-03-04T18:51:49Z",
      "side": 1,
      "message": "return",
      "range": {
        "startLine": 1273,
        "startChar": 7,
        "endLine": 1273,
        "endChar": 26
      },
      "revId": "b0fd2b7e45e1546578f76e68865ce6aa08345f90",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f0ea626_60213cb5",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/GwtAstBuilder.java",
        "patchSetId": 4
      },
      "lineNbr": 1275,
      "author": {
        "id": 5105
      },
      "writtenOn": "2019-03-04T18:51:49Z",
      "side": 1,
      "message": "remove",
      "range": {
        "startLine": 1274,
        "startChar": 1,
        "endLine": 1275,
        "endChar": 30
      },
      "revId": "b0fd2b7e45e1546578f76e68865ce6aa08345f90",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c51e2f7_eed42b44",
        "filename": "dev/core/test/com/google/gwt/dev/jjs/impl/Java8AstTest.java",
        "patchSetId": 4
      },
      "lineNbr": 1146,
      "author": {
        "id": 5105
      },
      "writtenOn": "2019-03-04T18:51:49Z",
      "side": 1,
      "message": "This setup does not compile in javac, it considers (I1 \u0026 I2\u003cString\u003e) has having more than 1 abstract method (namely foo(Object) and foo(String). However, if you add extends I2\u003cString\u003e to I1, then the code is valid in javac.",
      "range": {
        "startLine": 1143,
        "startChar": 98,
        "endLine": 1146,
        "endChar": 61
      },
      "revId": "b0fd2b7e45e1546578f76e68865ce6aa08345f90",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fec99c4_aeb3bf33",
        "filename": "dev/core/test/com/google/gwt/dev/jjs/impl/Java8AstTest.java",
        "patchSetId": 4
      },
      "lineNbr": 1146,
      "author": {
        "id": 5130
      },
      "writtenOn": "2019-03-04T19:09:58Z",
      "side": 1,
      "message": "Good to know - definitely appears to be valid in JDT, or at least our fork of it in GWT. Tweaking as you describe does resolve the assertions I ran into - within GWT though, not JDT.\n\nDoes having I1 extend I2\u003cString\u003e sufficiently test generics with intersection casts, or did you have something else in mind that I misunderstood?",
      "parentUuid": "2c51e2f7_eed42b44",
      "range": {
        "startLine": 1143,
        "startChar": 98,
        "endLine": 1146,
        "endChar": 61
      },
      "revId": "b0fd2b7e45e1546578f76e68865ce6aa08345f90",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03e6b86c_ff389eba",
        "filename": "dev/core/test/com/google/gwt/dev/jjs/impl/Java8AstTest.java",
        "patchSetId": 4
      },
      "lineNbr": 1146,
      "author": {
        "id": 5105
      },
      "writtenOn": "2019-03-04T22:29:21Z",
      "side": 1,
      "message": "This should be enough here. \n\nThere should be a test for this fix in Java8Test as well.\n\nSomething of similar structure to this test,\n\nassert(lambda instanceof Ix)\nI2 raw \u003d lambda;\nassert(raw.foo(...) \u003d\u003d ); // tests that the bridge exists and is correct\nassert(lambda.foo(...) \u003d\u003d )",
      "parentUuid": "8fec99c4_aeb3bf33",
      "range": {
        "startLine": 1143,
        "startChar": 98,
        "endLine": 1146,
        "endChar": 61
      },
      "revId": "b0fd2b7e45e1546578f76e68865ce6aa08345f90",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d595f08_e54757e5",
        "filename": "dev/core/test/com/google/gwt/dev/jjs/impl/Java8AstTest.java",
        "patchSetId": 4
      },
      "lineNbr": 1162,
      "author": {
        "id": 5105
      },
      "writtenOn": "2019-03-04T19:28:19Z",
      "side": 1,
      "message": "you should use the signature of foo here instead of \"foo\" since there will be two methods named \"foo\" (the other is the bridge foo(Object), and just by chance you are getting the right one here.\n\nLook at the implementation of method.getSignature() for details but it should be something like \"foo(Ljava/lang/String)V\"",
      "range": {
        "startLine": 1162,
        "startChar": 25,
        "endLine": 1162,
        "endChar": 60
      },
      "revId": "b0fd2b7e45e1546578f76e68865ce6aa08345f90",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": true
    }
  ]
}