{
  "comments": [
    {
      "key": {
        "uuid": "UyR8LC3A",
        "filename": "user/src/com/google/gwt/user/client/ui/Composite.java",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 5010
      },
      "writtenOn": "2013-05-20T23:03:22Z",
      "side": 1,
      "message": "\"Also, alternatively,\" -\u003e \"As an alternative,\"",
      "revId": "b54922690b688c7d8aff9ac19e3db8f8bbc9f9cc",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "UyeKsvJU",
        "filename": "user/src/com/google/gwt/user/client/ui/Composite.java",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 5110
      },
      "writtenOn": "2013-05-21T03:08:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "UyR8LC3A",
      "revId": "b54922690b688c7d8aff9ac19e3db8f8bbc9f9cc",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "UyV8Fg1U",
        "filename": "user/src/com/google/gwt/user/client/ui/Composite.java",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 5010
      },
      "writtenOn": "2013-05-20T23:03:22Z",
      "side": 1,
      "message": "Do we need to update the example?",
      "revId": "b54922690b688c7d8aff9ac19e3db8f8bbc9f9cc",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "UycKUGD4",
        "filename": "user/src/com/google/gwt/user/client/ui/Composite.java",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 5110
      },
      "writtenOn": "2013-05-21T03:08:35Z",
      "side": 1,
      "message": "Yes. I\u0027ll send another patch that converts all trivial Composite usages to Composite\u003cWidget\u003e.",
      "parentUuid": "UyV8Fg1U",
      "revId": "b54922690b688c7d8aff9ac19e3db8f8bbc9f9cc",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "UyX.fp-M",
        "filename": "user/src/com/google/gwt/user/client/ui/Composite.java",
        "patchSetId": 3
      },
      "lineNbr": 127,
      "author": {
        "id": 5010
      },
      "writtenOn": "2013-05-20T23:03:22Z",
      "side": 1,
      "message": "\"Returns the delegate widget passed to initWidget(). Subclasses may forward API calls to this delegate.\"",
      "revId": "b54922690b688c7d8aff9ac19e3db8f8bbc9f9cc",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "UyQKfMFg",
        "filename": "user/src/com/google/gwt/user/client/ui/Composite.java",
        "patchSetId": 3
      },
      "lineNbr": 127,
      "author": {
        "id": 5110
      },
      "writtenOn": "2013-05-21T03:08:35Z",
      "side": 1,
      "message": "I was keeping the wording similar with getWidget. Will update both.",
      "parentUuid": "UyX.fp-M",
      "revId": "b54922690b688c7d8aff9ac19e3db8f8bbc9f9cc",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "Uyd-Gs.4",
        "filename": "user/src/com/google/gwt/user/client/ui/Composite.java",
        "patchSetId": 3
      },
      "lineNbr": 140,
      "author": {
        "id": 5010
      },
      "writtenOn": "2013-05-20T23:03:22Z",
      "side": 1,
      "message": "\"The same widget will be wrapped and used as a delegate. if you want to use a different delegate, call initWidget(Widget, T) instead.\"",
      "revId": "b54922690b688c7d8aff9ac19e3db8f8bbc9f9cc",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "UyeKjHJo",
        "filename": "user/src/com/google/gwt/user/client/ui/Composite.java",
        "patchSetId": 3
      },
      "lineNbr": 140,
      "author": {
        "id": 5110
      },
      "writtenOn": "2013-05-21T03:08:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "Uyd-Gs.4",
      "revId": "b54922690b688c7d8aff9ac19e3db8f8bbc9f9cc",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "U5CHnqJ8",
        "filename": "user/src/com/google/gwt/user/client/ui/FocusComposite.java",
        "patchSetId": 3
      },
      "lineNbr": 127,
      "author": {
        "id": 5030
      },
      "writtenOn": "2013-05-20T22:54:47Z",
      "side": 1,
      "message": "Er (sorry for not catching it earlier), shouldn\u0027t these somehow use this.addXxxHandler and fireEvent? As coded here, the event passed to the handlers will have getDelegate() as its getSource(), instead of the FocusComposite. This unfortunately adds some overhead so I could udnerstand that you wouldn\u0027t want it, but then it should be clearly documented, as it\u0027s likely to surprise a lot of people (all those using the same handler for several widgets –e.g. through @UiHandler– and doing \"if te.getSource() \u003d\u003d someWidget)\" kind of tests)",
      "revId": "b54922690b688c7d8aff9ac19e3db8f8bbc9f9cc",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "U44WIhtk",
        "filename": "user/src/com/google/gwt/user/client/ui/FocusComposite.java",
        "patchSetId": 3
      },
      "lineNbr": 127,
      "author": {
        "id": 5031
      },
      "writtenOn": "2013-05-21T00:08:29Z",
      "side": 1,
      "message": "Oh good catch. \n\nI think the behavior of event.getSource() should stay the same in all cases. It should be easy to migrate to this new FocusComposite and the usage of FocusComposite should not break your app if you ever decide to switch from initWidget(Widget) to initWidget(Widget, T) because you want to add some decoration.\n\nSo I guess it should be this.addHandler(handler, \u003cevent type\u003e).",
      "parentUuid": "U5CHnqJ8",
      "revId": "b54922690b688c7d8aff9ac19e3db8f8bbc9f9cc",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "UySJ.tOw",
        "filename": "user/src/com/google/gwt/user/client/ui/FocusComposite.java",
        "patchSetId": 3
      },
      "lineNbr": 127,
      "author": {
        "id": 5110
      },
      "writtenOn": "2013-05-21T03:08:35Z",
      "side": 1,
      "message": "For this to work as expected (i.e. source \u003d\u003d composite and ideally with possible custom addXXXHandler impls at delegate), I will need to create anonymous class that changes the source for each handler type; I\u0027m not sure that is what we want.\n\nI will think little bit more on alternatives but I\u0027m not very optimistic about a good solution...",
      "parentUuid": "U44WIhtk",
      "revId": "b54922690b688c7d8aff9ac19e3db8f8bbc9f9cc",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "U5EE2dAw",
        "filename": "user/src/com/google/gwt/user/client/ui/FocusComposite.java",
        "patchSetId": 3
      },
      "lineNbr": 127,
      "author": {
        "id": 5030
      },
      "writtenOn": "2013-05-21T08:28:45Z",
      "side": 1,
      "message": "Yes, that\u0027d mean tracking, for each event, whether the handler was added to the delegate widget, something like:\n\n   private boolean dblClickHandlerRegistered;\n   …\n   public HandlerRegistration addDoubleClickHandler(DoubleClickHandler handler) {\n     if (!dblClickHandlerRegistered) {\n       getDelegate().addDoubleClickHandler(new DoubleClickHandler() {\n         @Override\n         public void onDoubleClick(DoubleClickEvent event) {\n           fireEvent(event);\n         }\n       });\n       dbleClickHandlerRegistered \u003d true;\n     }\n     return addHandler(handler, DoubleClickEvent.getType());\n   }\n\nThat\u0027s a lot of boilerplate and a bit of runtime overhead; and it doesn\u0027t remove the anonymous handler from the delegate when all the handlers are removed from the composite; this would require tracking the number of handlers added –unfortunately I don\u0027t think we can use getHandlerCount here as it doesn\u0027t account for queued adds/removes, when adding/removing handlers from within an event handler–, storing the HandlerRegistration for the anonymous handler, and wrapping the HandlerRegistration returned from addHandler() to remove the anonymous handler when the handler count reaches 0.\n\nNote that instead of an anonymous class, we could have an inner class implementing all the event handlers; similar to SuggestBox. I have no idea what the compiler would optimize best.\n\nLast, but not least, it\u0027ll possibly fire the events twice when getWidget()\u003d\u003dgetDelegate(); see issue 3533.",
      "parentUuid": "UySJ.tOw",
      "revId": "b54922690b688c7d8aff9ac19e3db8f8bbc9f9cc",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "U0ZSZqnY",
        "filename": "user/src/com/google/gwt/user/client/ui/FocusComposite.java",
        "patchSetId": 3
      },
      "lineNbr": 127,
      "author": {
        "id": 5110
      },
      "writtenOn": "2013-05-21T20:57:48Z",
      "side": 1,
      "message": "Actually, I was thinking of a simpler route but I still don\u0027t like the code bloat:\n\n public HandlerRegistration addDoubleClickHandler(DoubleClickHandler handler) {\n   return getDelegate().addDoubleClickHandler(new DoubleClickHandler() {\n     @Override\n     public void onDoubleClick(DoubleClickEvent event) {\n       Object oldSource \u003d event.getSource();\n       event.overrideSource(this);\n       try {\n         handler.onDoubleClickEvent(event);\n       } finally {\n         event.overrideSource(oldSource);\n       }\n     }\n   });\n }\n\nAre you sure, this will fire the events twice? I don\u0027t see a reason.\nIt looks like in the SuggestBox case,  the event is also delegated from the handler:\nhttp://gwt-code-reviews.appspot.com/1785803/",
      "parentUuid": "U5EE2dAw",
      "revId": "b54922690b688c7d8aff9ac19e3db8f8bbc9f9cc",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "U.GrYt3I",
        "filename": "user/src/com/google/gwt/user/client/ui/FocusComposite.java",
        "patchSetId": 3
      },
      "lineNbr": 127,
      "author": {
        "id": 5030
      },
      "writtenOn": "2013-05-22T09:34:15Z",
      "side": 1,
      "message": "That\u0027d mean making overrideSource public, which I don\u0027t think is something we want to do.\n\nAn alternative would be to add some generic helper in com.google.gwt.event.shared that would internally do the overrideSource and GwtEvent#dispatch, and then use:\n\n private GwtEventForwardingHelper helper \u003d new GwtEventForwardingHelper(this);\n\n public HandlerRegistration addDoubleClickHandler(final DoubleClickHandler handler) {\n   return getDelegate().addDoubleClickHandler(new DoubleClickHandler() {\n     @Override\n     public void onDoubleClick(DoubleClickEvent event) {\n       helper.dispatch(event, handler);\n     }\n   });\n }\n\nActually, it wouldn\u0027t even need to be in com.google.gwt.event and reusable: we could make a local/inner class extending EventBus so it could call setSourceOfEvent and dispatchEvent:\n\n // extends SimpleEventBus, all we want is accessing \u0027protected static\u0027 methods from EventBus\n private static class GwtEventForwardingHelper extends SimpleEventBus {\n   public static \u003cH\u003e void dispatch(Composite\u003c?\u003e source, GwtEvent\u003cH\u003e event, H handler) {\n     Object oldSource \u003d event.getSource();\n     setSourceOfEvent(event, source);\n     try {\n       dispatchEvent(event, handler);\n     } finally {\n       setSourceOfEvent(event, oldSource);\n     }\n   }\n }\n\n // helper method for Composite subclasses\n protected \u003cH\u003e void dispatchEvent(GwtEvent\u003cH\u003e event, H handler) {\n   GwtEventForwardingHelper.dispatch(this, event, handler);\n }\n\n public HandlerRegistration addDoubleClickHandler(final DoubleClickHandler handler) {\n   return getDelegate().addDoubleClickHandler(new DoubleClickHandler() {\n     @Override\n     public void onDoubleClick(DoubleClickEvent event) {\n       dispatchEvent(event, handler);\n     }\n   });\n }",
      "parentUuid": "U0ZSZqnY",
      "revId": "b54922690b688c7d8aff9ac19e3db8f8bbc9f9cc",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}