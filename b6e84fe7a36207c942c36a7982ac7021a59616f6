{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "59962ee5_860aee28",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5110
      },
      "writtenOn": "2021-05-19T01:27:33Z",
      "side": 1,
      "message": "Friendly ping",
      "revId": "b6e84fe7a36207c942c36a7982ac7021a59616f6",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d75259f_1676e44c",
        "filename": "user/super/com/google/gwt/emul/javaemul/internal/ArrayHelper.java",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 5105
      },
      "writtenOn": "2021-05-19T14:31:50Z",
      "side": 1,
      "message": "setLength should not be needed here. slice() already returns an array with that length. What am I missing here?",
      "range": {
        "startLine": 35,
        "startChar": 4,
        "endLine": 35,
        "endChar": 43
      },
      "revId": "b6e84fe7a36207c942c36a7982ac7021a59616f6",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "21effe78_f85f0f90",
        "filename": "user/super/com/google/gwt/emul/javaemul/internal/ArrayHelper.java",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 5110
      },
      "writtenOn": "2021-05-19T18:36:06Z",
      "side": 1,
      "message": "slice trims the index. Added a comment to clarify.",
      "parentUuid": "0d75259f_1676e44c",
      "range": {
        "startLine": 35,
        "startChar": 4,
        "endLine": 35,
        "endChar": 43
      },
      "revId": "b6e84fe7a36207c942c36a7982ac7021a59616f6",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e036edd2_0041cae5",
        "filename": "user/super/com/google/gwt/emul/javaemul/internal/ArrayHelper.java",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 5105
      },
      "writtenOn": "2021-05-19T21:44:37Z",
      "side": 1,
      "message": "Does it make sense to use clone to enlarge an array? It seems to me that this is only use from Arrays.copyOf which flows to Arrays.copyObjectArray which already does the setLength.\n\nI think copyObjectArray is the right place for the set length, since there is an analogous setLength in copyPrimitiveArray.\n\nThose two have different behaviour though, primitive arrays are trimmed (if they were expanded the new slots would need to be filled with the right 0 constant).\n\nBut I see that there are many calls to clone directly, ok.",
      "parentUuid": "21effe78_f85f0f90",
      "range": {
        "startLine": 35,
        "startChar": 4,
        "endLine": 35,
        "endChar": 43
      },
      "revId": "b6e84fe7a36207c942c36a7982ac7021a59616f6",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da668ce6_a5e26e37",
        "filename": "user/super/com/google/gwt/emul/javaemul/internal/ArrayHelper.java",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 5110
      },
      "writtenOn": "2021-05-19T23:58:14Z",
      "side": 1,
      "message": "\u003e Does it make sense to use clone to enlarge an array? It seems to me that this is only use from Arrays.copyOf which flows to Arrays.copyObjectArray which already does the setLength.\n\nMy motivation is; changing the contract of ArrayHelper.clone to respect the requested size since Wasm version already does that. If I make the contract consistent in the other direction; than that would result in unnecessary resizing for them Wasm case.\n\n\u003e I think copyObjectArray is the right place for the set length, since there is an analogous setLength in copyPrimitiveArray.\n\u003e Those two have different behaviour though, primitive arrays are trimmed\n\nI didn\u0027t see the analogous setLength on copyPrimitiveArray, that doesn\u0027t use cloning. Primitives are not actually trimmed; the Math.min code there is to optimize the \"copy\" operation.\nLike you said, the two method (even though the name suggest otherwise) work differently (e.g. one takes the target as a parameter while the other needs to resize). That\u0027s kind of unfortunate but that\u0027s beyond the scope of this CL.",
      "parentUuid": "e036edd2_0041cae5",
      "range": {
        "startLine": 35,
        "startChar": 4,
        "endLine": 35,
        "endChar": 43
      },
      "revId": "b6e84fe7a36207c942c36a7982ac7021a59616f6",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46"
    }
  ]
}