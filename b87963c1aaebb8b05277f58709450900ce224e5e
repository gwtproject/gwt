{
  "comments": [
    {
      "key": {
        "uuid": "f7268b4e_7374e0b6",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/JavaToJavaScriptCompiler.java",
        "patchSetId": 1
      },
      "lineNbr": 1456,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-01-30T21:22:12Z",
      "side": 1,
      "message": "I think this should probably be more effective as part of the optimization loop (but then we might need to make sure this pass does not mess with typetightener.",
      "range": {
        "startLine": 1454,
        "startChar": 0,
        "endLine": 1456,
        "endChar": 5
      },
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7b2535a_71d538bd",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/JavaToJavaScriptCompiler.java",
        "patchSetId": 1
      },
      "lineNbr": 1456,
      "author": {
        "id": 7701
      },
      "writtenOn": "2015-02-02T19:01:04Z",
      "side": 1,
      "message": "For its purpose of reducing code size, running it once is enough. And it may not give much more optimization opportunities to other optimizers. It may reduce the opportunity for typetightener, for example, \n\nif (a instanceof C) { B c \u003d (C) a; }\n\nc can be tightened to B without removing the redundant cast.\n\nSo I put it here after the loop.",
      "parentUuid": "f7268b4e_7374e0b6",
      "range": {
        "startLine": 1454,
        "startChar": 0,
        "endLine": 1456,
        "endChar": 5
      },
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97e9cf2d_69553d04",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/JavaToJavaScriptCompiler.java",
        "patchSetId": 1
      },
      "lineNbr": 1456,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-02-02T19:59:33Z",
      "side": 1,
      "message": "I think you might be right in that a priori it seems that it would not create many opportunities. \n\nIf the typetightener was the only concern, there is an easy fix for that: having this pass only change the type of the JVariableRef (like it is done for JFieldRefs) and then let the optimizer loop (typetightener) do the removal work.",
      "parentUuid": "b7b2535a_71d538bd",
      "range": {
        "startLine": 1454,
        "startChar": 0,
        "endLine": 1456,
        "endChar": 5
      },
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c70a417_e44b7a15",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/JavaToJavaScriptCompiler.java",
        "patchSetId": 1
      },
      "lineNbr": 1456,
      "author": {
        "id": 7701
      },
      "writtenOn": "2015-02-06T00:55:24Z",
      "side": 1,
      "message": "It is more consistent having the pass in the optimization loop. So moved it there.\n\nI still prefer to having this optimizer remove the cast check rather than just change the type. Since typetightener runs before redundantcastremover, the concern about typetightener may not be a big problem.",
      "parentUuid": "97e9cf2d_69553d04",
      "range": {
        "startLine": 1454,
        "startChar": 0,
        "endLine": 1456,
        "endChar": 5
      },
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36ee69c7_4d9a9980",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/JavaToJavaScriptCompiler.java",
        "patchSetId": 1
      },
      "lineNbr": 1456,
      "author": {
        "id": 5105
      },
      "writtenOn": "2016-06-13T23:29:22Z",
      "side": 1,
      "message": "The passes are run in a loop, so TypeTightener will definitely see the changes made by RedundantCastRemoval. \n\nI am thinking on cases like\n\nA is a class that implements I\n\n    A a \u003d new A()\n    if (a instanceof I) {\n        ((I) a).m1();\n         A b \u003d a;\n         b.m();",
      "parentUuid": "1c70a417_e44b7a15",
      "range": {
        "startLine": 1454,
        "startChar": 0,
        "endLine": 1456,
        "endChar": 5
      },
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2bfb5b87_b29a7878",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/ast/JConditional.java",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-01-21T17:52:51Z",
      "side": 1,
      "message": "Th normal process to replace parts of an If statement is to create a new one. This setters would be needed.",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 85,
        "endChar": 3
      },
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7f76b97_2b60d99c",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/ast/JConditional.java",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 7701
      },
      "writtenOn": "2015-01-30T16:34:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2bfb5b87_b29a7878",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 85,
        "endChar": 3
      },
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b17af8b_85dbc2a4",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/RedundantCastRemover.java",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-01-21T17:52:51Z",
      "side": 1,
      "message": "use the com.google.gwt.dev.collect.Stack instead.",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 42,
        "endChar": 23
      },
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7f76b97_8b1c6d0d",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/RedundantCastRemover.java",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 7701
      },
      "writtenOn": "2015-01-30T16:34:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4b17af8b_85dbc2a4",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 42,
        "endChar": 23
      },
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b17af8b_65e5e662",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/RedundantCastRemover.java",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-01-21T17:52:51Z",
      "side": 1,
      "message": "Let\u0027s call it \n\ninferredVariableTypesByVariable",
      "range": {
        "startLine": 77,
        "startChar": 52,
        "endLine": 77,
        "endChar": 90
      },
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7f76b97_0b587dca",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/RedundantCastRemover.java",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 7701
      },
      "writtenOn": "2015-01-30T16:34:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4b17af8b_65e5e662",
      "range": {
        "startLine": 77,
        "startChar": 52,
        "endLine": 77,
        "endChar": 90
      },
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2bc27b57_34f05021",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/RedundantCastRemover.java",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-01-21T17:52:51Z",
      "side": 1,
      "message": "We could also remove redundant instanceof operations, replacing them by a simple null check if the type of the variable is not JnonNull, and remove if the type is JNonNull",
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7f76b97_ab7b2910",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/RedundantCastRemover.java",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 7701
      },
      "writtenOn": "2015-01-30T16:34:41Z",
      "side": 1,
      "message": "If it is not JNonNull, I think just keeping it unchanged is the best choice. Do you have any better ideas?",
      "parentUuid": "2bc27b57_34f05021",
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "973d4f4f_1c2eb1b6",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/RedundantCastRemover.java",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-01-30T21:22:12Z",
      "side": 1,
      "message": "Actually  if the variable is in indicatedTypes... then it is already known to be non null, hence we can replace instanceof by true (and maybe run DeadCodeElimination later to remove the code) in that scenario.",
      "parentUuid": "f7f76b97_ab7b2910",
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2bc27b57_f4bc1839",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/RedundantCastRemover.java",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-01-21T17:52:51Z",
      "side": 1,
      "message": "this could be a canTriviallyCast check, but it may not be worth the cost.",
      "range": {
        "startLine": 95,
        "startChar": 12,
        "endLine": 95,
        "endChar": 86
      },
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1714ff86_c772e030",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/RedundantCastRemover.java",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 7701
      },
      "writtenOn": "2015-01-30T16:34:41Z",
      "side": 1,
      "message": "yes, it may not be worth the cost.",
      "parentUuid": "2bc27b57_f4bc1839",
      "range": {
        "startLine": 95,
        "startChar": 12,
        "endLine": 95,
        "endChar": 86
      },
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb994384_52c89485",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/RedundantCastRemover.java",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-01-21T17:52:51Z",
      "side": 1,
      "message": "inferredTypesAtCurrentProgramPoint?",
      "range": {
        "startLine": 141,
        "startChar": 6,
        "endLine": 141,
        "endChar": 43
      },
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7f76b97_8b0f4da6",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/RedundantCastRemover.java",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 7701
      },
      "writtenOn": "2015-01-30T16:34:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eb994384_52c89485",
      "range": {
        "startLine": 141,
        "startChar": 6,
        "endLine": 141,
        "endChar": 43
      },
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2bfb5b87_52287470",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/RedundantCastRemover.java",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-01-21T17:52:51Z",
      "side": 1,
      "message": "Normally to replace parts of an expression we create a new one instead of setting its members.\n\nHaving the setters introduces the risk that a pass modifies some node but does not record its modification, other than that  but I don\u0027t see why we shouldn\u0027t write the code this way.",
      "range": {
        "startLine": 130,
        "startChar": 0,
        "endLine": 146,
        "endChar": 91
      },
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7f76b97_eb1c11e5",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/RedundantCastRemover.java",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 7701
      },
      "writtenOn": "2015-01-30T16:34:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2bfb5b87_52287470",
      "range": {
        "startLine": 130,
        "startChar": 0,
        "endLine": 146,
        "endChar": 91
      },
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b17af8b_054a32f7",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/RedundantCastRemover.java",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-01-21T17:52:51Z",
      "side": 1,
      "message": "for",
      "range": {
        "startLine": 161,
        "startChar": 19,
        "endLine": 161,
        "endChar": 24
      },
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7f76b97_cb1955f3",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/RedundantCastRemover.java",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 7701
      },
      "writtenOn": "2015-01-30T16:34:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4b17af8b_054a32f7",
      "range": {
        "startLine": 161,
        "startChar": 19,
        "endLine": 161,
        "endChar": 24
      },
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb994384_32acf0a6",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/RedundantCastRemover.java",
        "patchSetId": 1
      },
      "lineNbr": 164,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-01-21T17:52:51Z",
      "side": 1,
      "message": "This a a bit over conservative, if there are no assignments in the body to the variable then the current types are still valid.\n\nWouldn\u0027t this prevent optimizing code like\n\n  if (a instance of A) {\n    while b {\n       c \u003d (A) a\n    }\n   }\n\non the other hand this pattern isn\u0027t too common in handwritten code, but it may be it arises during transformations.\n\nCould you add a test for this case documenting the behaviour.",
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37c5835d_351a109d",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/RedundantCastRemover.java",
        "patchSetId": 1
      },
      "lineNbr": 164,
      "author": {
        "id": 7701
      },
      "writtenOn": "2015-01-30T16:34:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eb994384_32acf0a6",
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb994384_325a3046",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/RedundantCastRemover.java",
        "patchSetId": 1
      },
      "lineNbr": 184,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-01-21T17:52:51Z",
      "side": 1,
      "message": "Should we also handle \n\n  if (! a instanceof A) {\n  } else {\n   // here a is of type A\n  }\n\nalthough is not that common to write code in this way.\n\nAlso the code for If and conditional is almost the same, maybe we can refactor it into a single function?",
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7f76b97_6ba5c11b",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/RedundantCastRemover.java",
        "patchSetId": 1
      },
      "lineNbr": 184,
      "author": {
        "id": 7701
      },
      "writtenOn": "2015-01-30T16:34:41Z",
      "side": 1,
      "message": "DeadCodeElimination handles the case. It converts it to\n\nif (a instanceof A){\n  previous else stmt;\n}\nelse{\n  previous then stmt;\n}",
      "parentUuid": "eb994384_325a3046",
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2bc27b57_d4263c23",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/RedundantCastRemover.java",
        "patchSetId": 1
      },
      "lineNbr": 296,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-01-21T17:52:51Z",
      "side": 1,
      "message": "maybe extract as a method, \n\n  multimapIntersection",
      "range": {
        "startLine": 292,
        "startChar": 0,
        "endLine": 296,
        "endChar": 11
      },
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7f76b97_8b590d7e",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/RedundantCastRemover.java",
        "patchSetId": 1
      },
      "lineNbr": 296,
      "author": {
        "id": 7701
      },
      "writtenOn": "2015-01-30T16:34:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2bc27b57_d4263c23",
      "range": {
        "startLine": 292,
        "startChar": 0,
        "endLine": 296,
        "endChar": 11
      },
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab202bdf_2be105a9",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/RedundantCastRemover.java",
        "patchSetId": 1
      },
      "lineNbr": 310,
      "author": {
        "id": 5445
      },
      "writtenOn": "2015-01-20T22:21:43Z",
      "side": 1,
      "message": "[info] First sentence should end with a period.",
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2bfb5b87_753d9adf",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/RedundantCastRemover.java",
        "patchSetId": 1
      },
      "lineNbr": 313,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-01-21T17:52:51Z",
      "side": 1,
      "message": "maybe updateIndicatedTypes, or propagateTypeDefinitions",
      "range": {
        "startLine": 313,
        "startChar": 17,
        "endLine": 313,
        "endChar": 38
      },
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7f76b97_6b4ae19a",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/RedundantCastRemover.java",
        "patchSetId": 1
      },
      "lineNbr": 313,
      "author": {
        "id": 7701
      },
      "writtenOn": "2015-01-30T16:34:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2bfb5b87_753d9adf",
      "range": {
        "startLine": 313,
        "startChar": 17,
        "endLine": 313,
        "endChar": 38
      },
      "revId": "b87963c1aaebb8b05277f58709450900ce224e5e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}