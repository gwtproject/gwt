{
  "comments": [
    {
      "key": {
        "uuid": "17c4087c_79aca71d",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/JsInteropRestrictionChecker.java",
        "patchSetId": 5
      },
      "lineNbr": 41,
      "author": {
        "id": 5110
      },
      "writtenOn": "2015-03-07T02:56:38Z",
      "side": 1,
      "message": "I don\u0027t remember if talked about it before (we might) but we are probably missing the checks for the following mistake:\nIBuggy1 { void a() }\nIBuggy2 { @JsProperty void a(){} }\nBuggy implements IBuggy1,IBuggy2 {}\n\nYou can add that as a TODO somewhere (not necessarily in this one).",
      "revId": "bd9fef0d36cae3db6222289b9221dfd3a7ad8ee7",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7d0548a_88fb574b",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/JsInteropRestrictionChecker.java",
        "patchSetId": 5
      },
      "lineNbr": 41,
      "author": {
        "id": 5410
      },
      "writtenOn": "2015-03-09T19:16:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "17c4087c_79aca71d",
      "revId": "bd9fef0d36cae3db6222289b9221dfd3a7ad8ee7",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17c4087c_d96e1381",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/JsInteropRestrictionChecker.java",
        "patchSetId": 5
      },
      "lineNbr": 163,
      "author": {
        "id": 5110
      },
      "writtenOn": "2015-03-07T02:56:38Z",
      "side": 1,
      "message": "getImmediateOrTransitiveXXX methods are potentially costly and we are redundantly calling them here. I think it would be good to avoid that.\n\nYou may consider something like following:\n\n    if (jsMemberName \u003d\u003d null) {\n      logError(\"\u0027%s\u0027 can\u0027t be exported because the method overloads multiple methods with \"\n          + \"different names.\", qualifiedMethodName);\n      return;\n    }\n\n    switch (method.getImmediateOrTransitiveJsPropertyType()) {\n      case HAS:\n        // Has JS dispatch consumes no named slot on the prototype and so can not cause or suffer\n        // from any collisions.\n        break;\n      case GET:\n        if (currentJsTypeMethodNameByGetterNames.put(jsMemberName, qualifiedMethodName) !\u003d null) {\n          logError(\"There can\u0027t be more than one getter for JS property \u0027%s\u0027 in type \u0027%s\u0027.\",\n              jsMemberName, typeName);\n        }\n        checkNameCollisionForGetterAndRegular(jsMemberName, typeName);\n        break;\n      case SET:\n        if (currentJsTypeMethodNameBySetterNames.put(jsMemberName, qualifiedMethodName) !\u003d null) {\n          logError(\"There can\u0027t be more than one setter for JS property \u0027%s\u0027 in type \u0027%s\u0027.\",\n              jsMemberName, typeName);\n        }\n        checkNameCollisionForSetterAndRegular(jsMemberName, typeName);\n        break;\n      case NONE:\n        // If it\u0027s just an regular JsType method.\n        if (currentJsTypeMethodNameByMemberNames.put(jsMemberName, qualifiedMethodName) !\u003d null) {\n          logError(\"\u0027%s\u0027 can\u0027t be exported because the member name \u0027%s\u0027 is already taken.\",\n              qualifiedMethodName, jsMemberName);\n        }\n        checkNameCollisionForGetterAndRegular(jsMemberName, typeName);\n        checkNameCollisionForSetterAndRegular(jsMemberName, typeName);\n        break;\n    }",
      "revId": "bd9fef0d36cae3db6222289b9221dfd3a7ad8ee7",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7d0548a_c8438ffb",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/JsInteropRestrictionChecker.java",
        "patchSetId": 5
      },
      "lineNbr": 163,
      "author": {
        "id": 5410
      },
      "writtenOn": "2015-03-09T19:16:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "17c4087c_d96e1381",
      "revId": "bd9fef0d36cae3db6222289b9221dfd3a7ad8ee7",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}