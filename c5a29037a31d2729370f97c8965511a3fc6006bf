{
  "comments": [
    {
      "key": {
        "uuid": "166509c4_3d86fbe0",
        "filename": "user/super/com/google/gwt/emul/java/lang/Long.java",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 5542
      },
      "writtenOn": "2015-10-31T13:35:20Z",
      "side": 1,
      "message": "Maybe it should be ((int) l) ^ ((int) (l \u003e\u003e\u003e 32))?\n\nGetting highest and lowest two bytes in long is very common/frequent operation in this class, is it worth to make such an optimization for this two operations? Then hashCode will be fast enough, I guess.",
      "revId": "c5a29037a31d2729370f97c8965511a3fc6006bf",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6195673_487d0b96",
        "filename": "user/super/com/google/gwt/emul/java/lang/Long.java",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 5110
      },
      "writtenOn": "2015-10-31T19:08:28Z",
      "side": 1,
      "message": "Maybe we can optimize it little but not sure how much. For any bit operations new implementation need to switch back to full emulation mode but can\u0027t se any easy way out of it\n\nTo solve this specific case, I think the proper way is simply implement the hashcode at long emulation level. Then we can do an optimal calculation there.",
      "parentUuid": "166509c4_3d86fbe0",
      "revId": "c5a29037a31d2729370f97c8965511a3fc6006bf",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}