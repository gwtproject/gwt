{
  "comments": [
    {
      "key": {
        "uuid": "f213e69e_a41c0282",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/JsoDevirtualizer.java",
        "patchSetId": 1
      },
      "lineNbr": 224,
      "author": {
        "id": 5130
      },
      "writtenOn": "2014-01-27T18:51:19Z",
      "side": 1,
      "message": "Marginally off topic, but not all JSO code actually is okay with \u0027this\u0027 being null - if the compiler decides that a JSO is null always null then even calls like .cast() (which should be just syntactic sugar and can\u0027t fail on anything, right?) will be replaced with null.nullMethod(). Is that a) desired behavior (in which cast your null check can also be added here) or b) considered a bug?",
      "revId": "c74ed36b43e1f19247ca3f4dc2628a0608731171",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2f7c297_54d182e7",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/JsoDevirtualizer.java",
        "patchSetId": 1
      },
      "lineNbr": 224,
      "author": {
        "id": 5105
      },
      "writtenOn": "2014-01-27T19:07:45Z",
      "side": 1,
      "message": "And dispatches on interfaces that are dual impl (i.e. implemented by both JSOs and regular classes) get a JS type error if the this is null.\n\nAt some point we will have to bite the bullet and make the null check on JSOs.\n\nIt should be safe to check null in the method created by getOrCreateDevirtualMethod as this is the case where a typeerror occurs if this\u003d null.",
      "parentUuid": "f213e69e_a41c0282",
      "revId": "c74ed36b43e1f19247ca3f4dc2628a0608731171",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2f7c297_941acaca",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/JsoDevirtualizer.java",
        "patchSetId": 1
      },
      "lineNbr": 224,
      "author": {
        "id": 5010
      },
      "writtenOn": "2014-01-27T19:39:14Z",
      "side": 1,
      "message": "Actually, I was thinking that perhaps we could introduce an @AllowNullThis annotation and put it on methods like cast() where we rely on such trickery. It would be better documentation of what\u0027s currently an obscure practice. But it might be hard to find and update all the places where we do that.\n\nFor now I\u0027m hoping that excluding all JSO\u0027s is sufficient. It seems like non-JSO code that relies on a null \"this\" would have failed in Dev Mode before, so it should be rare?",
      "parentUuid": "d2f7c297_54d182e7",
      "revId": "c74ed36b43e1f19247ca3f4dc2628a0608731171",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2f7c297_1a256139",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/JsoDevirtualizer.java",
        "patchSetId": 1
      },
      "lineNbr": 224,
      "author": {
        "id": 5105
      },
      "writtenOn": "2014-01-27T23:25:24Z",
      "side": 1,
      "message": "Excluding JSO is sufficient for now, the dual impl interfaces will throw a TypeError on null. So that would work similarly to DevMode.",
      "parentUuid": "d2f7c297_941acaca",
      "revId": "c74ed36b43e1f19247ca3f4dc2628a0608731171",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2f7c297_b1a43833",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/MakeCallsStatic.java",
        "patchSetId": 1
      },
      "lineNbr": 394,
      "author": {
        "id": 5105
      },
      "writtenOn": "2014-01-27T17:20:27Z",
      "side": 1,
      "message": "Maybe rename isJso to isJsoCall?",
      "revId": "c74ed36b43e1f19247ca3f4dc2628a0608731171",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2f7c297_7fe57747",
        "filename": "dev/core/super/com/google/gwt/dev/jjs/intrinsic/com/google/gwt/lang/Exceptions.java",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-01-27T19:58:33Z",
      "side": 1,
      "message": "instead of adding this method call, can we just put arg.toString where it is accessed? IIRC, this was the cheapest way to do the check per Dart team\u0027s expertiments and It will result in TypeError which makes a lot of sense.",
      "range": {
        "startLine": 106,
        "startChar": 15,
        "endLine": 106,
        "endChar": 27
      },
      "revId": "c74ed36b43e1f19247ca3f4dc2628a0608731171",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2f7c297_df990baf",
        "filename": "dev/core/super/com/google/gwt/dev/jjs/intrinsic/com/google/gwt/lang/Exceptions.java",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 5010
      },
      "writtenOn": "2014-01-27T20:15:06Z",
      "side": 1,
      "message": "That\u0027s a bit trickier:\n\nThe optimization pass is in the Java AST, not the JavaScript AST, so we\u0027d probably have to add the method call anyway and replace it with toString later on.\n\nThe call may be an expression (such as foo().bar().baz() and we don\u0027t want to evaluate the first part of the chain twice, so we\u0027d have to introduce a variable for it:\n\n  var temp1 \u003d foo();\n  temp1.toString;\n  var temp2 \u003d bar(temp1);\n  temp2.toString;\n  baz(temp2);\n\nAnother possibility would be to do the null check in the called method rather than the caller. That would make adding arg1.toString pretty easy. I put it in the caller because I thought the stack trace looked a bit better - we\u0027re blaming the caller rather than the callee.",
      "parentUuid": "d2f7c297_7fe57747",
      "range": {
        "startLine": 106,
        "startChar": 15,
        "endLine": 106,
        "endChar": 27
      },
      "revId": "c74ed36b43e1f19247ca3f4dc2628a0608731171",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2f7c297_ffd4c7ff",
        "filename": "dev/core/super/com/google/gwt/dev/jjs/intrinsic/com/google/gwt/lang/Exceptions.java",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-01-27T20:57:57Z",
      "side": 1,
      "message": "Ok, I found it here: https://plus.google.com/+GoogleChromeDevelopers/posts/AcQJn4L2XAp\n\nI think it should be fine to introduce the check to call site.\nIn addition to being fast, I also like the idea of keeping the semantics closer to js by letting browser throw type error.",
      "parentUuid": "d2f7c297_df990baf",
      "range": {
        "startLine": 106,
        "startChar": 15,
        "endLine": 106,
        "endChar": 27
      },
      "revId": "c74ed36b43e1f19247ca3f4dc2628a0608731171",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2f7c297_9ae95194",
        "filename": "dev/core/super/com/google/gwt/dev/jjs/intrinsic/com/google/gwt/lang/Exceptions.java",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 5105
      },
      "writtenOn": "2014-01-27T23:25:24Z",
      "side": 1,
      "message": "If the method is small enough and written with conditional instead of if then else, JsInliner will inline it.",
      "parentUuid": "d2f7c297_ffd4c7ff",
      "range": {
        "startLine": 106,
        "startChar": 15,
        "endLine": 106,
        "endChar": 27
      },
      "revId": "c74ed36b43e1f19247ca3f4dc2628a0608731171",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}