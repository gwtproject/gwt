{
  "comments": [
    {
      "key": {
        "uuid": "a47f9520_5b622fbb",
        "filename": "build.gradle",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-08-21T16:59:46Z",
      "side": 1,
      "message": "Remove this file from the patch.",
      "revId": "c8db9d6efd188c43a986d8ec5ea378f6c4a76e33",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a47f9520_7b5febf1",
        "filename": "dev/build.gradle",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-08-21T16:59:46Z",
      "side": 1,
      "message": "Remove this file from the patch.",
      "revId": "c8db9d6efd188c43a986d8ec5ea378f6c4a76e33",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a47f9520_e666e248",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/Devirtualizer.java",
        "patchSetId": 2
      },
      "lineNbr": 463,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-08-21T20:33:19Z",
      "side": 1,
      "message": "This needs to be handled in a more generic way.\n\nAll supers of Double and Boolean need to be devirtualized so the if statement should be pulled out and be something like\n\nif (isSuper(enclosingType, program.getJLDouble)) {\n  possibleTargetTypes |\u003d DOUBLE;\n}\n\nif (isSuper(enclosingType, program.getJLBoolean)) {\n  possibleTargetTypes |\u003d BOOLEAN;\n}\n\nAdd the relevant tests for these scenarios.",
      "range": {
        "startLine": 460,
        "startChar": 3,
        "endLine": 463,
        "endChar": 4
      },
      "revId": "c8db9d6efd188c43a986d8ec5ea378f6c4a76e33",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a47f9520_b3b9f715",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/Devirtualizer.java",
        "patchSetId": 2
      },
      "lineNbr": 463,
      "author": {
        "id": 5001
      },
      "writtenOn": "2015-08-21T21:36:46Z",
      "side": 1,
      "message": "Agreed. This is a holdover from the old patch which use to just divirtualize all of Number.java.\n\nWill fix.",
      "parentUuid": "a47f9520_e666e248",
      "range": {
        "startLine": 460,
        "startChar": 3,
        "endLine": 463,
        "endChar": 4
      },
      "revId": "c8db9d6efd188c43a986d8ec5ea378f6c4a76e33",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a47f9520_5b06afda",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/RewriteBooleanAndDoubleBoxedInstantiations.java",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-08-21T16:59:46Z",
      "side": 1,
      "message": "I think I suggested to rewrite this preoptimizations. But given all the work that is done in postoptimizations I think it makes sense to do this rewriting as a post normalization. \n\nMoving the $createXXX to Util.java eliminates the need to keep Double and Boolean as codegen types (not that I care for the size they would bring, but more for the assymetry between these and String).\n\nalso the $create versions that do not take strings do not even need to exist in the post opimization scenario, and they could be just replaced by the parameter.",
      "revId": "c8db9d6efd188c43a986d8ec5ea378f6c4a76e33",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a47f9520_fbbafb58",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/RewriteBooleanAndDoubleBoxedInstantiations.java",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 5001
      },
      "writtenOn": "2015-08-21T17:12:38Z",
      "side": 1,
      "message": "If you do it post optimizations, you\u0027ll have to modify optimization passes:\n\n1. SameParameterValueOptimizer has to avoid optimizing the args to the Double/Boolean ctors. Pruner can\u0027t prune the args either which are unused.\n\n2. Pruner can\u0027t remove the $create functions. They won\u0027t be referenced by the AST preoptimization, and therefore will get deleted, so they\u0027ll have to be moved to a code-gen-type to avoid being deadstripped until the end.\n\nAs things exist now, \"new Double(42)\" will either result in replacement as \"new Double()\" because the arg is unused, or result in \"new Double()\" if only one instantiation exists because of SameParameterValueOptimizer moving the arg into the body of the ctor.\n\nSo the tradeoff is having to specialize the optimization passes for Double/Boolean.",
      "parentUuid": "a47f9520_5b06afda",
      "revId": "c8db9d6efd188c43a986d8ec5ea378f6c4a76e33",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a47f9520_3bc723ac",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/RewriteBooleanAndDoubleBoxedInstantiations.java",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-08-21T17:45:59Z",
      "side": 1,
      "message": "I\"think modification to the optimization passes should be minimal, but there might be cases I am overlooking.\n\n1. SBVO, yes needs to exclude constructors for devirtualized classes. AFAICT it is already a potential problem for string, so it needs to be fixed anyway.\n\n2. I suggest that the $create functions be moved to intrinsic (where they seem to belong anyway), probably to Util.java which I think it is already a codegen type.\n\n\nIn short I don\u0027t think we need to specialize any of the passes anymore than we did/didnt do for strings.",
      "parentUuid": "a47f9520_fbbafb58",
      "revId": "c8db9d6efd188c43a986d8ec5ea378f6c4a76e33",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a47f9520_7bfa8b37",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/TypeCategory.java",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-08-21T16:59:46Z",
      "side": 1,
      "message": "Heed this comment. TypeCategory here needs to be in sync with array.\n\nArray needs to contemplate these cases correctly.\n\nAdd tests for the Double[] and Boolean[] arrays.",
      "range": {
        "startLine": 29,
        "startChar": 2,
        "endLine": 29,
        "endChar": 70
      },
      "revId": "c8db9d6efd188c43a986d8ec5ea378f6c4a76e33",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a47f9520_fbed1b83",
        "filename": "samples/hello/build.gradle",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-08-21T16:59:46Z",
      "side": 1,
      "message": "Remove this file.",
      "revId": "c8db9d6efd188c43a986d8ec5ea378f6c4a76e33",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a47f9520_5bfd4f2c",
        "filename": "samples/hello/src/com/google/gwt/sample/hello/client/Hello.java",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-08-21T16:59:46Z",
      "side": 1,
      "message": "remove",
      "revId": "c8db9d6efd188c43a986d8ec5ea378f6c4a76e33",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4ab15ef_0cead7e7",
        "filename": "samples/hello/src/com/google/gwt/sample/hello/client/Hello.java",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 5445
      },
      "writtenOn": "2015-08-21T16:20:23Z",
      "side": 1,
      "message": "[error] Instantiation of Boolean should be avoided.",
      "revId": "c8db9d6efd188c43a986d8ec5ea378f6c4a76e33",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4ab15ef_6ce71b20",
        "filename": "samples/hello/src/com/google/gwt/sample/hello/client/Hello.java",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 5445
      },
      "writtenOn": "2015-08-21T16:20:23Z",
      "side": 1,
      "message": "[error] Instantiation of java.lang.Boolean should be avoided.",
      "revId": "c8db9d6efd188c43a986d8ec5ea378f6c4a76e33",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4ab15ef_4ce4df19",
        "filename": "samples/hello/src/com/google/gwt/sample/hello/client/Hello.java",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 5445
      },
      "writtenOn": "2015-08-21T16:20:23Z",
      "side": 1,
      "message": "[error] Line matches the illegal pattern \u0027newline before }\u0027.",
      "revId": "c8db9d6efd188c43a986d8ec5ea378f6c4a76e33",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a47f9520_9be2d792",
        "filename": "settings.gradle",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-08-21T16:59:46Z",
      "side": 1,
      "message": "remove this file",
      "revId": "c8db9d6efd188c43a986d8ec5ea378f6c4a76e33",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a47f9520_bbe793a1",
        "filename": "user/build.gradle",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-08-21T16:59:46Z",
      "side": 1,
      "message": "remove this file",
      "revId": "c8db9d6efd188c43a986d8ec5ea378f6c4a76e33",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a47f9520_0630ce20",
        "filename": "user/super/com/google/gwt/emul/java/lang/Boolean.java",
        "patchSetId": 2
      },
      "lineNbr": 97,
      "author": {
        "id": 5110
      },
      "writtenOn": "2015-08-21T18:04:58Z",
      "side": 1,
      "message": "I think you can  keep all methods non-native except booleanValue. Then you can use booleanValue() to make the conversion and call static.",
      "revId": "c8db9d6efd188c43a986d8ec5ea378f6c4a76e33",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4ab15ef_ac010347",
        "filename": "user/super/com/google/gwt/emul/java/lang/Boolean.java",
        "patchSetId": 2
      },
      "lineNbr": 106,
      "author": {
        "id": 5445
      },
      "writtenOn": "2015-08-21T16:20:23Z",
      "side": 1,
      "message": "[error] Name \u0027$createBoolean\u0027 must match pattern \u0027^[a-z][a-zA-Z0-9]*$\u0027.",
      "revId": "c8db9d6efd188c43a986d8ec5ea378f6c4a76e33",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a47f9520_fb167b09",
        "filename": "user/super/com/google/gwt/emul/java/lang/Boolean.java",
        "patchSetId": 2
      },
      "lineNbr": 106,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-08-21T16:59:46Z",
      "side": 1,
      "message": "Move these new functions to a class in intrinsic (Maybe Util.java) and don\u0027t use $ in the name.",
      "parentUuid": "a4ab15ef_ac010347",
      "revId": "c8db9d6efd188c43a986d8ec5ea378f6c4a76e33",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a47f9520_86f35eda",
        "filename": "user/super/com/google/gwt/emul/java/lang/Boolean.java",
        "patchSetId": 2
      },
      "lineNbr": 106,
      "author": {
        "id": 5110
      },
      "writtenOn": "2015-08-21T18:04:58Z",
      "side": 1,
      "message": "No we decided to keep these in here per our devirtualization discussion. This should work same as String.java",
      "parentUuid": "a47f9520_fb167b09",
      "revId": "c8db9d6efd188c43a986d8ec5ea378f6c4a76e33",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a47f9520_a688da2e",
        "filename": "user/super/com/google/gwt/emul/java/lang/Boolean.java",
        "patchSetId": 2
      },
      "lineNbr": 106,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-08-21T18:15:25Z",
      "side": 1,
      "message": "We don\u0027t have the same in String. I am actually not sure how is string constructors are really handled now that you mention. \n\nString does is not a codegen type. \n\nWhatever we do let\u0027s be consistent and treat Double,Boolean and String similarly.",
      "parentUuid": "a47f9520_86f35eda",
      "revId": "c8db9d6efd188c43a986d8ec5ea378f6c4a76e33",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a47f9520_6672f209",
        "filename": "user/super/com/google/gwt/emul/java/lang/Boolean.java",
        "patchSetId": 2
      },
      "lineNbr": 106,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-08-21T20:33:19Z",
      "side": 1,
      "message": "The replacement in String is done in GwtAstBuilder and it follows a \"magical\" convension (new String(...)) gets transformed into a static call to  String._String(....);\n\nI don\u0027t particularly like doing this at GwtAstBuilder but we should do the same pattern for both, either is GwtAstBuilder or the pass that you created.\n\nAlso we should consider String, Double and Boolean as always instantiated I think. (the string case is handled by instantiating when string literals are seen but it is not enough even for strings.)",
      "parentUuid": "a47f9520_a688da2e",
      "revId": "c8db9d6efd188c43a986d8ec5ea378f6c4a76e33",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a47f9520_33ce67a7",
        "filename": "user/super/com/google/gwt/emul/java/lang/Boolean.java",
        "patchSetId": 2
      },
      "lineNbr": 106,
      "author": {
        "id": 5001
      },
      "writtenOn": "2015-08-21T21:36:46Z",
      "side": 1,
      "message": "I was actually thinking of this when doing Double/Boolean. I thought of putting it into GwtAstBuilder,  but I thought it was cleaner and more discoverable seeing it as a fix-up pass. Putting stuff in GwtAstBuilder that is magic seems to make it hard to find. It seems best to make GwtAstBuilder \"standard Java\" and to have magic GWT-isms to transformations of a standard, clean Java AST.\n\nI could rename _String to $createString, and move the GwtAstBuilder magic to my pass, and then make my pass run first.",
      "parentUuid": "a47f9520_6672f209",
      "revId": "c8db9d6efd188c43a986d8ec5ea378f6c4a76e33",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a47f9520_d310438e",
        "filename": "user/super/com/google/gwt/emul/java/lang/Boolean.java",
        "patchSetId": 2
      },
      "lineNbr": 106,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-08-21T21:46:17Z",
      "side": 1,
      "message": "I concur, lets move String handling to the new pass.",
      "parentUuid": "a47f9520_33ce67a7",
      "revId": "c8db9d6efd188c43a986d8ec5ea378f6c4a76e33",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4ab15ef_8c06c75a",
        "filename": "user/super/com/google/gwt/emul/java/lang/Boolean.java",
        "patchSetId": 2
      },
      "lineNbr": 110,
      "author": {
        "id": 5445
      },
      "writtenOn": "2015-08-21T16:20:23Z",
      "side": 1,
      "message": "[error] Name \u0027$createBooleanFromString\u0027 must match pattern \u0027^[a-z][a-zA-Z0-9]*$\u0027.",
      "revId": "c8db9d6efd188c43a986d8ec5ea378f6c4a76e33",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4ab15ef_ec0b0b61",
        "filename": "user/super/com/google/gwt/emul/java/lang/Double.java",
        "patchSetId": 2
      },
      "lineNbr": 347,
      "author": {
        "id": 5445
      },
      "writtenOn": "2015-08-21T16:20:23Z",
      "side": 1,
      "message": "[error] Name \u0027$createDouble\u0027 must match pattern \u0027^[a-z][a-zA-Z0-9]*$\u0027.",
      "revId": "c8db9d6efd188c43a986d8ec5ea378f6c4a76e33",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4ab15ef_cc10cf8e",
        "filename": "user/super/com/google/gwt/emul/java/lang/Double.java",
        "patchSetId": 2
      },
      "lineNbr": 351,
      "author": {
        "id": 5445
      },
      "writtenOn": "2015-08-21T16:20:23Z",
      "side": 1,
      "message": "[error] Name \u0027$createDoubleFromString\u0027 must match pattern \u0027^[a-z][a-zA-Z0-9]*$\u0027.",
      "revId": "c8db9d6efd188c43a986d8ec5ea378f6c4a76e33",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}