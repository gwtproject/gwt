{
  "comments": [
    {
      "key": {
        "uuid": "c4d23a74_d8edb380",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 12,
      "author": {
        "id": 5445
      },
      "writtenOn": "2017-01-28T22:44:59Z",
      "side": 1,
      "message": "[warning] Commit message lines should be 72 characters or fewer.",
      "revId": "cc2d0ea68a00456641ffd7ff55b890af8aacc841",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "67024d6a_67bd96a5",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/Simplifier.java",
        "patchSetId": 5
      },
      "lineNbr": 112,
      "author": {
        "id": 5110
      },
      "writtenOn": "2017-01-30T20:53:34Z",
      "side": 1,
      "message": "I think this potentially changes behavior. You no longer push down the cast on multi-expressions and I\u0027m not sure about all the impacts of that.",
      "range": {
        "startLine": 110,
        "startChar": 0,
        "endLine": 112,
        "endChar": 5
      },
      "revId": "cc2d0ea68a00456641ffd7ff55b890af8aacc841",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c725ced_4f5b4238",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/Simplifier.java",
        "patchSetId": 5
      },
      "lineNbr": 112,
      "author": {
        "id": 5305
      },
      "writtenOn": "2017-01-31T14:33:37Z",
      "side": 1,
      "message": "It changes the order in which simplification occurs but I don\u0027t believe that it changes the result.\n\nThe idea is to remove the cast if the type of the expression is already the type of the cast. The type of a multiexpression is the type of its last expression. So the previous code would push the cast in first and remove it in the next iteration, this version removes it straight away. This produces the same result in fewer iterations. \n\nBecause the optimization is done in a different order it might potentially end up producing different code (especially with -optimize \u003c 9).",
      "range": {
        "startLine": 110,
        "startChar": 0,
        "endLine": 112,
        "endChar": 5
      },
      "revId": "cc2d0ea68a00456641ffd7ff55b890af8aacc841",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a06cd968_19860cf1",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/Simplifier.java",
        "patchSetId": 5
      },
      "lineNbr": 355,
      "author": {
        "id": 5110
      },
      "writtenOn": "2017-01-30T20:53:34Z",
      "side": 1,
      "message": "I asked before but shouldn\u0027t we have default in switch that throws assertion error?",
      "revId": "cc2d0ea68a00456641ffd7ff55b890af8aacc841",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46d7e80e_1f229e57",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/Simplifier.java",
        "patchSetId": 5
      },
      "lineNbr": 355,
      "author": {
        "id": 5305
      },
      "writtenOn": "2017-01-31T14:33:37Z",
      "side": 1,
      "message": "We should. It should be an invariant of our AST that the argument of a NOT is always a boolean expression (and those above are the only boolean binary expressions). The invariant should be currently holding but I can not say for sure. I prefer to keep the old behaviour here.",
      "revId": "cc2d0ea68a00456641ffd7ff55b890af8aacc841",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}