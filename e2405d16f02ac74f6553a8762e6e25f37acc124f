{
  "comments": [
    {
      "key": {
        "uuid": "63f21c57_009a4682",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/JsniRestrictionChecker.java",
        "patchSetId": 3
      },
      "lineNbr": 102,
      "author": {
        "id": 5031
      },
      "writtenOn": "2016-06-06T20:24:38Z",
      "side": 1,
      "message": "Hmm so you are allowing all constructors now on these types (also in next else-if below)? Are you sure this is correct? Currently, without this CL applied, something like\n\n  @java.lang.Double::new(Ljava/lang/String;)(\"123\")\n\nis allowed but\n\n   @java.lang.String::new(Ljava/lang/String;)(\"other\")\n\nis disallowed. With your change the String constructor would now be allowed? I guess its a good idea to also add some tests for ::new in JsniRestrictionCheckerTest.",
      "range": {
        "startLine": 102,
        "startChar": 12,
        "endLine": 102,
        "endChar": 40
      },
      "revId": "e2405d16f02ac74f6553a8762e6e25f37acc124f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03688001_fbf0679e",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/JsniRestrictionChecker.java",
        "patchSetId": 3
      },
      "lineNbr": 102,
      "author": {
        "id": 5110
      },
      "writtenOn": "2016-06-06T22:09:50Z",
      "side": 1,
      "message": "Actually it is the other way around. String was allowed and Double wasn\u0027t. Now as Double works the way String works, this change seems appropriate.",
      "parentUuid": "63f21c57_009a4682",
      "range": {
        "startLine": 102,
        "startChar": 12,
        "endLine": 102,
        "endChar": 40
      },
      "revId": "e2405d16f02ac74f6553a8762e6e25f37acc124f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23e024e0_5e92555e",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/JsniRestrictionChecker.java",
        "patchSetId": 3
      },
      "lineNbr": 102,
      "author": {
        "id": 5031
      },
      "writtenOn": "2016-06-06T22:22:28Z",
      "side": 1,
      "message": "Are you sure? I tried\n\n   public void onModuleLoad() {\n    RootPanel.get().add(new Label(\"Test: \" + test()));\n    RootPanel.get().add(new Label(\"Test: \" + test2()));\n  }\n\n  private native final Double test() /*-{\n      return @java.lang.Double::new(Ljava/lang/String;)(\"123\")\n  }-*/;\n\n  private native final String test2() /*-{\n      return @java.lang.String::new(Ljava/lang/String;)(\"other\")\n  }-*/;\n\nwith a GWT build from 3rd june. It fails on test2() method. If I remove test2() it compiles fine and Double::new works.",
      "parentUuid": "03688001_fbf0679e",
      "range": {
        "startLine": 102,
        "startChar": 12,
        "endLine": 102,
        "endChar": 40
      },
      "revId": "e2405d16f02ac74f6553a8762e6e25f37acc124f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03688001_bbaeef3a",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/JsniRestrictionChecker.java",
        "patchSetId": 3
      },
      "lineNbr": 102,
      "author": {
        "id": 5110
      },
      "writtenOn": "2016-06-06T22:36:02Z",
      "side": 1,
      "message": "ok, seems like I misread. I thought we were already allowing string construction.\n\nAnyway I think the behavior I read here seems reasonable.",
      "parentUuid": "23e024e0_5e92555e",
      "range": {
        "startLine": 102,
        "startChar": 12,
        "endLine": 102,
        "endChar": 40
      },
      "revId": "e2405d16f02ac74f6553a8762e6e25f37acc124f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03688001_e9d41dfe",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/JsniRestrictionChecker.java",
        "patchSetId": 3
      },
      "lineNbr": 102,
      "author": {
        "id": 5105
      },
      "writtenOn": "2016-06-07T19:38:34Z",
      "side": 1,
      "message": "FYI. String is also devirtualized and both should be allowed. What does it mean that it fails.\nDo you get the JSNI error messages?",
      "parentUuid": "23e024e0_5e92555e",
      "range": {
        "startLine": 102,
        "startChar": 12,
        "endLine": 102,
        "endChar": 40
      },
      "revId": "e2405d16f02ac74f6553a8762e6e25f37acc124f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3e36c1d_ec022b69",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/JsniRestrictionChecker.java",
        "patchSetId": 3
      },
      "lineNbr": 102,
      "author": {
        "id": 5031
      },
      "writtenOn": "2016-06-07T19:53:01Z",
      "side": 1,
      "message": "Yes I do get\n\n  [ERROR] JSNI method \u003cclass name\u003e.test2()Ljava/lang/String; attempts to call method java.lang.String.String(Ljava/lang/String;) \u003cinit\u003e. Only static methods from java.lang.String can be called from JSNI.\n\nbecause the original if-statement does not exclude String constructors and thus they are not allowed. I guess it was just an oversight in the original code. Double constructor works because Double was not restricted at all in the original code.",
      "parentUuid": "03688001_e9d41dfe",
      "range": {
        "startLine": 102,
        "startChar": 12,
        "endLine": 102,
        "endChar": 40
      },
      "revId": "e2405d16f02ac74f6553a8762e6e25f37acc124f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0316c08f_6592065f",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/JsniRestrictionChecker.java",
        "patchSetId": 3
      },
      "lineNbr": 104,
      "author": {
        "id": 5031
      },
      "writtenOn": "2016-06-06T22:30:14Z",
      "side": 1,
      "message": "nit: If constructors are generally allowed I would mention it in the message",
      "range": {
        "startLine": 104,
        "startChar": 53,
        "endLine": 104,
        "endChar": 77
      },
      "revId": "e2405d16f02ac74f6553a8762e6e25f37acc124f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03688001_692acd1a",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/JsniRestrictionChecker.java",
        "patchSetId": 3
      },
      "lineNbr": 104,
      "author": {
        "id": 5305
      },
      "writtenOn": "2016-06-07T04:42:15Z",
      "side": 1,
      "message": "Either way we should treat constructors for all devirtualized types the same. \n\nIn the past string constructors were forbidden. So the other choice was to forbid constructors for all devirtualized types in JSNI,  but there are some usages in our library and constructors are no different than static functions, so I think it makes more sense to allow them.\n\nJust to be safe I\u0027ll add test to cover that case and reword the error message.",
      "parentUuid": "0316c08f_6592065f",
      "range": {
        "startLine": 104,
        "startChar": 53,
        "endLine": 104,
        "endChar": 77
      },
      "revId": "e2405d16f02ac74f6553a8762e6e25f37acc124f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03688001_c9cde175",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/JsniRestrictionChecker.java",
        "patchSetId": 3
      },
      "lineNbr": 104,
      "author": {
        "id": 5105
      },
      "writtenOn": "2016-06-07T19:38:34Z",
      "side": 1,
      "message": "Reworded as \"Instance methods of Blah can not be called from JSNI.",
      "parentUuid": "0316c08f_6592065f",
      "range": {
        "startLine": 104,
        "startChar": 53,
        "endLine": 104,
        "endChar": 77
      },
      "revId": "e2405d16f02ac74f6553a8762e6e25f37acc124f",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}