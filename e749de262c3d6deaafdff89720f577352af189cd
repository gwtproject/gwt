{
  "comments": [
    {
      "key": {
        "uuid": "ad15b184_5ff0735f",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/ControlFlowAnalyzer.java",
        "patchSetId": 1
      },
      "lineNbr": 208,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-05-13T17:13:48Z",
      "side": 1,
      "message": "maybe refactor this code into maybeRescueJsoImplementor. I have seen code similar to this in this file.",
      "range": {
        "startLine": 195,
        "startChar": 6,
        "endLine": 208,
        "endChar": 9
      },
      "revId": "e749de262c3d6deaafdff89720f577352af189cd",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad15b184_ff267fb2",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/ControlFlowAnalyzer.java",
        "patchSetId": 1
      },
      "lineNbr": 237,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-05-13T17:13:48Z",
      "side": 1,
      "message": "rescueAndInstantiateSuperInterfaces? This also rescues members which I found surprising....\n\nMaybe rescueMembersAndInstantiateSuperInterfaces?",
      "range": {
        "startLine": 237,
        "startChar": 8,
        "endLine": 237,
        "endChar": 29
      },
      "revId": "e749de262c3d6deaafdff89720f577352af189cd",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad15b184_ddf466d5",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/ControlFlowAnalyzer.java",
        "patchSetId": 1
      },
      "lineNbr": 237,
      "author": {
        "id": 5001
      },
      "writtenOn": "2015-05-13T20:52:13Z",
      "side": 1,
      "message": "I agree with this, on initial reading I wasn\u0027t sure if this was going to include rescuing members too.",
      "parentUuid": "ad15b184_ff267fb2",
      "range": {
        "startLine": 237,
        "startChar": 8,
        "endLine": 237,
        "endChar": 29
      },
      "revId": "e749de262c3d6deaafdff89720f577352af189cd",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad15b184_99d15d02",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/ControlFlowAnalyzer.java",
        "patchSetId": 1
      },
      "lineNbr": 237,
      "author": {
        "id": 5110
      },
      "writtenOn": "2015-05-14T00:31:40Z",
      "side": 1,
      "message": "My mistake. Good catch.",
      "parentUuid": "ad15b184_ddf466d5",
      "range": {
        "startLine": 237,
        "startChar": 8,
        "endLine": 237,
        "endChar": 29
      },
      "revId": "e749de262c3d6deaafdff89720f577352af189cd",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad15b184_1dd6fe45",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/ControlFlowAnalyzer.java",
        "patchSetId": 1
      },
      "lineNbr": 302,
      "author": {
        "id": 5001
      },
      "writtenOn": "2015-05-13T20:52:13Z",
      "side": 1,
      "message": "Technically, isn\u0027t it only needed for instanceof checking if it has a prototype attribute? Without it, it acts like a JSO.",
      "range": {
        "startLine": 302,
        "startChar": 90,
        "endLine": 302,
        "endChar": 91
      },
      "revId": "e749de262c3d6deaafdff89720f577352af189cd",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad15b184_595405da",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/ControlFlowAnalyzer.java",
        "patchSetId": 1
      },
      "lineNbr": 302,
      "author": {
        "id": 5110
      },
      "writtenOn": "2015-05-14T00:31:40Z",
      "side": 1,
      "message": "Comment looks like a copy paste error. I updated it.\n\nIf we don\u0027t rescue the the type, then instanceof replaced with null check as there are no instances. I already added a test case that reproduces this exact problem. e.g.\n\n  assertTrue(createJso() instanceof MyJsInterfaceWithNoOtherReference)\n\nwill be re-written as createJso() \u003d\u003d null if we don\u0027t rescue the JsType here.",
      "parentUuid": "ad15b184_1dd6fe45",
      "range": {
        "startLine": 302,
        "startChar": 90,
        "endLine": 302,
        "endChar": 91
      },
      "revId": "e749de262c3d6deaafdff89720f577352af189cd",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad15b184_a2cce76a",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/ControlFlowAnalyzer.java",
        "patchSetId": 1
      },
      "lineNbr": 442,
      "author": {
        "id": 5001
      },
      "writtenOn": "2015-05-13T20:52:13Z",
      "side": 1,
      "message": "I think rescueAndInstantiate is more readable than rescue(type, true)  I had to lookup what the boolean meant (reference? instantiated?)",
      "range": {
        "startLine": 442,
        "startChar": 10,
        "endLine": 442,
        "endChar": 11
      },
      "revId": "e749de262c3d6deaafdff89720f577352af189cd",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad15b184_d93f5584",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/ControlFlowAnalyzer.java",
        "patchSetId": 1
      },
      "lineNbr": 442,
      "author": {
        "id": 5110
      },
      "writtenOn": "2015-05-14T00:31:40Z",
      "side": 1,
      "message": "We tried a few combination but I\u0027ll take a look at this one more time.",
      "parentUuid": "ad15b184_a2cce76a",
      "range": {
        "startLine": 442,
        "startChar": 10,
        "endLine": 442,
        "endChar": 11
      },
      "revId": "e749de262c3d6deaafdff89720f577352af189cd",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad15b184_1f543bd9",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/ControlFlowAnalyzer.java",
        "patchSetId": 1
      },
      "lineNbr": 513,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-05-13T17:13:48Z",
      "side": 1,
      "message": "Rewrite. Maybe along the lines\n\nTechnically, JsType/JsFunction are also instantiatable in JavaScript but instead of treating them as JSOs (where basically casts, and appearance as parameter or return return types make them live), we take a different approach. A JsType/JsFunction is considered instantiable in JS if there is an exported constructor or an instance method gets called.",
      "range": {
        "startLine": 512,
        "startChar": 6,
        "endLine": 513,
        "endChar": 99
      },
      "revId": "e749de262c3d6deaafdff89720f577352af189cd",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad15b184_e269bf24",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/ControlFlowAnalyzer.java",
        "patchSetId": 1
      },
      "lineNbr": 513,
      "author": {
        "id": 5001
      },
      "writtenOn": "2015-05-13T20:52:13Z",
      "side": 1,
      "message": "The ways in which a JsType could be instantiated:\n\n1) directly Java new\u0027ed (concrete type)\n2) @JsExported ctor\n3) Passed as a parameter from JS into another live JsType/JsExported method on any class (since you can completely implement the interface in JS)\n4) As a return type of a live @JsType method\n5) As a cast from some other type\n\n\nFor example:\n\n@JsType\ninterface Foo {}\n\nclass Bar {\n  // doIt can be called from JS with a raw JS object\n  @JsExport void doIt(Foo f) { f.blah(); }\n}\n\nor\n\n// no methods called, but Foo might still be needed for instanceof check. Also, if there\u0027s a Java implementor that\u0027s instantiable, Foo\u0027s liveness implies any of it\u0027s methods might be called if it is ever cast from FooImpl to Foo and escapes into JS.\nclass Bar {\n  // doIt can be called from JS with a raw JS object\n  @JsExport native Foo reinterpretCast(Object o) /*-{ return o; }-*/;\n}\n\nThe approach proposed is fine for now, but overly conservative, since it will end up rescuing every method of a JsType interface if even the type doesn\u0027t escape to JS.\n\nSo for example, if concrete FooImpl has 20 methods and implements Foo, which has an @JsType, and a single method is called on the interface, than all of FooImpl\u0027s methods get rescued, even if Foo never escapes to JS.\n\nGiven how @JsType might creep into lots of codebases over time and you pay a cost if JsInterop is enabled (which you want to enable by default), this means potential code size regressions for people adopting @JsType instead of JSOs.\n\nPeople can and will liberally throw around these annotations.",
      "parentUuid": "ad15b184_1f543bd9",
      "range": {
        "startLine": 512,
        "startChar": 6,
        "endLine": 513,
        "endChar": 99
      },
      "revId": "e749de262c3d6deaafdff89720f577352af189cd",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad15b184_fca79f87",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/ControlFlowAnalyzer.java",
        "patchSetId": 1
      },
      "lineNbr": 513,
      "author": {
        "id": 5110
      },
      "writtenOn": "2015-05-14T00:31:40Z",
      "side": 1,
      "message": "As I described in an another discussion, it doesn\u0027t seem feasible to track JsTypes across java/javascript boundary so we cannot precisely know which types escape to JS (this is because native bounding method (e.g. an export) can use super types or Object class (e.g. Map).\n\nThis means that, if there is a JsType that is instantiated, we need to keep its all JsType methods.\n\nI don\u0027t know if you recall it, but to overcome this issue, I earlier suggested @JsImplicit so that we could more precisely track type at boundary APIs. For example;\n\n  native void put(String key, @JsImplicit(Object.class) Object value)\n\nBy using JsImplicit in above example, we are promising the compiler that we will only ever call Object class methods from the javascript side. Using this extra information, compiler can trim down which methods to keep alive for JsTypes. (Even now I can see cases where this will be not enough (e.g. what happens if we pass a Map to javascript and javacript accesses objects inside it?).\n\nAnyway, right now I don\u0027t see an option. If I have a concrete type that implement JsType or if I have a concrete JsType, this means it is meant to be called from javascript and it is not optimizable as well as a regular non-jstype.",
      "parentUuid": "ad15b184_e269bf24",
      "range": {
        "startLine": 512,
        "startChar": 6,
        "endLine": 513,
        "endChar": 99
      },
      "revId": "e749de262c3d6deaafdff89720f577352af189cd",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad15b184_7dea92a2",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/ControlFlowAnalyzer.java",
        "patchSetId": 1
      },
      "lineNbr": 566,
      "author": {
        "id": 5001
      },
      "writtenOn": "2015-05-13T20:58:45Z",
      "side": 1,
      "message": "You may need to change this to not rescue JInterfaceType",
      "range": {
        "startLine": 566,
        "startChar": 62,
        "endLine": 566,
        "endChar": 63
      },
      "revId": "e749de262c3d6deaafdff89720f577352af189cd",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad15b184_3c8bf7ef",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/ControlFlowAnalyzer.java",
        "patchSetId": 1
      },
      "lineNbr": 566,
      "author": {
        "id": 5110
      },
      "writtenOn": "2015-05-14T00:31:40Z",
      "side": 1,
      "message": "rluble is looking for that in a separate patch (we don\u0027t think this is a regression).",
      "parentUuid": "ad15b184_7dea92a2",
      "range": {
        "startLine": 566,
        "startChar": 62,
        "endLine": 566,
        "endChar": 63
      },
      "revId": "e749de262c3d6deaafdff89720f577352af189cd",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad15b184_9f0aebd1",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/ControlFlowAnalyzer.java",
        "patchSetId": 1
      },
      "lineNbr": 596,
      "author": {
        "id": 5105
      },
      "writtenOn": "2015-05-13T17:13:48Z",
      "side": 1,
      "message": "This code is similar to the one mentioned in my first comment in this file. Should it not be the same?",
      "range": {
        "startLine": 592,
        "startChar": 0,
        "endLine": 596,
        "endChar": 7
      },
      "revId": "e749de262c3d6deaafdff89720f577352af189cd",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0da4fdb8_50fa4c89",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/ControlFlowAnalyzer.java",
        "patchSetId": 1
      },
      "lineNbr": 596,
      "author": {
        "id": 5110
      },
      "writtenOn": "2015-05-14T00:33:18Z",
      "side": 1,
      "message": "will take a look",
      "parentUuid": "ad15b184_9f0aebd1",
      "range": {
        "startLine": 592,
        "startChar": 0,
        "endLine": 596,
        "endChar": 7
      },
      "revId": "e749de262c3d6deaafdff89720f577352af189cd",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}