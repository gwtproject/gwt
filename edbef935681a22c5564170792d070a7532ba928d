{
  "comments": [
    {
      "key": {
        "uuid": "b686fe2b_a171697a",
        "filename": "dev/core/src/com/google/gwt/dev/javac/JsInteropUtil.java",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 5305
      },
      "writtenOn": "2015-11-07T18:28:14Z",
      "side": 1,
      "message": "Is there any reason to apply classwide annotation to non public native members? Previously we did that only for native consturctors because the default constructor may be non public.",
      "range": {
        "startLine": 130,
        "startChar": 0,
        "endLine": 132,
        "endChar": 5
      },
      "revId": "edbef935681a22c5564170792d070a7532ba928d",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b66efe78_e941d51d",
        "filename": "dev/core/src/com/google/gwt/dev/javac/JsInteropUtil.java",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 5110
      },
      "writtenOn": "2015-11-09T04:51:34Z",
      "side": 1,
      "message": "I specifically did that so that a native JsType is purely native; all members included. As we already support overloads for native types, it doesn\u0027t have consequences to make them all jsmembers.\n\nWe were previously doing the same but we were also saying that they need to be public; I think that is mostly derived from not having js names for non-public members. Then we  special cased constructor and tried to enforce the rule by checking if they have js names. And then one can have a non-public method and use JsMethod/JsProperty to assign a name and make them work. It is a complicated model for just stubbing some native javascript API. \n\nI couldn\u0027t find a compelling reason to go to a more complex model that required more complex restriction checking with confusing error msgs.",
      "parentUuid": "b686fe2b_a171697a",
      "range": {
        "startLine": 130,
        "startChar": 0,
        "endLine": 132,
        "endChar": 5
      },
      "revId": "edbef935681a22c5564170792d070a7532ba928d",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b686fe2b_c1857d77",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/JsInteropRestrictionChecker.java",
        "patchSetId": 2
      },
      "lineNbr": 110,
      "author": {
        "id": 5305
      },
      "writtenOn": "2015-11-07T18:28:14Z",
      "side": 1,
      "message": "I think your changes here are problematic. \n\nYou are not only allowing field initializers but also an arbitrary init block\n\n@JsType(native)\nclass A {\n  {\n     ...\n  }\n}\n\n\nYou need analyze inits the same way clinits are analyzed.\n \nAdd a test case for this.",
      "range": {
        "startLine": 98,
        "startChar": 2,
        "endLine": 110,
        "endChar": 7
      },
      "revId": "edbef935681a22c5564170792d070a7532ba928d",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b66efe78_890db982",
        "filename": "dev/core/src/com/google/gwt/dev/jjs/impl/JsInteropRestrictionChecker.java",
        "patchSetId": 2
      },
      "lineNbr": 110,
      "author": {
        "id": 5110
      },
      "writtenOn": "2015-11-09T04:51:34Z",
      "side": 1,
      "message": "I added the test cases. My motivation to change this so that we can give a more precise error message than the confusing constructor error msg.",
      "parentUuid": "b686fe2b_c1857d77",
      "range": {
        "startLine": 98,
        "startChar": 2,
        "endLine": 110,
        "endChar": 7
      },
      "revId": "edbef935681a22c5564170792d070a7532ba928d",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}