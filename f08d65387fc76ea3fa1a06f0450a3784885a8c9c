{
  "comments": [
    {
      "key": {
        "uuid": "7f33447f_9fdac1a6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-06-04T07:00:27Z",
      "side": 1,
      "message": "issue 8478?",
      "revId": "f08d65387fc76ea3fa1a06f0450a3784885a8c9c",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df2c3030_c98413bd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 5130
      },
      "writtenOn": "2014-06-08T05:00:18Z",
      "side": 1,
      "message": "Not deliberately, but I can link that as well. The goal of this fix was making it possible for other unknown useragents to be given a standard impl (safari in all likelihood, though gecko_18 could be reasonable too). The target here in fact is a \u0027Mozilla/5.0 compatible\u0027 browser that apparently can run safari/gecko permutations, but doesn\u0027t report an engine in a usable way - the googlebot ;).\n\nFor 8487, it seems already to be possible to define \u0027unknown\u0027 as a user.agent value, and define a replace-with for the entrypoint with the warning/redirect. An implementation will still be required for each useragent-specific class, so fallback can be defined to some browser that is likely to at least get it that far.",
      "parentUuid": "7f33447f_9fdac1a6",
      "revId": "f08d65387fc76ea3fa1a06f0450a3784885a8c9c",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f33447f_ffe42d72",
        "filename": "user/src/com/google/gwt/useragent/rebind/UserAgentGenerator.java",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-06-04T07:00:27Z",
      "side": 1,
      "message": "Actually it might be better to return \u0027unknown\u0027 for runtimeValue so that developers could detect the fallback mode. As a side effect, this state will be logged by UserAgentAsserter as well, which sounds fare to me.\n\nWhat do you think?",
      "revId": "f08d65387fc76ea3fa1a06f0450a3784885a8c9c",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df2c3030_69913ff7",
        "filename": "user/src/com/google/gwt/useragent/rebind/UserAgentGenerator.java",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 5130
      },
      "writtenOn": "2014-06-08T05:00:18Z",
      "side": 1,
      "message": "My concern would be that any project that needs to support otherwise un-supported browsers would then need to disable this runtime check, and wouldn\u0027t be able to take advantage of the feature for other browsers (or miss accidental checkins of \u003cset-property name\u003d\u0027user.agent\u0027 value\u003d\u0027safari\u0027 /\u003e). \n\nIs there a way to get it both ways? Give the runtime check four modes perhaps, with fallback on/off and standard useragents on/off? \n\nThe writeUserAgentPropertyJavaScript impl will default to \u0027unknown\u0027 if left null, so unless some one explicitly defines a fallback for user.agent property, behavior will not change.",
      "parentUuid": "7f33447f_ffe42d72",
      "revId": "f08d65387fc76ea3fa1a06f0450a3784885a8c9c",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff5d74d3_addf5e98",
        "filename": "user/src/com/google/gwt/useragent/rebind/UserAgentGenerator.java",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-06-10T01:15:40Z",
      "side": 1,
      "message": "From other discussions, what I get is;\n\nIf they really want to support otherwise un-supported browsers, they could re-define the \u0027unknown\u0027 user-agent with a fallback.\n\nIf they are not really supporting the un-supported browsers but just want to provide a better fallback,  they could define the fallback and keep the UserAgentAsserter enabled - I think.\n\nSo it sounds like both use cases are covered.",
      "parentUuid": "df2c3030_69913ff7",
      "revId": "f08d65387fc76ea3fa1a06f0450a3784885a8c9c",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f12b80c_3331e8de",
        "filename": "user/src/com/google/gwt/useragent/rebind/UserAgentGenerator.java",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 5130
      },
      "writtenOn": "2014-06-10T03:29:47Z",
      "side": 1,
      "message": "That\u0027s my understanding as well, but since \"fallback\" is overloaded even within the context of properties, I\u0027ll restate one more time:\n\nThe two fallback features seem to have different goals: one says \u0027pretend to be that other one for any rule that doesn\u0027t explicitly mention you\u0027, and the other says \u0027if you aren\u0027t recognized to be *any* property at all, behave as if you were always that other one\u0027. The former (defining a property and in that declaration pointing at a fallback) is useful for an almost-supported case, where you actually want to call out the differences between the implementation, but still hopefully scrape along. In the latter case you have no idea what will work, and don\u0027t care to track that you don\u0027t know, and are simply punting.\n\nSo in my mind `set-property-fallback` is good for avoiding an \u0027unknown\u0027 or \u0027ie6\u0027 value and requesting that all unexpected browsers be treated as if they were modern, whereas the `fallback-value` attribute is useful to explicitly define \u0027unknown\u0027 or \u0027ie6\u0027, handle it in a `replace-with` rule, and ignore the barrage of warnings.\n\nThe chief difference is called out in what the UserAgentAsserter would do - with a `fallback-value` and lots of warnings, it too will warn the user, with a `set-property-fallback` set, it will be fooled just like the rest of the rebind rules.",
      "parentUuid": "ff5d74d3_addf5e98",
      "revId": "f08d65387fc76ea3fa1a06f0450a3784885a8c9c",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff77347c_9ffb7fe3",
        "filename": "user/src/com/google/gwt/useragent/rebind/UserAgentGenerator.java",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-06-12T02:10:37Z",
      "side": 1,
      "message": "\u003e The chief difference is called out in what the UserAgentAsserter would do - with a `fallback-value` and lots of warnings, it too will warn the user, with a `set-property-fallback` set, it will be fooled just like the rest of the rebind rules.\n\nIf I\u0027m not missing something, if you pass \u0027null\u0027 here instead of getFallbackValue; it will behave like following (which I think what we want):\n\nWith a defined \u0027unknown\u0027 property with a fallback-value (i.e. almost-supported case); UseragentAsserter will *not* complain as both compile time and runtime values are going to be same: \u0027unknown\u0027.\n\nWith set-property-fallback to modern browser (i.e. have-no-idea-what-will-work); UseragentAsserter will complain via GWT.uncaughtExceptionHandler. Also the developer can choose to show warning in the main page by checking the useragent.runtimeValue which will return \u0027unknown\u0027.\n\n(BTW, UserAgentAsserter no longer warns the user via dialog)",
      "parentUuid": "9f12b80c_3331e8de",
      "revId": "f08d65387fc76ea3fa1a06f0450a3784885a8c9c",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f6424c8_231258e7",
        "filename": "user/src/com/google/gwt/useragent/rebind/UserAgentGenerator.java",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 5130
      },
      "writtenOn": "2014-06-12T03:04:24Z",
      "side": 1,
      "message": "Okay, I\u0027m coming around knowing that fact, I had imagined it was still an alert.\n\nHere\u0027s a thought - the java.lang.AssertionError means that it will be the online assertion error logged by uceh, unless -ea is on, in which case there could be others. Since this may not be a error case, just an interesting, loggable note, what would you say to replacing the AssertionError with a specific exception for this case, so that a a uceh that is actively looking for *and ignoring* this error can properly deal with it? Say, to display some errors to the user, and completely ignore others like this?\n\nI\u0027d be amenable to it being a RuntimeException or Error like AssertionError, but the goal being to allow it to be handled by type, not text.\n\nThis would allow the asserter (name starts to lose some punch without it being an assert I guess, though it was an alerter before it threw the assert) to still be active for misconfigured user.agent properties, but be handled specially to avoid any possible visible warnings showing up (to pick an example at random) to search engines.",
      "parentUuid": "ff77347c_9ffb7fe3",
      "revId": "f08d65387fc76ea3fa1a06f0450a3784885a8c9c",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}