{
  "comments": [
    {
      "key": {
        "uuid": "90bf10de_97dd0474",
        "filename": "elemental/tests/elemental/js/util/MapFromIntTests.java",
        "patchSetId": 3
      },
      "lineNbr": 140,
      "author": {
        "id": 5030
      },
      "writtenOn": "2014-10-10T06:21:01Z",
      "side": 1,
      "message": "Do we really want to enforce that map.keys() and map.values() use the same order for the underlying map entries?\n\nI.e. for (pseudo code) {1:\"one\", 3:\"three\"} do we really want map.keys() and map.values() to be either [1,3]–[\"one\",\"three\"] or [3,1]–[\"three\",\"one\"], but not [1,3]–[\"three\",\"one\"] or [3,1]–[\"one\",\"three\"]?\nOr in other words, that\n\n keys \u003d map.keys();\n assertEquals(map.get(keys.get(0)), map.values().get(0));\n\nI\u0027d rather keep the same kind of checks as before but just remove the ordering constraint; i.e.\n\n static void assertSetSamelitude(int[] expected, ArrayOfInt values) {\n   assertEquals(toMultiset(expected), toSet(values));\n }\n\n(with toMultiet constructing a Map\u003cInteger,Integer\u003e counting the number of occurrence of each key; like a Guava Multiset)",
      "revId": "f93671cd47106135358f96540b8033fda09bc32e",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}