{
  "comments": [
    {
      "key": {
        "uuid": "f0c4cb62_929f6454",
        "filename": "user/src/com/google/gwt/core/client/impl/Coercions.java",
        "patchSetId": 17
      },
      "lineNbr": 29,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-09-12T22:06:20Z",
      "side": 1,
      "message": "@Roberto, can we write this in java and hope it doesn\u0027t get optimized?",
      "revId": "fccb2810502b25f933822dca779bd8c1c2a52846",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0c4cb62_9d27753b",
        "filename": "user/src/com/google/gwt/core/client/impl/Coercions.java",
        "patchSetId": 17
      },
      "lineNbr": 29,
      "author": {
        "id": 5105
      },
      "writtenOn": "2014-09-12T22:47:42Z",
      "side": 1,
      "message": "I think you can probably write \n   \n  return (int) (double) value;\n\n\nI think it won\u0027t be optimized, but we have to verify if that is the case. (we use ~~ instead of | 0 in Cast.java though)",
      "parentUuid": "f0c4cb62_929f6454",
      "revId": "fccb2810502b25f933822dca779bd8c1c2a52846",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0c4cb62_4cd1ac8b",
        "filename": "user/src/com/google/gwt/core/client/impl/Coercions.java",
        "patchSetId": 17
      },
      "lineNbr": 29,
      "author": {
        "id": 5110
      },
      "writtenOn": "2014-09-13T01:47:15Z",
      "side": 1,
      "message": "Ok let\u0027s go with what Roberto is suggesting so that we could have things inlined in java level.\nAndre, can you also add a test for this utility? It will be little tricky, we need to be sure it is not evaluated by JDT. So something like following should work:\n\n // x should be equal to 2\n int _2 \u003d Random.nextInt(1) + 1;\n assertEquals(..., ensureInt(_2 * Integer.MAX))",
      "parentUuid": "f0c4cb62_9d27753b",
      "revId": "fccb2810502b25f933822dca779bd8c1c2a52846",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0c68bd8_f46e260d",
        "filename": "user/src/com/google/gwt/core/client/impl/Coercions.java",
        "patchSetId": 17
      },
      "lineNbr": 29,
      "author": {
        "id": 5542
      },
      "writtenOn": "2014-09-26T15:56:44Z",
      "side": 1,
      "message": "As I correctly understand, this little jsni method is inlined by the compiler, isn\u0027t it? \n\nI really like \"|0\" since it\u0027s a single operation and browsers aware of it (asm.js).\n\nI don\u0027t mind using \"~~\" but I\u0027d like to know why it\u0027s better here.",
      "parentUuid": "f0c4cb62_4cd1ac8b",
      "revId": "fccb2810502b25f933822dca779bd8c1c2a52846",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0c347c9_21299973",
        "filename": "user/src/com/google/gwt/core/client/impl/Coercions.java",
        "patchSetId": 17
      },
      "lineNbr": 29,
      "author": {
        "id": 5105
      },
      "writtenOn": "2014-09-26T16:47:18Z",
      "side": 1,
      "message": "The compiler has two optimization stages, the first on the Java AST and the second on the JS AST after translating from Java to Js.\n\nThe first stage is where optimization are more profitable, and in that stage JSNI code is not inlined not optimized.\n\nSo it is true that the method will be inlined in the end but the Java AST optimizer wont be able to exploit it.",
      "parentUuid": "f0c68bd8_f46e260d",
      "revId": "fccb2810502b25f933822dca779bd8c1c2a52846",
      "serverId": "84fdd5b9-d3fc-3149-9ae9-e619898c4c46",
      "unresolved": false
    }
  ]
}