/*
 * Copyright 2013 Google Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package com.google.gwt.tools.cldr;

import com.google.gwt.codegen.server.JavaSourceWriterBuilder;
import com.google.gwt.codegen.server.SourceWriter;
import com.google.gwt.i18n.shared.GwtLocale;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

/**
 * Generates LocaleInfo implementations from classes generated by other processors -- must
 * run last.
 */
public class LocaleInfoProcessor extends Processor {

  private static final String CATEGORY_ORIENTATION = "orientation";

  public LocaleInfoProcessor(Processors processors) {
    super(processors);
    addEntries(CATEGORY_ORIENTATION, "//ldml/layout/orientation", "characterOrder", null,
        "characters");
  }

  @Override
  public void addDependencies() {
    processors.requireProcessor(CurrencyDataProcessor.class);
    processors.requireProcessor(DateTimeFormatInfoProcessor.class);
    processors.requireProcessor(LocalizedNamesProcessor.class);
    processors.requireProcessor(ListFormattingProcessor.class);
    processors.requireProcessor(NumberFormatInfoProcessor.class);
    processors.requireProcessor(PluralOrdinalProcessor.class);
  }

  @Override
  public void cleanupData() {
    sharedLocaleData.removeDuplicates(CATEGORY_GENCLASSES);
    localeData.removeDuplicates(CATEGORY_ORIENTATION);
  }

  @Override
  public void writeOutputFiles() throws IOException {
    for (GwtLocale locale : sharedLocaleData.getAllLocales()) {
      generateImpl(locale, false);
      generateImpl(locale, true);
    }
    generateAllLocales();
    generateCldrLocales();
  }

  private void generateAllLocales() throws IOException {
    PrintWriter pw = createOutputFile("shared/cldr/AllLocales.txt");
    printVersion(pw, localeData.getGwtLocale("root"), "#");
    Set<GwtLocale> localeSet = localeData.getAllLocales();
    String[] localeNames = new String[localeSet.size()];
    int i = 0;
    for (GwtLocale locale : localeSet) {
      localeNames[i++] = locale.toString();
    }
    Arrays.sort(localeNames);
    for (String localeName : localeNames) {
      pw.println(localeName);
    }
    pw.close();
  }

  private void generateCldrLocales() throws IOException {
    PrintWriter pw = createOutputFile("CldrLocales.gwt.xml");
    printXmlHeader(pw);
    pw.println();
    pw.println("<!--");
    printVersion(pw, localeData.getGwtLocale("root"), "   - ");
    pw.println("-->");
    pw.println("<module>");
    pw.println("  <inherits name=\"com.google.gwt.user.User\"/>");
    pw.println("  <inherits name=\"com.google.gwt.i18n.I18N\"/>");
    Set<GwtLocale> localeSet = localeData.getAllLocales();
    String[] localeNames = new String[localeSet.size()];
    int i = 0;
    for (GwtLocale locale : localeSet) {
      localeNames[i++] = locale.toString();
    }
    Arrays.sort(localeNames);
    for (String localeName : localeNames) {
      pw.println("  <extend-configuration-property name=\"runtime.locales\" value=\"" + localeName
          + "\"/>");
    }
    pw.println("</module>");
    pw.close();
  }

  private void generateCreateMethods(SourceWriter pw, boolean useClient, Map<String, String> map,
      String... types) {
    for (String type : types) {
      String retType = "PluralRule".equals(type) || "OrdinalRule".equals(type) ? "VariantSelector"
          : type;
      String result = map.get(type);
      if (result != null) {
        if (useClient) {
          result = result.replace(".shared.", ".client.");
        }
        pw.println();
        pw.println("@Override");
        pw.println("protected " + retType + " create" + type + "() {");
        pw.indentln("return new " + result + "();");
        pw.println("}");
      }
    }
  }

  @SuppressWarnings("unused")
  private void generateGwtCreate(SourceWriter pw, String... retTypes) {
    for (String retType : retTypes) {
      pw.println();
      pw.println("@Override");
      pw.println("protected " + retType + " create" + retType + "() {");
      pw.indentln("return GWT.create(" + retType + ".class);");
      pw.println("}");
    }
  }

  private void generateImports(JavaSourceWriterBuilder jswb, Map<String, String> map,
      String... types) {
    for (String type : types) {
      if (map.get(type) != null) {
        jswb.addImport("com.google.gwt.i18n.shared." + type);
      }
    }
  }

  private void generateImpl(final GwtLocale locale, boolean client) {
    String myClass = "LocaleInfoImpl" + localeSuffix(locale);
    ProcessorCodeGenContext codeGen = new ProcessorCodeGenContext(client ? "user/super/"
        : "user/src/");
    JavaSourceWriterBuilder jswb = codeGen.addClass(client ? "com.google.gwt.i18n.super" : null,
        "com.google.gwt.i18n.shared.impl.cldr", myClass);
    jswb.setCallbacks(new PrintCldrVersionCallback());
    if (client) {
      jswb.addImport("com.google.gwt.core.client.GwtScriptOnly");
      // TODO(jat): add back when we have a generator for LocaleDisplayNames
//      if (locale.isDefault()) {
//        jswb.addImport("com.google.gwt.core.client.GWT");
//      }
    }
    Map<String, String> map = sharedLocaleData.getEntries(CATEGORY_GENCLASSES, locale);
    if (client) {
      map = new HashMap<String, String>(map);
      map.putAll(sharedLocaleData.getEntries(CATEGORY_GENCLASSES_CLIENT, locale));
    }
    generateImports(jswb, map, "CurrencyList", "DateTimeFormatInfo", "ListPatterns",
        "LocalizedNames", "NumberFormatInfo");
    // TODO(jat): add back when we have a generator for LocaleDisplayNames
//    if (client) {
//      if (locale.isDefault()) {
//        jswb.addImport("com.google.gwt.i18n.shared.LocaleDisplayNames");
//      }
//    } else {
      generateImports(jswb, map, "LocaleDisplayNames");
//    }
    if (map.containsKey("OrdinalRule") || map.containsKey("PluralRule")) {
      jswb.addImport("com.google.gwt.i18n.shared.VariantSelector");
    }
    if (locale.isDefault()) {
      jswb.addImport("com.google.gwt.i18n.shared.impl.LocaleInfoImplBase");
    }
    if (client) {
      jswb.addAnnotationDeclaration("GwtScriptOnly");
    }
    if (locale.isDefault()) {
      jswb.setSuperclass("LocaleInfoImplBase");
    } else {
      GwtLocale parent = sharedLocaleData.inheritsFrom(CATEGORY_GENCLASSES, locale);
      jswb.setSuperclass("LocaleInfoImpl" + localeSuffix(parent));
    }
    jswb.setJavaDocCommentForClass("Locale information for the \"" + locale + "\" locale.");
    SourceWriter pw = jswb.createSourceWriter();
    pw.println();
    pw.println("@Override");
    pw.println("public String name() {");
    pw.indentln("return \"" + locale.toString() + "\";");
    pw.println("}");
    String charOrientation = localeData.getEntry(CATEGORY_ORIENTATION, locale, "characters");
    if (charOrientation != null) {
      pw.println();
      pw.println("@Override");
      pw.println("public boolean isRtl() {");
      boolean isRtl = "right-to-left".equals(charOrientation);
      pw.indentln("return " + isRtl + ";");
      pw.println("}");
    }
    generateCreateMethods(pw, client, map, "CurrencyList");
    generateCreateMethods(pw, false, map, "DateTimeFormatInfo", "ListPatterns");
    // TODO(jat): add back when we have a generator for LocaleDisplayNames
//    if (client) {
//      if (locale.isDefault()) {
//        generateGwtCreate(pw, "LocaleDisplayNames");
//      }
//    } else {
      generateCreateMethods(pw, false, map, "LocaleDisplayNames");
//    }
    generateCreateMethods(pw, client, map, "LocalizedNames");
    generateCreateMethods(pw, false, map, "NumberFormatInfo", "OrdinalRule", "PluralRule");
    pw.close();
  }
}
