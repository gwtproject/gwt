/*
 * Copyright 2010 Google Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package com.google.gwt.tools.cldr;

import com.google.gwt.i18n.shared.GwtLocale;

import org.unicode.cldr.util.Factory;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Map;
import java.util.Set;

/**
 * Generates LocaleInfo implementations from classes generated by other processors -- must
 * run last.
 */
public class LocaleInfoProcessor extends Processor {

  public LocaleInfoProcessor(File outputDir, Factory cldrFactory, LocaleData localeData,
      LocaleData sharedLocaleData) {
    super(outputDir, cldrFactory, localeData, sharedLocaleData);
  }

  @Override
  protected void cleanupData() {
    sharedLocaleData.removeDuplicates("genClasses");
    localeData.removeDuplicates("orientation");
  }

  @Override
  protected void loadData() throws IOException {
    System.out.println("Loading data for orientation");
    localeData.addVersions(cldrFactory);
    for (GwtLocale locale : localeData.getAllLocales()) {
      localeData.addAttributeEntry("orientation", locale, cldrFactory, "//ldml/layout/orientation",
          "orientation", "characters", "characters");
    }
  }

  @Override
  protected void writeOutputFiles() throws IOException {
    setOverrides(true);
    for (GwtLocale locale : sharedLocaleData.getAllLocales()) {
      generateShared(locale, false);
      generateShared(locale, true);
    }
    generateAllLocales();
    generateCldrLocales();
  }

  private void generateAllLocales() throws IOException {
    PrintWriter pw = createOutputFile("shared/cldr/AllLocales.txt");
    printVersion(pw, localeData.getGwtLocale("root"), "#");
    Set<GwtLocale> localeSet = localeData.getAllLocales();
    String[] localeNames = new String[localeSet.size()];
    int i = 0;
    for (GwtLocale locale : localeSet) {
      localeNames[i++] = locale.toString();
    }
    Arrays.sort(localeNames);
    for (String localeName : localeNames) {
      pw.println(localeName);
    }
    pw.close();
  }

  private void generateCldrLocales() throws IOException {
    PrintWriter pw = createOutputFile("CldrLocales.gwt.xml");
    printXmlHeader(pw);
    pw.println();
    pw.println("<!--");
    printVersion(pw, localeData.getGwtLocale("root"), "   - ");
    pw.println("-->");
    pw.println("<module>");
    pw.println("  <inherits name=\"com.google.gwt.user.User\"/>");
    pw.println("  <inherits name=\"com.google.gwt.i18n.I18N\"/>");
    Set<GwtLocale> localeSet = localeData.getAllLocales();
    String[] localeNames = new String[localeSet.size()];
    int i = 0;
    for (GwtLocale locale : localeSet) {
      localeNames[i++] = locale.toString();
    }
    Arrays.sort(localeNames);
    for (String localeName : localeNames) {
      pw.println("  <extend-configuration-property name=\"runtime.locales\" value=\"" + localeName
          + "\"/>");
    }
    pw.println("</module>");
    pw.close();
  }

  private void generateGwtCreate(PrintWriter pw, String... retTypes) {
    for (String retType : retTypes) {
      pw.println();
      pw.println("  @Override");
      pw.println("  protected " + retType + " create" + retType + "() {");
      pw.println("    return GWT.create(" + retType + ".class);");
      pw.println("  }");
    }
  }

  private void generateCreateMethods(PrintWriter pw, boolean useClient, Map<String, String> map, String... retTypes) {
    for (String type : retTypes) {
      String retType = "PluralRule".equals(type) || "OrdinalRule".equals(type) ? "VariantSelector"
          : type;
      String result = map.get(type);
      if (result != null) {
        if (useClient) {
          result = result.replace(".shared.", ".client.");
        }
        pw.println();
        pw.println("  @Override");
        pw.println("  protected " + retType + " create" + type + "() {");
        pw.println("    return new " + result + "();");
        pw.println("  }");
      }
    }
  }

  private boolean generateImports(PrintWriter pw, Map<String, String> map, String... types) {
    return generateImports(pw, map, true, types);
  }

  private boolean generateImports(PrintWriter pw, Map<String, String> map, boolean first, String... types) {
    for (String type : types) {
      if (map.get(type) != null) {
        if (first) {
          pw.println();
          first = false;
        }
        pw.println("import com.google.gwt.i18n.shared." + type + ";");
      }
    }
    return first;
  }

  private void generateShared(GwtLocale locale, boolean genSuper) throws IOException,
      FileNotFoundException {
    String myClass = "LocaleInfoImpl" + localeSuffix(locale);
    String prefix;
    if (genSuper) {
      prefix = "user/super/com/google/gwt/i18n/super";
    } else {
      prefix = "user/src";
    }
    PrintWriter pw = createOutputFile(prefix + "/com/google/gwt/i18n/shared/cldr/", myClass
        + ".java");
    printHeader(pw);
    pw.println("package com.google.gwt.i18n.shared.cldr;");
    if (genSuper) {
      pw.println();
      pw.println("import com.google.gwt.core.client.GwtScriptOnly;");
      if (locale.isDefault()) {
        pw.println("import com.google.gwt.core.client.GWT;");
      }
    }
    Map<String, String> map = sharedLocaleData.getEntries("genClasses", locale);
    boolean first = generateImports(pw, map, "CurrencyList", "DateTimeFormatInfo", "ListPatterns");
    if (genSuper) {
      if (locale.isDefault()) {
        if (first) {
          pw.println();
          first = false;
        }
        pw.println("import com.google.gwt.i18n.shared.LocaleDisplayNames;");
      }
    } else {
      first = generateImports(pw, map, first, "LocaleDisplayNames");
    }
    first = generateImports(pw, map, first, "LocalizedNames", "NumberConstants");
    if (map.containsKey("OrdinalRule") || map.containsKey("PluralRule")) {
      if (first) {
        pw.println();
        first = false;
      }
      pw.println("import com.google.gwt.i18n.shared.VariantSelector;");
    }
    if (locale.isDefault()) {
      if (first) {
        pw.println();
        first = false;
      }
      pw.println("import com.google.gwt.i18n.shared.impl.LocaleInfoImplBase;");
    }
    if (!first) {
      pw.println();
    }
    printVersion(pw, locale, "// ");
    if (genSuper) {
      pw.println("@GwtScriptOnly   // use the pure Java version in DevMode for speed");
    }
    if (locale.isDefault()) {
      pw.println("public class LocaleInfoImpl extends LocaleInfoImplBase {");
    } else {
      GwtLocale parent = sharedLocaleData.inheritsFrom("genClasses", locale);
      pw.println("public class LocaleInfoImpl" + localeSuffix(locale) + " extends LocaleInfoImpl"
          + localeSuffix(parent) + " {");
    }
    pw.println();
    pw.println("  @Override");
    pw.println("  public String getLocaleName() {");
    pw.println("    return \"" + locale.toString() + "\";");
    pw.println("  }");
    String charOrientation = localeData.getEntry("orientation", locale, "characters");
    if (charOrientation != null) {
      pw.println();
      pw.println("  @Override");
      pw.println("  public boolean isRTL() {");
      boolean isRtl = "right-to-left".equals(charOrientation);
      pw.println("    return " + isRtl + ";");
      pw.println("  }");
    }
    generateCreateMethods(pw, genSuper, map, "CurrencyList");
    generateCreateMethods(pw, false, map, "DateTimeFormatInfo", "ListPatterns");
    if (genSuper) {
      if (locale.isDefault()) {
        generateGwtCreate(pw, "LocaleDisplayNames");
      }
    } else {
      generateCreateMethods(pw, false, map, "LocaleDisplayNames");
    }
    generateCreateMethods(pw, genSuper, map, "LocalizedNames");
    generateCreateMethods(pw, false, map, "NumberConstants", "OrdinalRule", "PluralRule");
    pw.println("}");
    pw.close();
  }
}
